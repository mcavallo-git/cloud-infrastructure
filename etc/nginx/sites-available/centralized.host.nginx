# --------------------------------------------------------------------------------------------------------- #
#   
#  UPSTREAM:  upstream_jenkins_http
#      HOST:  127.0.0.1
#      PORT:  8080
#
upstream upstream_jenkins_http {
	server 127.0.0.1:8080 fail_timeout=0;
}
# ------------------------------------------------------------
#
#==--  centralized.host
#
server {
	listen 80;
	listen 443 ssl http2;
	listen [::]:80;
	listen [::]:443 ssl http2;
	server_name centralized.host;
	if ($scheme != "https") {
		return 301 https://$host$request_uri; # Force request-upgrade from HTTP(80) to HTTPS(443)
	}
	ssl_certificate "/etc/letsencrypt/live/centralized.host/fullchain.pem";
	ssl_certificate_key "/etc/letsencrypt/live/centralized.host/privkey.pem";
	ssl_trusted_certificate "/etc/letsencrypt/live/centralized.host/chain.pem";
	location / {
		return 302 https://github.com/mcavallo-git/Coding; # Redirect to github
	}
	include "/etc/nginx/nginx_error_locations.conf";
}


# ------------------------------------------------------------
#
#==--  www.centralized.host
#
server {
	listen 80;
	listen 443 ssl http2;
	listen [::]:80;
	listen [::]:443 ssl http2;
	server_name www.centralized.host;
	if ($scheme != "https") {
		return 301 https://$host$request_uri; # Force request-upgrade from HTTP(80) to HTTPS(443)
	}
	ssl_certificate "/etc/letsencrypt/live/centralized.host/fullchain.pem";
	ssl_certificate_key "/etc/letsencrypt/live/centralized.host/privkey.pem";
	ssl_trusted_certificate "/etc/letsencrypt/live/centralized.host/chain.pem";
	location / {
		return 302 https://github.com/mcavallo-git/Coding; # Redirect to github
	}
	include "/etc/nginx/nginx_error_locations.conf";
}


# ------------------------------------------------------------
#
#==--  jenkins.centralized.host
#
server {
	listen 443 ssl http2 default_server;
	server_name jenkins.centralized.host;
	ssl_certificate "/etc/letsencrypt/live/centralized.host/fullchain.pem";
	ssl_certificate_key "/etc/letsencrypt/live/centralized.host/privkey.pem";
	ssl_trusted_certificate "/etc/letsencrypt/live/centralized.host/chain.pem";
	root /var/lib/jenkins; # Webroot location for Jenkins service
	index index.php index.html index.htm; # Webroot files to grab first

	# Jenkins Management-Access
	location / {
		include "/etc/nginx/nginx_error_locations.conf";
		include "/etc/nginx/nginx_proxy_pass_headers.conf";
		include "/etc/nginx/conf.ddns/*"; # CIDR - Programmer DDNS
		deny all; # Deny all non-allowed IPs
		proxy_pass http://upstream_jenkins_http;
		proxy_redirect http://127.0.0.1:8080 https://jenkins.centralized.host;
		# add_header 'X-SSH-Endpoint' 'jenkins.centralized.host:50022' always; # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651
	}

	# Github Web-Hook Trigger (Jenkins-Job)
	#        ~ [case-sensitive regex]
	location ~ ^/(generic-webhook-trigger/invoke|safeRestart) {
		access_log "/var/log/nginx/webhook.log" thin;
		include "/etc/nginx/nginx_error_locations.conf";
		include "/etc/nginx/conf.vendor/github.webhooks.conf"; # CIDR - Github
		include "/etc/nginx/conf.vendor/uptime_robot.conf"; # CIDR - Uptime-Robot
		include "/etc/nginx/conf.ddns/*"; # CIDR - Programmer DDNS
		deny all; # Deny all non-allowed IPs
		proxy_pass http://upstream_jenkins_http;
		proxy_redirect http://127.0.0.1:8080 https://jenkins.centralized.host;
		include "/etc/nginx/nginx_proxy_pass_headers.conf";
	}

	location /branding {
		include "/etc/nginx/nginx_error_locations.conf";
		try_files $uri =404;
	}

	#        ~* [case-insensitive regex]
	location ~* ^/(safe)?restart {
		return 302 https://$host/safeRestart;
	}
	if ($scheme != "https") { return 301 https://$host$request_uri; }
	include "/etc/nginx/nginx_error_locations.conf";
}

# ------------------------------------------------------------
### Create LetsEncrypt Certs
#
# DN="centralized.host"; certbot --nginx -d ${DN} -d jenkins.${DN} -d www.${DN};
#
# ------------------------------------------------------------
### Enable nginx host
#
# DN="centralized.host"; NG="/etc/nginx/sites-available/${DN}.nginx"; echo "" > ${NG}; vi ${NG}; ln -sf ${NG} /etc/nginx/sites-enabled/${DN}; reload_nginx;
#
# ------------------------------------------------------------
###	Debug -> ensure nginx is routing as-intended
#
# http://centralized.host
# http://jenkins.centralized.host
# http://www.centralized.host
#
# https://centralized.host
# https://jenkins.centralized.host
# https://www.centralized.host
#
# ------------------------------------------------------------
### Remove Domain & Cert
###   |--> Deletes NGINX Files & Symlinks
###   |--> Deletes LetsEncrypt Files
###   |--> Revokes Certificate thru LetsEncrypt (Invalidates the certificate on the Certificate-Authority's end)
#
# FQDN="centralized.host"; certbot revoke --cert-path "/etc/letsencrypt/live/${FQDN}/fullchain.pem"; certbot delete --cert-name "${FQDN}"; find "/etc/letsencrypt/" -name "*${FQDN}*"; unlink "/etc/nginx/sites-enabled/${FQDN}";
#
# ------------------------------------------------------------