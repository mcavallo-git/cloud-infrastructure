#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/add_user" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:


curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/add_user?t=$(date +'%s.%N')" | env USER_NAME="example_user" USER_GNAME="example_user" USER_UID="1200" USER_GID="1200" ADD_USER_TO_SUDOERS="1" SUDO_REQUIRES_PASS="0" SET_USER_PASSWORD="1" bash;  # Call this script with env var arguments


# if [ -d "/usr/local/sbin" ]; then mkdir -p "/usr/local/sbin"; fi; curl -H 'Cache-Control: no-cache' -o "/usr/local/sbin/add_user" -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/add_user"; chmod 0755 "/usr/local/sbin/add_user"; \
# env USER_NAME="example_user" USER_GNAME="example_user" USER_UID="1200" USER_GID="1200" ADD_USER_TO_SUDOERS="1" SUDO_REQUIRES_PASS="0" SET_USER_PASSWORD="1" "/usr/local/sbin/add_user";


fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/add_user_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/add_user"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;

else

  set -e; # Exit immediately if a command exits with a non-zero status
  # set -x; # Print commands and their arguments as they are executed

  # If no username given, ask terminal user for username
  while [ -z "${USER_NAME}" ]; do
    echo "";
    read -p " Create a user with what username?   " -t 60 <'/dev/tty';
    USER_NAME="${REPLY}";
    if [ -n "${USER_NAME}" ]; then
      break;
    fi;
  done;

  ROLLBACK_IFS="${IFS}"; IFS=' '; # Set the global for-loop delimiter

  # USER_NAME="...";
  # USER_UID="${USER_UID:-NEXT_AVAILABLE_ID}";
  USER_GNAME="${USER_GNAME:-${USER_NAME}}";
  # USER_GID="${USER_GID:-NEXT_AVAILABLE_ID}";
  USER_SHELL="${USER_SHELL:-/bin/bash}";

  # User Directory-Info
  DIR_USER_HOME="${DIR_USER_HOME:-/home/${USER_NAME}}";
  DIR_USER_SSH="${DIR_USER_SSH:-${DIR_USER_HOME}/.ssh}";
  
  CREATE_HOME="${CREATE_HOME:-1}";
  CREATE_HOME_SSH="${CREATE_HOME_SSH:-1}";

  # Options - Password
  SET_USER_PASSWORD="${SET_USER_PASSWORD:-0}";

  # Set the user as a System User (uses useradd's --system arg)
  SET_SYSTEM_USER=${SET_SYSTEM_USER:-0};

  # Options - Sudo
  ADD_USER_TO_SUDOERS="${ADD_USER_TO_SUDOERS:-0}";
  SUDO_REQUIRES_PASS="${SUDO_REQUIRES_PASS:-1}";

  # ------------------------------------------------------------
  #    Values below are based off of the above values
  # ------------------------------------------------------------

  if [ -z "${USER_NAME}" ]; then
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error:  \$USER_NAME is empty/unset";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Exiting...";
    exit 1;

  elif [ ${SET_SYSTEM_USER} -eq 1 ] && [ -v USER_UID ]; then
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error:  Invalid argument combination: [ User ID ] & [ System User ]";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Info:  Best practice dictates that the system should allocate User IDs for System users";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Exiting...";
    exit 1;

  elif [ ${SET_SYSTEM_USER} -eq 1 ] && [ -v USER_GID ]; then
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error:  Invalid argument combination: [ Group ID ] & [ System User ]";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Info:  Best practice dictates that the system should allocate Group IDs for System users";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Exiting...";
    exit 1;

  elif [[ -v USER_NAME ]] \
      && [[ -v USER_UID ]] \
      && [[ "${USER_UID}" =~ ^-?[0-9]+$ ]] \
      && [ "$(id -u ${USER_UID} 1>'/dev/null' 2>&1; echo $?;)" == "0" ] \
      && [ "$(id -un ${USER_UID})" != "${USER_NAME}" ]; then
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error:  User ID \"${USER_UID}\" is already taken by user \"$(id -un ${USER_UID})\"";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Exiting...";
    exit 1;

  elif [[ -v USER_GNAME ]] \
      && [[ -v USER_GID ]] \
      && [[ "${USER_GID}" =~ ^-?[0-9]+$ ]] \
      && [ $(getent group ${USER_GID} 1>'/dev/null' 2>&1; echo $?;) -eq 0 ] \
      && [ "$(getent group ${USER_GID} | cut -d: -f1;)" != "${USER_GNAME}" ]; then
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error:  Group-ID \"${USER_GID}\" resolved to Group Name \"$(id -gn ${USER_GID})\", which is NOT equal to the declared Group-Name value of \"${USER_GNAME}\"";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Exiting...";
    exit 1;

  elif [ "${CREATE_HOME}" == "1" ] && [ -d "${DIR_USER_HOME}" ]; then

    echo "Home Directory already exists: \"${DIR_USER_HOME}\".";
    echo "If you still want to use this directory, set \$CREATE_HOME to \"0\" and re-run this script.";
    exit 1;

  else

    # ------------------------------------------------------------
    # GROUP-CREATION

    if [ -v SET_SYSTEM_USER ] && [ ${SET_SYSTEM_USER} -ne 1 ]; then
      # Non System Users
      if [[ -v USER_GNAME ]] && [ $(getent group "${USER_GNAME}" 1>'/dev/null' 2>&1; echo $?;) -ne 0 ]; then
        # Group-Add Command
        GROUPADD_ARR=(groupadd);
        # Group-ID
        if [[ -v USER_GID ]] && [[ "${USER_GID}" =~ ^-?[0-9]+$ ]]; then
          GROUPADD_ARR+=(--gid ${USER_GID});
        fi;
        # Group Name
        GROUPADD_ARR+=("${USER_GNAME}");
        # Create the Group
        echo "Calling [ ${GROUPADD_ARR[@]}; ] ..."
        ${GROUPADD_ARR[@]};
        USER_GID=$(getent group "${USER_GNAME}" | cut -d: -f3;);
      fi;
    fi;

    # ------------------------------------------------------------
    # USER-CREATION
    USERADD_ARR=();
    USERADD_ARR+=(useradd);

    # User Home-Directory
    if [[ -v DIR_USER_HOME ]] && [ -n "${DIR_USER_HOME}" ]; then
      USERADD_ARR+=(--home-dir "${DIR_USER_HOME}");
    fi;

    # Create Home-Directory (y/n)
    if [[ -v CREATE_HOME ]] && [ "${CREATE_HOME}" == "1" ]; then
      USERADD_ARR+=(--create-home);
    fi;

    if [ -v SET_SYSTEM_USER ] && [ ${SET_SYSTEM_USER} -eq 1 ]; then
      # System Users
      USERADD_ARR+=(--system);


    else
      # Non System Users
    
      # User ID
      if [[ -v USER_UID ]] && [[ "${USER_UID}" =~ ^-?[0-9]+$ ]]; then
        USERADD_ARR+=(--uid ${USER_UID});
      fi;

      # User Default Group (Group-ID/Group-Name)
      if [[ -v USER_GID ]] && [[ "${USER_GID}" =~ ^-?[0-9]+$ ]]; then
        USERADD_ARR+=(--gid ${USER_GID});
      elif [[ -v USER_GNAME ]] && [[ -n "${USER_GNAME}" ]]; then
        USERADD_ARR+=(--gid "${USER_GNAME}");
      fi;

    fi;

    # User Shell
    if [[ -v USER_SHELL ]] && [ -n "${USER_SHELL}" ]; then
      USERADD_ARR+=(--shell "${USER_SHELL}");
    fi;

    USERADD_ARR+=("${USER_NAME}");

    # Create the User
    echo "Calling [ ${USERADD_ARR[@]}; ] ..."
    ${USERADD_ARR[@]};

    # if [ "${CREATE_HOME_SSH}" == "1" ] && [ ! -d "${DIR_USER_SSH}" ]; then
    #   # Create user's SSH directory "~/.ssh"
    #   mkdir "${DIR_USER_SSH}";
    #   chmod 0700 "${DIR_USER_SSH}";
    #   chown "${USER_UID}" "${DIR_USER_SSH}";
    # fi;

    # Make user a sudoer (able to run as root using 'sudo' command)
    if [ "${ADD_USER_TO_SUDOERS}" == "1" ]; then

      # Add user to the "sudo" usergroup (if not already in it)
      SUDO_GROUP="sudo";
      if [ -f "/usr/local/sbin/is_user_in_group" ] && [ $(/usr/local/sbin/is_user_in_group "${USER_NAME}" "${SUDO_GROUP}"; ERROR_LEVEL=$?; echo ${ERROR_LEVEL};) -ne 0 ]; then
        usermod --append --groups "${SUDO_GROUP}" "${USER_NAME}";
      fi;

      # Add user-named-file into the sudoer.d directory to strengthen logins (and get away from typed passwords)
      SUDOER_FILEPATH="/etc/sudoers.d/${USER_NAME}";
      if [ "${SUDO_REQUIRES_PASS}" == "0" ]; then
        # Choice 1/2: No password required for user to run 'sudo' commands
        echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" > "${SUDOER_FILEPATH}";
        chmod 440 "${SUDOER_FILEPATH}";
      else
        # Choice 2/2: Require a password when user runs 'sudo' commands
        echo "${USER_NAME} ALL=(ALL) ALL" > "${SUDOER_FILEPATH}";
        chmod 440 "${SUDOER_FILEPATH}";
      fi;

      # Refer to "/etc/ssh/sshd_config" for more-advanced SSH config

    fi;


    if [ "${SET_USER_PASSWORD}" != "0" ]; then
      passwd "${USER_NAME}";
      #       [Enter password] > ENTER
      #     [Confirm password] > ENTER
    fi;

    echo -e "\n ==---  New User Stats  ---===";
    echo -e "\n > User-Name:        \"${USER_NAME}\" (uid=$(id -u ${USER_NAME};))";
    echo -e "\n > User-Home:      \"$(getent passwd ${USER_NAME} | cut --delimiter=: --fields=6;)\"";
    echo -e "\n > Default-Group:    \"$(id -gn ${USER_NAME};)\" (gid=$(id -g ${USER_NAME};))";
    echo -e "\n > Default-Shell:   \"$(getent passwd ${USER_NAME} | cut --delimiter=: --fields=7;)\"";
    echo -e "\n";

    exit 0;

  fi;

  IFS="${ROLLBACK_IFS}"; # Restore the global for-loop delimiter

fi;
