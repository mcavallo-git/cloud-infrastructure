#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_apt_packages" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_apt_packages_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_apt_packages"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------

  # Parse any non-empty inline-arguments passed to this function
  ARGS=("$@");
  ARGS_COUNT=${#ARGS[@]};
  for (( i=0;i<ARGS_COUNT;i++ )); do
    EACH_ARG=${ARGS[${i}]};
    if [[ -n "${EACH_ARG}" ]]; then
      if [[ "${EACH_ARG}" == "--optional" ]]; then
        INSTALL_OPTIONAL_PACKAGES="true";
      fi;
    fi;
  done;

  # ------------------------------------------------------------
  #
  # Default packages
  #
  unset APT_PACKAGES_ARR; declare -a APT_PACKAGES_ARR; # [Re-]Instantiate bash array
  APT_PACKAGES_ARR+=("apt-rdepends");  # Recursive package dependencies
  APT_PACKAGES_ARR+=("apt-transport-https");  # HTTP apt download handler
  APT_PACKAGES_ARR+=("bc");  # Precision calculator language
  APT_PACKAGES_ARR+=("certbot");  # Let's Encrypt Certificates
  # APT_PACKAGES_ARR+=("default-jdk-headless");  # Java JDK
  # APT_PACKAGES_ARR+=("default-jre-headless");  # Java JRE
  APT_PACKAGES_ARR+=("dos2unix");  # CRLF/LF File Converter
  APT_PACKAGES_ARR+=("git");  # Git SCM
  APT_PACKAGES_ARR+=("ifupdown");  # Includes [ ifup, ifdown, ifquery ]
  APT_PACKAGES_ARR+=("multitail");  # Tail multiple files
  # APT_PACKAGES_ARR+=("nginx-full");  # HTTP and reverse proxy server, mail proxy server
  APT_PACKAGES_ARR+=("nmap");  # Network port scanner
  # APT_PACKAGES_ARR+=("python-certbot-nginx");  # NGINX Certbot plugin
  APT_PACKAGES_ARR+=("p7zip-full");  # 7-Zip
  APT_PACKAGES_ARR+=("p7zip-rar");  # 7-Zip
  APT_PACKAGES_ARR+=("resolvconf");  # resolvectl - domain/hostnames/ipv4/ipv6 resolver
  APT_PACKAGES_ARR+=("software-properties-common");  # Includes [ python, python3, ca-certificates ]
  APT_PACKAGES_ARR+=("ufw");  # Netfilter firewall
  APT_PACKAGES_ARR+=("vim-common");  # Programmer's text editor
  APT_PACKAGES_ARR+=("wget");  # Network downloader
  APT_PACKAGES_ARR+=("yui-compressor");  # Javascript/CSS Minifier

  if [[ "${INSTALL_OPTIONAL_PACKAGES}" == "true" ]]; then
    #
    # Optional packages
    #
    APT_PACKAGES_ARR+=("python-pip");  # Python
    APT_PACKAGES_ARR+=("docker");  # Docker
    APT_PACKAGES_ARR+=("docker-compose");  # Docker
    # APT_PACKAGES_ARR+=("jenkins");  # CI/CD
    APT_PACKAGES_ARR+=("mysql-client");  # MySQL
    APT_PACKAGES_ARR+=("mysql-server");  # MySQL
    APT_PACKAGES_ARR+=("mysqldump");  # MySQL
    APT_PACKAGES_ARR+=("sendmail");  # SMTP
    APT_PACKAGES_ARR+=("nodejs");  # Node.JS
    APT_PACKAGES_ARR+=("ws");  # Node.JS Websockets
    APT_PACKAGES_ARR+=("socket.io");  # Node.JS Websockets Assist
    APT_PACKAGES_ARR+=("npm");  # Node.JS
  fi;

  # ------------------------------------------------------------

  UNIQUE_APT_PACKAGES=($(echo "${APT_PACKAGES_ARR[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ';));
  for EACH_PKG in "${UNIQUE_APT_PACKAGES[@]}"; do
    ALREADY_INSTALLED=$(echo "$(apt list --installed 2>'/dev/null';)" | grep -h "^${EACH_PKG}\/" | wc -l);
    if [ "${ALREADY_INSTALLED}" != "0" ]; then
      echo "✓ Package \"${EACH_PKG}\" is already installed";
    else
      echo "× Package \"${EACH_PKG}\" not found locally - installing...";
      if [[ "${EACH_PKG}" == "nginx"* ]]; then
        if [ $(apt policy 2>'/dev/null' | grep "http://ppa.launchpad.net/nginx" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:nginx/stable";
        fi;
      elif [ "${EACH_PKG}" == "certbot" ] || [ "${EACH_PKG}" == "python-certbot-nginx" ]; then
        if [ $(apt policy 2>'/dev/null' | grep "http://ppa.launchpad.net/certbot" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:certbot/certbot";
        fi;
      elif [ "${EACH_PKG}" == "git" ]; then
        if [ $(apt policy 2>'/dev/null' | grep "http://ppa.launchpad.net/git" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:git-core/ppa";
        fi;
      else
        apt-get --yes update;
      fi;
      apt-get --yes install "${EACH_PKG}";
    fi;
  done;

  # ------------------------------------------------------------
fi;
