#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/get_subdomains" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
if [ -n "$2" ] && [[ "$2" == *"log"* ]]; then # log this script's output

LOGDIR="${HOME}/get_subdomains_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/get_subdomains"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;

fi;
#
# ------------------------------------------------------------

if [ -z "${1}" ]; then

  echo -e "\nError in call to \"get_subdomains\"\n  --> Expected syntax:     >  get_subdomains HOSTNAME;\n";
  exit 1;

else

  shopt -s lastpipe; # If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.
            # |
            # |--> e.g. extends scope of variables which get set/updated during "while ...; do" loop to be referenced AFTER said loop is "done;"
            #           (normally, variables set during background tasks are scoped separately, and not able to be referenced afterwards)

  REGEX_IPV4='(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))';
  SED_LINE='s/^(.+),'${REGEX_IPV4}'$/\0/p';
  SED_FQDN='s/^(.+),'${REGEX_IPV4}'$/\1/p';
  SED_IPV4='s/^(.+),'${REGEX_IPV4}'$/\2/p';

  SMOKE_TEST=$(curl -L -s "https://api.hackertarget.com/hostsearch/?q=${1}" | head -n 1;);
  if [ "${SMOKE_TEST}" == "error check your search parameter" ]; then
    echo -e "\nError in call to \"get_subdomains\"\n  -->  Hostname not found:  \"${1}\"\n";
    exit 1;

  else

    INDEX_RESULTS_BY="IPV4";
    if [ -n "${2}" ]; then
      if [ "${2}" == "-fqdn" ] || [ "${2}" == "--fqdn" ]; then
        INDEX_RESULTS_BY="FQDN";
      fi;
    fi;

    # [Re-]Instantiate bash array via unset + declare
    test -v ARR_IPV4_IDX && unset ARR_IPV4_IDX; declare -A ARR_IPV4_IDX;
    test -v ARR_FQDN_IDX && unset ARR_FQDN_IDX; declare -A ARR_FQDN_IDX;

    # Resolved IPv4 addresses for given domain ( as ${1} )
    curl -L -s "https://api.hackertarget.com/hostsearch/?q=${1}" | sort | while read EACH_LINE; do
      EACH_FQDN=$(echo ${EACH_LINE} | cut -d, -f 1;);
      EACH_IPV4=$(echo ${EACH_LINE} | cut -d, -f 2;);
      test -v ARR_IPV4_IDX["${EACH_IPV4}"] && ARR_IPV4_IDX+=(["${EACH_IPV4}"]+=", ");
      test -v ARR_IPV4_IDX["${EACH_FQDN}"] && ARR_IPV4_IDX+=(["${EACH_FQDN}"]+=", ");
      ARR_FQDN_IDX+=(["${EACH_FQDN}"]+="${EACH_IPV4}");
      ARR_IPV4_IDX+=(["${EACH_IPV4}"]+="${EACH_FQDN}");
    done;

    # Sort the table by IPv4 address
    ROLLBACK_IFS="${IFS}"; IFS=$'\n'; # Set the global for-loop delimiter
    if [ "${INDEX_RESULTS_BY}" == "FQDN" ]; then
      # Group & Sort by FQDN
      ARR_SORTED_RESULTS=($(sort <<<"${!ARR_FQDN_IDX[*]}"));
    else
      # Group & Sort by IPv4
      ARR_SORTED_RESULTS=($(sort <<<"${!ARR_IPV4_IDX[*]}"));
    fi;
    IFS="${ROLLBACK_IFS}"; # Restore the global for-loop delimiter

    # Display the results
    echo "";
    echo "   IPv4            | FQDN              ";
    echo "  -----------------|-------------------";
    for EACH_KEY in "${ARR_SORTED_RESULTS[@]}"; do
      # if [ "${INDEX_RESULTS_BY}" == "FQDN" ]; then
      #   EACH_VAL="${ARR_FQDN_IDX[${EACH_KEY}]}";
      # else
        EACH_VAL="${ARR_IPV4_IDX[${EACH_KEY}]}";
      # fi;
      EACH_KEY_RPAD="${EACH_KEY}$(printf %15s;)";
      EACH_KEY_RPAD="${EACH_KEY_RPAD:0:15}";
      echo "   ${EACH_KEY_RPAD} | ${EACH_VAL}";
      echo "                   | ";
    done;
    echo "";

    exit 0;

  fi;

fi;

# ------------------------------------------------------------