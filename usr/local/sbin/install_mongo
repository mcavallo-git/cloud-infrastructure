#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_mongo" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_mongod?t=$(date +'%s.%N')" | bash;

fi;
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  # Install package repo & download/install package
  if [ $(which mongo 2>'/dev/null' | wc -l;) -gt 0 ]; then
    echo "";
    echo "Info: Command \"mongo\" already exists at path \"$(which mongo)\"";
    echo "  |--> Skipping package install";

  else
    echo "";
    echo "Info: Command \"mongo\" not found";
    echo "  |--> Installing pre-required packages, then adding \"mongodb-org\" parent-repo & installing service-package...";

    # Debian distros
    if [ $(which apt 2>'/dev/null' | wc -l;) -gt 0 ]; then
      if [ "$(which gnupg 2>'/dev/null'; echo $?;)" != "1" ]; then
        apt-get -y update; apt-get -y install "gnupg";
      fi;
      if [ "$(which tee 2>'/dev/null'; echo $?;)" != "1" ]; then
        apt-get -y update; apt-get -y install "tee";
      fi;
      wget -qO - "https://www.mongodb.org/static/pgp/server-4.2.asc" | apt-key add -;
      echo "deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main" | tee "/etc/apt/sources.list.d/mongodb-org-4.2.list";
      apt-get -y update; apt-get -y install "mongodb-org";
    fi;

    # CentOS / RHEL distros
    if [ $(which yum 2>'/dev/null' | wc -l;) -gt 0 ]; then
      echo -e "[mongodb-org-4.2]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\$releasever/mongodb-org/4.2/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc\n" > "/etc/yum.repos.d/mongodb-org-4.2.repo"; yum check-update; yum install -y mongodb-org;
    fi;

  fi;


  # ------------------------------------------------------------
  MONGO_USER_ROW=$(echo "$(id mongod 2>'/dev/null' || id mongodb 2>'/dev/null';)" | awk '{print $1}');
  MONGO_UID=$(echo "${MONGO_USER_ROW}" | sed -rne 's/^uid=([0-9]+)\(.+\)$/\1/p';);
  MONGO_UNAME=$(id -un "${MONGO_UID}");
  MONGO_GNAME=$(id -gn "${MONGO_UNAME}");

  if [ -n "$(id ${MONGO_UNAME} 2>'/dev/null';)" ]; then

    # Setup MongoDB directories
    mkdir -p "/var/lib/mongo";
    chown -R "${MONGO_UNAME}:${MONGO_GNAME}" "/var/lib/mongo";
    chmod 0755 "/var/lib/mongo";
    mkdir -p "/var/lib/mongodb";
    chown -R "${MONGO_UNAME}:${MONGO_GNAME}" "/var/lib/mongodb";
    chmod 0755 "/var/lib/mongodb";
    SERVICE_NAME="mongod";
    /usr/sbin/service "${SERVICE_NAME}" start;

    # ------------------------------------------------------------
    # Setup Bind-IP as [ Loopback-IPv4,LAN-IPv4 ] instead of just the [ Loopback-IPv4 ]
    # THIS_BIND_TARGET=$(ip addr show | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.');
    THIS_BIND_TARGET="$(hostname)";
    if [ -n "$(cat '/etc/mongod.conf' | grep '  bindIp: 127.0.0.1';)" ]; then
      sed --in-place=".$(date +'%Y-%m-%d_%H-%M-%S').bak" -e "/^  bindIp: 127.0.0.1/c\  bindIp: 127.0.0.1,${THIS_BIND_TARGET}  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting." "/etc/mongod.conf";
      cat "/etc/mongod.conf";
      SERVICE_NAME="mongod";
      /usr/sbin/service "${SERVICE_NAME}" restart;
    fi;

    # ------------------------------------------------------------
    # Setup access security
    echo ""; read -p "Enter Filepath for mongod keyFile:  " -t 60 -r; echo "";
    if [ -z "${REPLY}" ]; then
      echo "Info: Skipping mongod security setup (empty input received for keyFile)";
    else
      NEW_KEYFILE="${REPLY}";
      if [ ! -f "${NEW_KEYFILE}" ]; then
        echo "Warning - file not found: \"${NEW_KEYFILE}\""; read -p "Create a randomly-generated Keyfile, now? (y/n)  " -n 1 -t 60 -r; echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          openssl rand -base64 741 > "${NEW_KEYFILE}";
        fi;
      fi;
      CURRENT_KEYFILE="$(cat /etc/mongod.conf | grep keyFile | awk '{print $2}')";
      if [ -z "${CURRENT_KEYFILE}" ]; then
        sed --in-place=".$(date +'%Y-%m-%d_%H-%M-%S').bak" -e '
/^#security:/ {
a\
  keyFile: '${NEW_KEYFILE}'
a\
  authorization: enabled
c\
security:
}' "/etc/mongod.conf";
        cat "/etc/mongod.conf";
        SERVICE_NAME="mongod";
        /usr/sbin/service "${SERVICE_NAME}" restart;
      elif [ "${CURRENT_KEYFILE}" != "${NEW_KEYFILE}" ]; then
        if [ ! -f "${NEW_KEYFILE}" ]; then
          echo "Error:  keyFile not found at path \"${CURRENT_KEYFILE}\"";
          echo "  |--> Please setup keyfile then re-run this script";
          echo "";
          echo "Info:  keyFile will remain unchanged at path \"${CURRENT_KEYFILE}\"";
        else
          echo "Warning:  keyFile currently set to path \"${CURRENT_KEYFILE}\"";
          read -p "Update keyFile to reference \"${NEW_KEYFILE}\", instead? (y/n)  " -n 1 -t 60 -r; echo "";
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            sed --in-place=".$(date +'%Y-%m-%d_%H-%M-%S').bak" -e "/^  keyFile:/c\  keyFile: ${NEW_KEYFILE}" "/etc/mongod.conf";
            cat "/etc/mongod.conf";
            SERVICE_NAME="mongod";
            /usr/sbin/service "${SERVICE_NAME}" restart;
          fi;
        fi;
      else
        echo "Info:  keyFile already set to path \"${CURRENT_KEYFILE}\" in \"/etc/mongod.conf\"";
        echo "  |--> No action required (already up to date)";
      fi;
    fi;

    FINAL_KEYFILE="$(cat /etc/mongod.conf | grep keyFile | awk '{print $2}')";
    if [ -f "${FINAL_KEYFILE}" ]; then
      chown "${MONGO_UNAME}:${MONGO_GNAME}" "${FINAL_KEYFILE}";
      chmod 0400 "${FINAL_KEYFILE}";
    fi;

    # ------------------------------------------------------------
    # Setup replication
# 		CURRENT_REPL_SET_NAME="$(cat /etc/mongod.conf | grep replSetName | awk '{print $2}')";
# 		CURRENT_REPL_DISABLED="$(cat /etc/mongod.conf | grep '#replication:')";
# 		if [ -z "${CURRENT_REPL_SET_NAME}" ] && [ -n "${CURRENT_REPL_DISABLED}" ]; then
# 			echo ""; read -p "Enable replication for mongod? (y/n)  " -n 1 -t 60 -r; echo "";
# 			if [[ $REPLY =~ ^[Yy]$ ]]; then
#         echo ""; read -p "Enter the name of the replication set to join:  " -t 60 -r; echo "";
#         if [ -n "${REPLY}" ]; then
#           NEW_REPL_SET_NAME="${REPLY}";
#           sed --in-place=".$(date +'%Y-%m-%d_%H-%M-%S').bak" -e '
# /^#replication:/ {
# a\
#   replSetName: '${NEW_REPL_SET_NAME}'
# c\
# replication:
# }' "/etc/mongod.conf";
#           cat "/etc/mongod.conf";
#           service mongod restart;
#         fi;
# 			fi;
# 		fi;


  # ------------------------------------------------------------
  # Removing/Downgrading MongoDB
  if [ 0 -eq 1 ]; then
    yum -y remove mongodb-org;
    yum -y remove mongodb-org-shell;
    yum -y remove mongodb-org-tools;
    yum -y remove mongodb-org-mongos;
    yum -y remove mongodb-org-server;
  fi;

  # ------------------------------------------------------------


  fi;
fi;



# ------------------------------------------------------------
# Citation(s)
#
#   docs.mongodb.com  |  "Upgrade a Replica Set to 3.6"  |  https://docs.mongodb.com/v4.0/release-notes/3.6-upgrade-replica-set/
#
#   docs.mongodb.com  |  "Upgrade a Replica Set to 4.0"  |  https://docs.mongodb.com/manual/release-notes/4.0-upgrade-replica-set/
#
#   docs.mongodb.com  |  "Upgrade a Replica Set to 4.2"  |  https://docs.mongodb.com/manual/release-notes/4.2-upgrade-replica-set/
#
#   docs.mongodb.com  |  "Install MongoDB Community Edition on Debian"  |  https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/
#
#   docs.mongodb.com  |  "Install MongoDB Community Edition on Red Hat or CentOS"  |  https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/
#
#   docs.mongodb.com  |  "Install MongoDB Community Edition on Ubuntu"  |  https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
#
#   docs.mongodb.com  |  "Deploy a Replica Set"  |  https://docs.mongodb.com/manual/tutorial/deploy-replica-set/
#
#   docs.mongodb.com  |  "rs.reconfig()"  |  https://docs.mongodb.com/manual/reference/method/rs.reconfig/
#
# ------------------------------------------------------------