#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_jenkins" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
# Sync 1-Liner
#
if [ 0 -eq 1 ]; then

wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_jenkins" -O "/usr/local/sbin/install_jenkins" -q && chmod 0755 "/usr/local/sbin/install_jenkins" && /usr/local/sbin/install_jenkins;

sleep 20; curl -ssL cava.lol | bash; install_jenkins --force;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	#
	# Docker-based installs:
	#	"/usr/local/bin/create_docker_jenkins"
	#  |--> docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean
	#  |--> docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins:alpine
	#
	# ------------------------------------------------------------
	#
	# Instantiate runtime variables

	BENCHMARK_START=$(date +'%s.%N');

	SERVICE_NAME="jenkins";

	EXIT_CODE=1;
	
	SERVICE_RESTART_REQD=0;

	APT_PKG_JDK="default-jdk-headless";
	APT_PKG_JRE="default-jre-headless";
	APT_PKG_JENKINS="jenkins";

	START_SECONDS_NANOSECONDS=$(date +'%s.%N');
	START_EPOCHSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1);
	# START_NANOSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
	# START_MICROSECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-6);
	# START_MILLISECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-3);
	START_DATETIME="$(date --date=@${START_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S')";
	START_TIMESTAMP="$(date --date=@${START_EPOCHSECONDS} +'%Y%m%d_%H%M%S')";

	# ------------------------------------------------------------
	# Parse inline arguments (passed to current script)

	ARGS=("$@");
	ARGS_COUNT=${#ARGS[@]};

	ARGS_FORCE_AGREE=0;
	
	# Walk through any inline-arguments passed to this function
	for (( i=0;i<$ARGS_COUNT;i++ )); do

		EACH_ARG=${ARGS[${i}]};

		# Check if this is the last inline-argument or if there are more to follow
		if [ $((${i}+1)) -eq ${ARGS_COUNT} ]; then # if this is the last argument
			NEXT_ARG="";
		else
			NEXT_ARG=${ARGS[$((${i}+1))]};
			if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
				NEXT_ARG="";
			fi;
		fi;

		if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

			if [ "${EACH_ARG}" == "-y" ] || [ "${EACH_ARG}" == "--yes" ] || [ "${EACH_ARG}" == "--force" ]; then
				ARGS_FORCE_AGREE=1; # Do not require user-confirmation for things like opening firewall ports required by the install service(s)
			fi;

		fi;

	done;

	if [ ${ARGS_FORCE_AGREE} -eq 0 ]; then
		echo "------------------------------------------------------------";
		echo "";
		echo "Info:  This will install the Jenkins service and open firewall port 8080 (outgoing)";
		echo "";
		READ_TIMEOUT=60; read -p "Continue? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
		echo "";
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo -e "Response timed out after ${READ_TIMEOUT}s";
			exit 1;
		elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			echo -e "\n""Proceeding...\n";
			sleep 1;
		else
			echo "Denied - Skipping the \"${SERVICE_NAME}\" service install";
			exit 1;
		fi;
	fi;

	# ------------------------------------------------------------
	# Check for the Jenkins service locally
	# SERVICE_RET_CODE=$(/usr/sbin/service "${SERVICE_NAME}" status --no-pager --full 1>'/dev/null' 2>&1; echo $?;);
	# if [ ${SERVICE_RET_CODE} -eq 0 ]; then
	# 	# Jenkins is already installed
	# 	echo -e "\n""Info:  Skipping Jenkins package-install (service already exists locally)";
	# else

	# ------------------------------------------------------------
	if [ $(which apt-get 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then # Debian, Ubuntu, etc.

		# ------------------------------------------------------------
		# Install Java
		wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_java" -O "/usr/local/sbin/install_java" -q;
		chmod 0755 "/usr/local/sbin/install_java";
		/usr/local/sbin/install_java;


		# ------------------------------------------------------------
		# Install Fonts (Requirement for Jenkins)
		PACKAGE_APT="ttf-dejavu"; apt-get -y update; apt-get -y install "${PACKAGE_APT}"; # Install Fonts
		PACKAGE_APT="xvfb"; apt-get -y update; apt-get -y install "${PACKAGE_APT}"; # Install Fonts


		# ------------------------------------------------------------
		# Install Jenkins
		wget -q -O - "https://pkg.jenkins.io/debian-stable/jenkins.io.key" | sudo apt-key add -; # Import Jenkins' official GPG Key
		deb "https://pkg.jenkins.io/debian-stable" binary/; # Add Jenkins' package repository
		PACKAGE_APT="jenkins"; apt-get -y update; apt-get -y install "${PACKAGE_APT}"; # Install Jenkins


	elif [ $(which yum 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then # Fedora, Oracle Linux, Red Hat Enterprise Linux, etc.

		# ------------------------------------------------------------
		# Install Java
		wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_java" -O "/usr/local/sbin/install_java" -q;
		chmod 0755 "/usr/local/sbin/install_java";
		/usr/local/sbin/install_java;


		# ------------------------------------------------------------
		# Install Fonts (Requirement for Jenkins)
		PACKAGE_YUM="dejavu-sans-fonts";
		if [ $(yum list installed | sed -rne "s/^(${PACKAGE_YUM})\.(x86_64|noarch)\s+.+$/\1/p" | wc -l;) -eq 0 ]; then
			yum -y check-update;
			yum -y install "${PACKAGE_YUM}";
		fi;
		PACKAGE_YUM="fontconfig";
		if [ $(yum list installed | sed -rne "s/^(${PACKAGE_YUM})\.(x86_64|noarch)\s+.+$/\1/p" | wc -l;) -eq 0 ]; then
			yum -y check-update;
			yum -y install "${PACKAGE_YUM}";
		fi;
		PACKAGE_YUM="xorg-x11-server-Xvfb";
		if [ $(yum list installed | sed -rne "s/^(${PACKAGE_YUM})\.(x86_64|noarch)\s+.+$/\1/p" | wc -l;) -eq 0 ]; then
			yum -y check-update;
			yum -y install "${PACKAGE_YUM}";
		fi;

		# ------------------------------------------------------------
		# Install Jenkins
		PACKAGE_YUM="jenkins";
		if [ $(yum list installed | sed -rne "s/^(${PACKAGE_YUM})\.(x86_64|noarch)\s+.+$/\1/p" | wc -l;) -eq 0 ]; then
			wget -O "/etc/yum.repos.d/jenkins.repo" "https://pkg.jenkins.io/redhat-stable/jenkins.repo";  # Add Jenkins' package repository
			rpm --import "https://pkg.jenkins.io/redhat-stable/jenkins.io.key" 2>'/dev/null'; # Import Jenkins' official GPG Key
			yum -y check-update; yum -y install "${PACKAGE_YUM}"; # Install Jenkins
		fi;

	fi;

	# ------------------------------------------------------------
	# Kick-off the Jenkins service
	#
	service "${SERVICE_NAME}" start;


	# ------------------------------------------------------------
	SERVICE_RET_CODE=$(/usr/sbin/service "${SERVICE_NAME}" status --no-pager --full 1>'/dev/null' 2>&1; echo $?;);
	if [ ${SERVICE_RET_CODE} -eq 0 ]; then
		EXIT_CODE=0;

		# Show Jenkins' service status
		echo -e "\n""Info:  Showing Jenkins' Service-Status";
		echo -e "  |--> Calling  [ /usr/sbin/service "${SERVICE_NAME}" status --no-pager --full; ]  ...""\n";
		/usr/sbin/service "${SERVICE_NAME}" status --no-pager --full;

		# Show Jenkins' networking ports
		echo -e "\n""Info:  Showing Jenkins' Ports which are in-use";
		echo -e "  |--> Calling  [ ps aux | grep -v 'grep' | grep 'jenkins' | grep -v 'color=auto' | grep 'httpPort'; ]  ...""\n";
		ps aux | grep -v 'grep' | grep 'jenkins' | grep -v 'color=auto' | grep 'httpPort';
		echo "";

		FIREWALL_SERVICE="firewalld";
		SERVICE_RET_CODE=$(/usr/sbin/service "${FIREWALL_SERVICE}" status --no-pager --full 1>'/dev/null' 2>&1; echo $?;);
		if [ ${SERVICE_RET_CODE} -eq 0 ]; then
			# Open necessary firewall port(s)
			SERVICE_ENABLED_GREP=$(/usr/sbin/service "${FIREWALL_SERVICE}" status --no-pager --full | grep '; enabled');
			if [ -n "${SERVICE_ENABLED_GREP}" ]; then
				echo "";
				echo "------------------------------------------------------------";
				firewall-cmd --info-service="${SERVICE_NAME}";
				echo "------------------------------------------------------------";
				echo -e "\n""Info:  Opening ports for \"${SERVICE_NAME}\" service in \"${FIREWALL_SERVICE}\" service...\n";
				firewall-cmd --set-default-zone=public;
				firewall-cmd --permanent --zone=public --add-service="${SERVICE_NAME}";
				firewall-cmd --reload;
				firewall-cmd --list-all;
			fi;
		fi;

	else
		EXIT_CODE=1;
		# Jenkins Service STILL not detected after install-attempt
		echo -e "\n""Error:  Jenkins service not detected after install attempt";

	fi;


	# ------------------------------------------------------------
	# Sync jenkins-config to cloud-infrastructure repo (require user confirmation)
	JENKINS_CONFIG_PATH="";
	if [ -f "/etc/default/jenkins" ]; then
		JENKINS_CONFIG_PATH="/etc/default/jenkins";
	elif [ -f "/etc/sysconfig/jenkins" ]; then
		JENKINS_CONFIG_PATH="/etc/sysconfig/jenkins";
	fi;

	if [ -n "${JENKINS_CONFIG_PATH}" ]; then
		if [ ${ARGS_FORCE_AGREE} -eq 0]; then
			# Not Forced
			echo "";
			READ_TIMEOUT=60; read -p "Sync Jenkins config-file \"${JENKINS_CONFIG_PATH}\" to \"cloud-infrastructure\" repo, now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
			echo "";
		else
			# Forced (Skipped)
			RETURN_CODE_READ=0;
			REPLY="y";
		fi;
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo -e "Response timed out after ${READ_TIMEOUT}s";
		elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			CLOUD_SYNC_URL="https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/etc/default/jenkins";
			echo -e "\n""Info:  Downloading & Syncing Jenkins config from \"cloud-infrastructure\" repository";
			echo -e "  |--> Backing-up existing Jenkins config-file to \"${JENKINS_CONFIG_PATH}.${START_TIMESTAMP}.bak\"""\n";
			mv "${JENKINS_CONFIG_PATH}" "${JENKINS_CONFIG_PATH}.${START_TIMESTAMP}.bak";
			wget "${CLOUD_SYNC_URL}" -O "${JENKINS_CONFIG_PATH}" -q;
			chmod 0644 "${JENKINS_CONFIG_PATH}";
		else
			echo "Denied - Skipping Jenkins config-file sync";
		fi;
	fi;

	# Restart the service
	/usr/sbin/service "${SERVICE_NAME}" restart;

	/usr/sbin/service "${SERVICE_NAME}" status;

	BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
	echo "Info: Job finished after ${BENCHMARK_DELTA}s";


	# Find the default admin password for the user (so they don't have to go digging through a logfile for it)
	LOGFILE_JENKINS="/var/log/jenkins/jenkins.log"; \
	JENKINS_LOG_SETUP_FIRST_LINE=$(cat -n "${LOGFILE_JENKINS}" | grep '\*\*\*\*\*\*\*\*\*\*' | awk '{print $1}' | head -n 1;); \
	JENKINS_LOG_SETUP_LAST_LINE=$(cat -n "${LOGFILE_JENKINS}" | grep '\*\*\*\*\*\*\*\*\*\*' | awk '{print $1}' | tail -n 1;); \
	sed -n "${JENKINS_LOG_SETUP_FIRST_LINE},${JENKINS_LOG_SETUP_LAST_LINE}p" "${LOGFILE_JENKINS}";


	# Display the IPv4 of this server as a suggestion to help the user to get logged into Jenkins
	if [ -f "$(which get_lan_ipv4)" ]; then
		echo "";
		echo "";
		echo "------------------------------------------------------------";
		echo "";
		echo "   To begin using Jenkins, open a web browser to the URL:   ";
		echo "";
		echo "                http://$(get_lan_ipv4):8080                 ";
		echo "";
		echo "------------------------------------------------------------";
		echo "";
		echo "";
	fi;

	sleep 60;

	exit ${EXIT_CODE};

fi;

# ------------------------------------------------------------
# Citation(s)
#
#   digitalocean.com  |  "How To Install Jenkins on Ubuntu 16.04"  |  https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04
#
#   docs.oracle.com  |  "java.awt (SE-8) - Class Font"  |  https://docs.oracle.com/javase/8/docs/api/java/awt/Font.html
#
#   docs.oracle.com  |  "Font Configuration Files"  |  https://docs.oracle.com/javase/8/docs/technotes/guides/intl/fontconfig.html
#
#   hub.docker.com  |  "docker hub - Jenkins Continuous Integration and Delivery server"  |  https://hub.docker.com/r/jenkins/jenkins
#
#   pkg.jenkins.io  |  "Jenkins Debian packages"  |  https://pkg.jenkins.io/debian-stable/
#
#   pkg.jenkins.io  |  "RedHat Linux RPM packages for Jenkins"  |  https://pkg.jenkins.io/redhat-stable/
#
#   wiki.jenkins.io  |  "Jenkins got java.awt.headless problem"  |  https://wiki.jenkins.io/display/JENKINS/Jenkins+got+java.awt.headless+problem
#
# ------------------------------------------------------------