#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/stress_test" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/stress_test?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------

# STRESS_TESTER="stress";
STRESS_TESTER="stress";

# ------------------------------

# Ensure "stress" (Linux package) is installed - Install if missing
if [[ -z "$(command -v stress 2>'/dev/null';)" ]]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ apt-get -y update; apt-get -y install stress; ]...";
  apt-get -y update; apt-get -y install stress;
fi;

# Ensure "stress-ng" (Linux package) is installed - Install if missing
if [[ -z "$(command -v stress-ng 2>'/dev/null';)" ]]; then
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ apt-get -y update; apt-get -y install stress-ng; ]...";
  apt-get -y update; apt-get -y install stress-ng;
fi;

# ------------------------------

HARDWARE_CPU_THREADS="$(stress-ng --cpu 0 --cpu-method all --dry-run 2>&1 | sed -rne "s/^.+dispatching hogs: ([0-9]{1,}) cpu\s*$/\1/pi";)";

STRESS_CPU_THREADS="${STRESS_CPU_THREADS:-$(( ${HARDWARE_CPU_THREADS} * 4 ))}";

STRESS_IO_THREADS="${STRESS_IO_THREADS:-$(( ${HARDWARE_CPU_THREADS} * 2 ))}";

STRESS_MEMORY_THREADS="${STRESS_MEMORY_THREADS:-1}";

STRESS_MEMORY_THREAD_BYTES="${STRESS_MEMORY_THREAD_BYTES:-128MB}";

STRESS_TIMEOUT="${STRESS_TIMEOUT:-3600}";

# ------------------------------

if [[ "${STRESS_TESTER}" == "stress" ]]; then

  # Instantiate runtime variables
  EVAL_COMMAND="";
  EVAL_COMMAND+="stress ";
  EVAL_COMMAND+="--cpu ${STRESS_CPU_THREADS} ";
  EVAL_COMMAND+="--io ${STRESS_IO_THREADS} ";
  EVAL_COMMAND+="--vm ${STRESS_MEMORY_THREADS} ";
  EVAL_COMMAND+="--vm-bytes ${STRESS_MEMORY_THREAD_BYTES} ";
  EVAL_COMMAND+="--timeout ${STRESS_TIMEOUT} ";
  EVAL_COMMAND+=";";

  # Run the stress test
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ ${EVAL_COMMAND} ]...";
  eval "${EVAL_COMMAND}"; EXIT_CODE=${?};

# ------------------------------

elif [[ "${STRESS_TESTER}" == "stress-ng" ]]; then

  # Instantiate runtime variables
  EVAL_COMMAND="";
  EVAL_COMMAND+="stress-ng ";
  EVAL_COMMAND+="--cpu ${STRESS_CPU_THREADS} ";
  EVAL_COMMAND+="--timeout ${STRESS_TIMEOUT} ";
  EVAL_COMMAND+="--metrics ";
  EVAL_COMMAND+=";";

  # Run the stress test
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ ${EVAL_COMMAND} ]...";
  eval "${EVAL_COMMAND}"; EXIT_CODE=${?};


# ------------------------------

else

  # Invalid stress test application selected
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Invalid value set in environment variable \${STRESS_TESTER}: \"${STRESS_TESTER}\" (must be either \"stress\" or \"stress-ng\")";
  EXIT_CODE=1;

fi;

# ------------------------------

# Exit cleanly
exit ${EXIT_CODE};


# ------------------------------
#
# Example call(s):  stress
#

if [[ 0 -eq 1 ]]; then

stress --cpu 2 --io 1 --vm 1 --vm-bytes 128M --timeout 10s;

fi;


# ------------------------------
#
# Example call(s):  stress-ng
#

if [[ 0 -eq 1 ]]; then

stress-ng --sequential 4 --timeout 10s --metrics;

stress-ng --all 2 --cpu-ops 10 --metrics-brief;

stress-ng --cpu 0 --cpu-method all --timeout 10s;

stress-ng --cpu 0 --cpu-method all --cpu-ops 100;

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   linustechtips.com  |  "Linux CPU Stress testing and temperature recording - Linux, macOS and Everything Not-Windows - Linus Tech Tips"  |  https://linustechtips.com/main/topic/277966-linux-cpu-stress-testing-and-temperature-recording/?tab=comments#comment-3770257
#
#   www.cyberciti.biz  |  "Stress Test CPU and Memory (VM) On a Linux / Unix With Stress-ng - nixCraft"  |  https://www.cyberciti.biz/faq/stress-test-linux-unix-server-with-stress-ng/
#
# ------------------------------------------------------------