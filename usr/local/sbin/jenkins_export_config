#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/jenkins_export_config" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else

	# ------------------------------------------------------------

	START_TIMESTAMP="$(date +'%Y-%m-%d_%H-%M-%S')";

	USERNAME_JENKINS="jenkins";

	REPO_CREDS="${HOME}/.ssh/jenkins-config.push";

	shopt -s "globstar";

	# Determine user's home-directory location
	if [ -z "${JENKINS_HOME}" ] || [  ! -d "${JENKINS_HOME}" ]; then
		JENKINS_HOME=$(getent passwd "${USERNAME_JENKINS}" | cut --delimiter=: --fields=6);
	fi;

	

	if [ -n "${JENKINS_HOME}" ] && [ -d "${JENKINS_HOME}" ]; then

		# ------------------------------------------------------------
		# Export all 'config.xml' (jenkins-config) files

		GIT_WORK_TREE=$(git_init "${REPO_CREDS}" | grep -e '^/var/lib/git');
		FILEPATH_ARCHIVE_7Z_CONFIG="${GIT_WORK_TREE}/config-exports/${START_TIMESTAMP}/export.7z";
		FILEPATH_ARCHIVE_7Z_FULL="${GIT_WORK_TREE}/full-exports/${START_TIMESTAMP}/export.7z";
		FILEPATH_ARCHIVE_7Z_PLUGINS="${GIT_WORK_TREE}/plugin-exports/${START_TIMESTAMP}/export.7z";

		POINTER_LATEST_7Z_CONFIG="${JENKINS_HOME}/jenkins_export_config.latest.7z";
		POINTER_LATEST_7Z_FULL="${JENKINS_HOME}/jenkins_export_full.latest.7z";
		POINTER_LATEST_7Z_PLUGINS="${JENKINS_HOME}/jenkins_export_plugins.latest.7z";

		if [ -n "${1}" ] && [ "${1}" == "--all" ]; then

			echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') | Compressing Jenkins home-directory \"${JENKINS_HOME}\" to \"${FILEPATH_ARCHIVE_7Z_FULL}\"...\n";

			mkdir -p "$(dirname ${FILEPATH_ARCHIVE_7Z_FULL})" && \
			ln -sf "${FILEPATH_ARCHIVE_7Z_FULL}"* "${POINTER_LATEST_7Z_FULL}" && \
			7z -v49m a "${FILEPATH_ARCHIVE_7Z_FULL}" -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on -spf -spe "${JENKINS_HOME}/" > /dev/null && \
			chmod 0600 "$(dirname ${FILEPATH_ARCHIVE_7Z_FULL})" \
			;

			if [ "$?" == "0" ]; then
				shopt -s "globstar" && \
				source "${REPO_CREDS}" && \
				cd "${GIT_WORK_TREE}" && \
				env \
					GIT_SSH_COMMAND="ssh -i \"${REMOTE_PRIVATE_KEY}\" -o StrictHostKeyChecking=no -F /dev/null" \
					GIT_CURL_VERBOSE="1" \
					GIT_AUTHOR_NAME="${REMOTE_USERNAME}" \
					GIT_COMMITTER_NAME="${REMOTE_USERNAME}" \
					GIT_AUTHOR_EMAIL="${REMOTE_EMAIL}" \
					GIT_COMMITTER_EMAIL="${REMOTE_EMAIL}" \
					EMAIL="${REMOTE_EMAIL}" \
				git add "${GIT_WORK_TREE}/"**/* && \
				git commit -m"${START_TIMESTAMP} | Jenkins Full Config Export/Upload (via script \"$(basename ${0})\" on host \"$(hostname)\")" -a && \
				git push;
			fi;

		else

			# echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') | Calling [ du -sh \"${JENKINS_HOME}/**/config.xml\" ]...\n";
			# du -sh "${JENKINS_HOME}/**/config.xml";

			echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') | Compressing XML config-files located within \"${JENKINS_HOME}\" to \"${FILEPATH_ARCHIVE_7Z_CONFIG}\"...\n";

			cd "$(dirname ${JENKINS_HOME})" && \
			find "$(basename ${JENKINS_HOME})/" \
				-mindepth 1 \
				-maxdepth 1 \
				-name '*.xml' \
				-type f \
				-exec 7z u "${FILEPATH_ARCHIVE_7Z_CONFIG}" -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on -spf -spe '{}' \; ;

			mkdir -p "$(dirname ${FILEPATH_ARCHIVE_7Z_CONFIG})" && \
			ln -sf "${FILEPATH_ARCHIVE_7Z_CONFIG}"* "${POINTER_LATEST_7Z_CONFIG}" && \
			cd "$(dirname ${JENKINS_HOME})" && \
			find "$(basename ${JENKINS_HOME})/" \
				-mindepth 2 \
				-maxdepth 3 \
				-name 'config.xml' \
				-not -path "./config-history/*" \
				-type f \
				-exec 7z u "${FILEPATH_ARCHIVE_7Z_CONFIG}" -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on -spf -spe '{}' \; && \
			chmod 0600 "$(dirname ${FILEPATH_ARCHIVE_7Z_CONFIG})" \
			;
				
			if [ "$?" == "0" ]; then
				shopt -s "globstar" && \
				source "${REPO_CREDS}" && \
				cd "${GIT_WORK_TREE}" && \
				env \
					GIT_SSH_COMMAND="ssh -i \"${REMOTE_PRIVATE_KEY}\" -o StrictHostKeyChecking=no -F /dev/null" \
					GIT_CURL_VERBOSE="1" \
					GIT_AUTHOR_NAME="${REMOTE_USERNAME}" \
					GIT_COMMITTER_NAME="${REMOTE_USERNAME}" \
					GIT_AUTHOR_EMAIL="${REMOTE_EMAIL}" \
					GIT_COMMITTER_EMAIL="${REMOTE_EMAIL}" \
					EMAIL="${REMOTE_EMAIL}" \
				git add "${GIT_WORK_TREE}/"**/* && \
				git commit -m"${START_TIMESTAMP} | Jenkins Config Export/Upload (via script \"$(basename ${0})\" on host \"$(hostname)\")" -a && \
				git push;


			fi;
			# ------------------------------------------------------------
			# Export all files contained in the 'plugins' directory

			echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') | Calling [ du -sh \"${JENKINS_HOME}/plugins/\" ]...\n";
			du -sh "${JENKINS_HOME}/plugins/";

			echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') | Compressing \"$(basename ${JENKINS_HOME})/plugins/\" into \"${FILEPATH_ARCHIVE_7Z_PLUGINS}\" (split into 49-MB incremenets)...\n";
			mkdir -p "$(dirname ${FILEPATH_ARCHIVE_7Z_PLUGINS})" && \
			ln -sf "${FILEPATH_ARCHIVE_7Z_PLUGINS}"* "${POINTER_LATEST_7Z_PLUGINS}" && \
			cd "$(dirname ${JENKINS_HOME})" && \
			7z -v49m a "${FILEPATH_ARCHIVE_7Z_PLUGINS}" -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on -spf -spe "${JENKINS_HOME}/plugins/" && \
			chmod 0600 "$(dirname ${FILEPATH_ARCHIVE_7Z_PLUGINS})" \
			;

			if [ "$?" == "0" ]; then

				shopt -s "globstar" && \
				source "${REPO_CREDS}" && \
				cd "${GIT_WORK_TREE}" && \
				env \
					GIT_SSH_COMMAND="ssh -i \"${REMOTE_PRIVATE_KEY}\" -o StrictHostKeyChecking=no -F /dev/null" \
					GIT_CURL_VERBOSE="1" \
					GIT_AUTHOR_NAME="${REMOTE_USERNAME}" \
					GIT_COMMITTER_NAME="${REMOTE_USERNAME}" \
					GIT_AUTHOR_EMAIL="${REMOTE_EMAIL}" \
					GIT_COMMITTER_EMAIL="${REMOTE_EMAIL}" \
					EMAIL="${REMOTE_EMAIL}" \
				git add "${GIT_WORK_TREE}/"**/* && \
				git commit -m"${START_TIMESTAMP} | Jenkins Plugins Export/Upload (via script \"$(basename ${0})\" on host \"$(hostname)\")" -a && \
				git push;

			fi;

		fi;

		if [ 0 -eq 1 ]; then
			# ------------------------------------------------------------
			#
			# Roll-Back Jenkins plugins to [ latest export ]
			#  |
			#  |--> NOTE:  This command will reference the file pointed-to (see below) located at "${JENKINS_HOME}/jenkins_export_plugins.latest.7z"
			#  |
			#  |--> NOTE:  If a different plugins backup-file (7z archive) other than "${JENKINS_HOME}/jenkins_export_plugins.latest.7z" is needed to-be-rolled-back-to, SSH into the
			#                Jenkins server and redirect the symbolic link to the desired target-archive by overwriting/updating the link
			#                located @ "${JENKINS_HOME}/jenkins_export_plugins.latest.7z" to point to your desired file/archive.
			#              Once you have updated the symbolic link to point-to your desired archive, use the same command, below (as-if nothing changed, since it uses the same sym-link)
			#
			USERNAME_JENKINS="jenkins" && \
			JENKINS_HOME=$(getent passwd "${USERNAME_JENKINS}" | cut --delimiter=: --fields=6) && \
			BAK_CURRENT_CONFIG="${JENKINS_HOME}/config.$(date +'%Y-%m-%d_%H-%M-%S').bak" && \
			LATEST_ARCHIVE_CONFIG=$(realpath "${JENKINS_HOME}/jenkins_export_config.latest.7z") && \
			BAK_CURRENT_PLUGINS="${JENKINS_HOME}/plugins.$(date +'%Y-%m-%d_%H-%M-%S').bak" && \
			LATEST_ARCHIVE_PLUGINS=$(realpath "${JENKINS_HOME}/jenkins_export_plugins.latest.7z") && \
			test -f "${LATEST_ARCHIVE_PLUGINS}" && \
			cd $(dirname "${LATEST_ARCHIVE_PLUGINS}") && \
			7z x $(basename "${LATEST_ARCHIVE_PLUGINS}") && \
			service jenkins stop && \
			mv "${JENKINS_HOME}/plugins" "${BAK_CURRENT_PLUGINS}" && \
			chown -R "${USERNAME_JENKINS}:$(id -gn ${USERNAME_JENKINS})" "${BAK_CURRENT_PLUGINS}" && \
			mv "$(dirname "${LATEST_ARCHIVE_PLUGINS}")/${JENKINS_HOME}/plugins" "${JENKINS_HOME}/plugins" && \
			chown -R "${USERNAME_JENKINS}:$(id -gn ${USERNAME_JENKINS})" "${JENKINS_HOME}/plugins" && \
			service jenkins start && \
			rm -rf $(dirname "${LATEST_ARCHIVE_PLUGINS}")/$(dirname $(dirname "${JENKINS_HOME}")) && \
			df -h ".";
		fi;


		if [ 0 -eq 1 ]; then
			# ------------------------------------------------------------
			#
			# Backup [ Docker-based Jenkins instance ]
			#
			BASE_DIR="${HOME}/backups/$(date +'%Y-%m-%d_%H-%M-%S')" && \
			mkdir -p "${BASE_DIR}" && \
			7z a "${BASE_DIR}/jenkins-docker.7z" -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on -spf -spe "/var/lib/docker/volumes/jenkins-data/_data";
		fi;


		if [ 0 -eq 1 ]; then
			# ------------------------------------------------------------
			#
			# Update [ Docker-based Jenkins instance ]
			#
			REPO_CREDS="${HOME}/.ssh/jenkins-config.pull" && \
			GIT_WORK_TREE=$(git_init "${REPO_CREDS}" | grep -e '^/var/lib/git') && \
			cd "${GIT_WORK_TREE}";
			# 7z x "LATEST_ARCHIVE.7z";
			# rsync --archive --inplace --checksum --verbose "./jenkins/" "/var/lib/docker/volumes/jenkins-data/_data";
			# ------------------------------------------------------------
		fi;

	fi;

fi;

# ------------------------------------------------------------
# 
# Citation(s)
#	
# 	devops.stackexchange.com  |  "How do you back up Jenkins jobs & master configs?"  |  https://devops.stackexchange.com/a/563
# 
# ------------------------------------------------------------
