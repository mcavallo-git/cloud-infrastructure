#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_dotnet" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_dotnet_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_dotnet"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  if [ -n "$(command -v dotnet 2>'/dev/null';)" ]; then
    echo "";
    echo "Info:  dotnet already installed - listing installed SDKs...";
    dotnet --list-sdks;
  else
    VALID_OS=0;
    if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then
      #
      #   Ubuntu Environment
      #

      #
      # Add/update the [ Microsoft's Linux Software Repository ] onto the list of known/trusted package repos
      #

      # MIGRATE TO MICROSOFT CONVENIENCE SCRIPT @ https://dot.net/v1/dotnet-install.sh
      #   curl -sL "https://dot.net/v1/dotnet-install.sh" | sudo bash;  # Install latest-LTS dotnet build
      #   curl -sL "https://dot.net/v1/dotnet-install.sh" | sudo bash -s -- -c Current;  # Install latest non-LTS dotnet build

      # Get local distro's major version
      OS_VERSION_MAJOR=$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\1/p';);
      # Get local distro's minor version
      OS_VERSION_MINOR=$(LENGTH="2"; echo "$(printf "%0${LENGTH}d" "$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\2/p';)";)";);
      # Build the package repo url based off of current distro's versioning info
      DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/${OS_VERSION_MAJOR}.${OS_VERSION_MINOR}/packages-microsoft-prod.deb";
      # Determine if there is a url endpoint ready to handle requests for the current OS
      RESPONSE_HTTP_CODE="$(curl -ILs "${DOWNLOAD_URL}" | grep '^HTTP/' | tail -n 1 | awk '{print $2}';)";
      if [[ "${RESPONSE_HTTP_CODE}" -eq 200 ]]; then
        # Microsoft Hosted Package Repository EXISTS for the current distro
        VALID_OS=1;
        # Remove any existing instances of the package repo (to remove deprecated ones)
        cd "${HOME}";
        dpkg --purge "packages-microsoft-prod" 2>'/dev/null';
        rm -fv "packages-microsoft-prod.deb" 2>'/dev/null';
        # Download the latest reference to the package repo
        wget -q "${DOWNLOAD_URL}" -O "$(basename "${DOWNLOAD_URL}";)";
        # Add/Update local references to the downloaded package repo references
        dpkg --install "$(basename "${DOWNLOAD_URL}";)";
        # Cleanup the downloaded file
        rm -fv "$(basename "${DOWNLOAD_URL}";)";
        # Install the dotnet SDK package(s)
        apt-get -y update;
        apt-get -y install "apt-transport-https";
        apt-get -y update;
        # apt-get -y install "dotnet-sdk-2.1";
        # apt-get -y install "dotnet-sdk-3.1";
        apt-get -y install "dotnet-sdk-5.0";
        apt-get -y install "dotnet-sdk-6.0";
      fi;
    fi;
    if [ -n "$(command -v dotnet 2>'/dev/null';)" ]; then
      #
      # Verify that the dotnet SDKs have been installed successfully
      #
      dotnet --list-sdks;
    fi;
    if [[ "${VALID_OS}" -eq 0 ]]; then
      #
      # Error:  Unhandled Linux distribution
      #
      echo "";
      echo "Error:  Unhandled Linux distribution:";
      echo "------------------------------------------------------------";
      cat /etc/*release;
      echo "------------------------------------------------------------";
      echo "";
      echo "Info:  Please refer Microsoft's tutorial page for installing DotNet Core on Linux @:";
      echo " |    ";
      echo " |--> https://docs.microsoft.com/en-us/dotnet/core/install/linux";
      echo "";
      echo "------------------------------------------------------------";
    fi;

  fi;

fi;

# ------------------------------------------------------------
#
# Uninstall dotnet on Debian
#
# apt-get -y remove "dotnet-sdk-5.0"; apt-get -y remove "dotnet-sdk-6.0"; apt-get -y remove "dotnet-apphost-pack-5.0"; apt-get -y remove "dotnet-apphost-pack-6.0"; apt-get -y remove "dotnet-host"; apt-get -y remove "dotnet-hostfxr-5.0"; apt-get -y remove "dotnet-hostfxr-6.0"; apt-get -y remove "dotnet-runtime-5.0"; apt-get -y remove "dotnet-runtime-6.0"; apt-get -y remove "dotnet-runtime-deps-5.0"; apt-get -y remove "dotnet-runtime-deps-6.0"; apt-get -y remove "dotnet-targeting-pack-5.0"; apt-get -y remove "dotnet-targeting-pack-6.0";
#
# ------------------------------------------------------------
#
### Ad-hoc test for Linux distro compatibility (major v. 14 thru 24 --> minor v. 00 thru 24 (for every major))
# if [[ 0 -eq 1 ]]; then
#   clear; echo -e "\n"; for OS_VERSION_MAJOR in {14..24}; do for OS_VERSION_MINOR in {00..24}; do DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/${OS_VERSION_MAJOR}.${OS_VERSION_MINOR}/packages-microsoft-prod.deb"; RESPONSE_HTTP_CODE="$(curl -ILs "${DOWNLOAD_URL}" | grep '^HTTP/' | tail -n 1 | awk '{print $2}';)"; if [ "${RESPONSE_HTTP_CODE}" == "200" ]; then echo "  Info:  URL validated for Ubuntu ${OS_VERSION_MAJOR}.${OS_VERSION_MINOR}"; fi; done; done; echo -e "\n";
# fi;
#
# -------------------------------------------------------------
#
# Citation(s)
#
#   dotnet.microsoft.com  |  "Install .NET on Linux Distributions | Microsoft Docs"  |  https://docs.microsoft.com/en-us/dotnet/core/install/linux
#
#   learn.microsoft.com  |  "Install .NET on Linux without using a package manager - .NET | Microsoft Learn"  |  https://learn.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#scripted-install
#
#   learn.microsoft.com  |  "Linux Software Repository for Microsoft Products | Microsoft Learn"  |  https://learn.microsoft.com/en-us/windows-server/administration/linux-package-repository-for-microsoft-software
#
# ------------------------------------------------------------