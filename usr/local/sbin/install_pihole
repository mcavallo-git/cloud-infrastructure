#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_pihole" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/sbin/install_pihole?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_pihole_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_pihole"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Spin-up pihole instance (using docker-compose)
#
# ------------------------------------------------------------
#
# Free-up port 53 by stopping service [ systemd-resolved ] from listening on it
#  |
#  |--> Update "/etc/systemd/resolved.conf"
#  |     |--> Uncomment "DNS=" line and set to "DNS=8.8.8.8"
#  |     |--> Uncomment "FallbackDNS=" line and set to "FallbackDNS=1.1.1.1"
#  |     |--> Uncomment "DNSStubListener=" line and set to "DNSStubListener=no"
#  |
#  |--> Redirect "/etc/resolv.conf"
#  |     |--> Run [ ln -sfv "/run/systemd/resolve/resolv.conf" "/etc/resolv.conf"; ]
#  |
#  |--> Restart the machine via [ reboot ]
#
# ------------------------------------------------------------

EXIT_CODE=0;

# ------------------------------------------------------------
#
# Spin-up the pihole docker (after port 53 is freed up)
#

echo "";

# Check to see if any pihole dockers are currently running (before updating/removing/replacing them with a newer version)
FIRST_REINSTALL_CONFIRMATION="";
SECOND_REINSTALL_CONFIRMATION="";
if [[ -n "$(docker ps --all --quiet --filter "ancestor=pihole/pihole" 2>'/dev/null';)" ]]; then
  # Require a first round of user confirmations ('Y' or 'y' keypress) before reinstalling pihole over an already-running instance of pihole
  echo -e "";
  echo -e " ! !        ! !";
  echo -e " ! ! NOTICE ! !  This will reinstall any existing pihole docker(s)  ! ! NOTICE ! ! ";
  echo -e " ! !   |    ! !";
  echo -e "       |  ";
  read -p "       |--> Are you sure you want to continue?  (press 'y' to confirm)  " -a FIRST_REINSTALL_CONFIRMATION -n 1 -t 60 <'/dev/tty'; # Await single keypress
  echo -e "";
fi;

if [[ -z "$(docker ps --all --quiet --filter "ancestor=pihole/pihole" 2>'/dev/null';)" ]] || [[ "${FIRST_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then

  # Require a second round of user confirmations ('Y' or 'y' keypress) before reinstalling pihole over an already-running instance of pihole
  if [[ "${FIRST_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then
    echo "       |  ";
    read -p "       |--> Are you completely positive you want to continue?  (press 'y' to confirm)  " -a SECOND_REINSTALL_CONFIRMATION -n 1 -t 60 <'/dev/tty'; # Await single keypress
    echo "";
    echo "";
  fi;

  if [[ -z "$(docker ps --all --quiet --filter "ancestor=pihole/pihole" 2>'/dev/null';)" ]] || [[ "${SECOND_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then

    # ------------------------------

    # Set baseline variable(s)

    CONFIG_DIR="/root/docker-configs/pihole";

    IMAGE_URL="docker.io/pihole/pihole:latest";

    PIHOLE_ALREADY_EXISTS=0;

    RESOLV_CONF_REMOVE_STOPGAP=0;

    STOPGAP_DNS_SERVER="8.8.8.8";

    # ------------------------------

    # Ensure any volume-map directories exist
    echo "";
    echo "Info:  Creating volume-map directories which don't already exist...";
    mkdir --parents "${CONFIG_DIR}/etc/pihole/" "${CONFIG_DIR}/etc/dnsmasq.d/";  # Directories used for docker container volume maps

    # ------------------------------

    # Set dynamic variable(s)

    if [[ -n "$(docker ps --all --quiet --filter "ancestor=pihole/pihole" 2>'/dev/null';)" ]]; then
      PIHOLE_ALREADY_EXISTS=1;
    fi;

    WAN_CONNECTION_EXISTS="$(dig +timeout=1 +short "example.com" 2>'/dev/null' | grep -v "^$" | grep -v "^;;"| wc -l;)";

    # ------------------------------

    # Pihole docker already running
    if [[ "${PIHOLE_ALREADY_EXISTS}" -eq 1 ]]; then
      PIHOLE_ALREADY_EXISTS=1;
      # At least one pihole container already exists
      echo "";
      echo "Info:  At least one pihole container already exists";
      # Show the version of target pihole container
      echo "";
      echo "Info:  Getting version from pihole container...";
      docker exec "$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)" pihole version;
    fi;

    # Add DNS server to /etc/resolv.conf
    if [[ "${PIHOLE_ALREADY_EXISTS}" -eq 1 ]] || [[ "${WAN_CONNECTION_EXISTS}" -eq 0 ]]; then
      if [[ $(sed -rne "s/^# (nameserver ${STOPGAP_DNS_SERVER})$/\0/p" "/etc/resolv.conf" | wc -l 2>'/dev/null';) -gt 0 ]]; then
        # Add stopgap DNS to local DNS resolvers before removing current pihole container (and ruining loopback DNS resolution, if active)
        echo "";
        echo "Info:  Adding Stopgap DNS server \"${STOPGAP_DNS_SERVER}\" to local DNS resolvers before removing current pihole container (which could ruin loopback DNS resolution, if active)";
        sed -re "s/^# (nameserver ${STOPGAP_DNS_SERVER})$/\1/" -i "/etc/resolv.conf";
        RESOLV_CONF_REMOVE_STOPGAP=1;
      elif [[ $(sed -rne "s/^(nameserver ${STOPGAP_DNS_SERVER})$/\0/p" "/etc/resolv.conf" | wc -l 2>'/dev/null';) -gt 0 ]]; then
        # Keep stopgap DNS server, but only until pi-Hole is working as-intended (then remove stopgap DNS server references)
        echo "";
        echo "Info:  Found DNS server \"${STOPGAP_DNS_SERVER}\" amongst local nameservers (will be removed after pi-hole container is spun up)";
        RESOLV_CONF_REMOVE_STOPGAP=1;
      fi;
    fi;

    # Remove existing pihole docker(s)
    if [[ "${PIHOLE_ALREADY_EXISTS}" -eq 1 ]]; then
      echo "";
      echo "Info:  Removing existing pihole container(s)...";
      curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/bin/docker_sniper?t=$(date +'%s.%N')" | bash -s -- "pihole";
      # Wait for local DNS resolution to recognize and update itself around the pihole DNS server going AWOL
      echo "";
      echo "Info:  Sleeping for 30 seconds (to allow network resolution changes to propogate)...";
      sleep 30;
    fi;

    # ------------------------------

    # if [[ 0 -eq 1 ]]; then
    #   # Set the working directory
    #   echo "";
    #   echo "Info:  Setting the working directory to \"${CONFIG_DIR}\"...";
    #   cd "${CONFIG_DIR}";
    #   # Download a base docker-compose YAML script (intended to be used for spinning up customized pihole containers)
    #   COMPOSE_FILE_REMOTE="https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/var/lib/docker-compose/docker-compose.pihole.yml";
    #   COMPOSE_FILE_LOCAL="${CONFIG_DIR}/$(basename "${COMPOSE_FILE_REMOTE}";)";
    #   echo "";
    #   echo "Info:  Downloading pihole docker-compose script...";
    #   curl -sL "${COMPOSE_FILE_REMOTE}" -o "${COMPOSE_FILE_LOCAL}";
    #   chmod 0600 "${COMPOSE_FILE_LOCAL}";
    # fi;

    # Spin up the pihole docker container
    echo "";
    echo "Info:  Spinning up the \"pihole\" docker container...";
    # cd "${CONFIG_DIR}";
    EVAL_DOCKER_RUN="docker run";
    EVAL_DOCKER_RUN+=" --detach";
    EVAL_DOCKER_RUN+=" --name 'pihole'";
    EVAL_DOCKER_RUN+=" --hostname 'pihole'";
    EVAL_DOCKER_RUN+=" --restart 'always'";
    EVAL_DOCKER_RUN+=" --sysctl 'net.ipv6.conf.all.disable_ipv6=1'";  # disable IPv6
    EVAL_DOCKER_RUN+=" --publish '0.0.0.0:53:53/tcp'";    # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --publish '0.0.0.0:53:53/udp'";    # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --publish '0.0.0.0:67:67/udp'";    # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --publish '0.0.0.0:80:80/tcp'";    # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --publish '0.0.0.0:443:443/tcp'";  # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --dns-option='ndots:0'";  # --publish <container_ip>:<host_port>:<container_port>/<protocol>
    EVAL_DOCKER_RUN+=" --dns='127.0.0.1'";  # Adds [ nameserver <ip_address> ] to [ /etc/resolv.conf ] in container

    CONFIG_ENV_FILE="${CONFIG_DIR}/.env";
    if [[ -f "${CONFIG_ENV_FILE}" ]]; then
      DNS_SEARCH_DOMAIN=$(sed -rne 's/^REV_SERVER_DOMAIN="?(.+)"?$/\1/p' "${CONFIG_ENV_FILE}";);
      if [[ -n "${DNS_SEARCH_DOMAIN}" ]]; then
        EVAL_DOCKER_RUN+=" --dns-search '${DNS_SEARCH_DOMAIN}'";  # Adds [ search <domain> ] to [ /etc/resolv.conf ] in container
      fi;
      EVAL_DOCKER_RUN+=" --env-file '${CONFIG_ENV_FILE}'";
    fi;

    EVAL_DOCKER_RUN+=" '${IMAGE_URL}'";
    EVAL_DOCKER_RUN+=";";
    echo "  |-->  Calling [ ${EVAL_DOCKER_RUN} ]...";
    echo "";
    eval " ${EVAL_DOCKER_RUN}";

    # if [[ 0 -eq 1 ]]; then
    #   # Cleanup the downloaded file
    #   EVAL_CLEANUP_COMPOSE+="rm -fv '${COMPOSE_FILE_LOCAL}';";
    #   echo "  |-->  Calling [ ${EVAL_CLEANUP_COMPOSE} ]...";
    #   echo "";
    #   eval " ${EVAL_CLEANUP_COMPOSE}";
    # fi;

    # Remove DNS server from /etc/resolv.conf (only if it was added earlier)
    if [[ ${RESOLV_CONF_REMOVE_STOPGAP} -eq 1 ]]; then
      echo "";
      echo "Info:  The stopgap DNS server \"${STOPGAP_DNS_SERVER}\" was NOT removed from local DNS resolvers in an effort to avoid network name resolution (DNS) failures due to pihole being offline";
      echo "       If your LAN's primary DNS is not pointing to this server's pihole docker, you may manually remove (comment-out) the local DNS server entry via:";
      echo "          sed -re 's/^(nameserver ${STOPGAP_DNS_SERVER})$/# \1/' -i \"/etc/resolv.conf\";  # Remove local stopgap DNS server";
    fi;

    # Verify that the docker container was created as-intended
    if [[ -z "$(docker ps --all --quiet --filter "ancestor=pihole/pihole" 2>'/dev/null';)" ]]; then
      # Pi-hole container does NOT exist
      EXIT_CODE=1;

      echo "";
      echo "Error:  Pi-hole docker not found";

    else

      # Pi-hole container DOES exist
      echo "";
      echo "Info:  Pi-hole docker successfully created";

      # Free up port 53 for pihole --> Stop the pihole docker, then stop the 'systemd-resolved' service in order to free up port 53 (DNS) so that pihole may create a listening thread on port 53, effectively reserving the port for the pihole service, locally, then start the pihole docker
      echo "";
      echo "Info:  Freeing up port 53 (DNS) so that the pihole service may create a listening thread on it";

      echo "  |-->  Stopping docker \"pihole\"...";
      docker stop "pihole" 1>'/dev/null';

      echo "  |-->  Stopping service 'systemd-resolved'...";
      systemctl stop "systemd-resolved.service";

      echo "  |-->  Disabling service 'systemd-resolved'...";
      systemctl disable "systemd-resolved.service";

      echo "  |-->  Starting docker \"pihole\"...";
      docker start "pihole" 1>'/dev/null';

      # If we added a temporary DNS resolver's IP address (above) to /etc/resolv.conf, then now is the location in the script where it should be removed/cleaned-up (as it is only a workaround to download pihole's docker image while pihole itself doesn't exist to resolve DNS queries to find it)
      if [[ ${RESOLV_CONF_REMOVE_STOPGAP} -eq 1 ]]; then
        echo "";
        echo "Info:  Removing stopgap DNS server from local DNS resolvers...";
        sed -re "s/^(nameserver ${STOPGAP_DNS_SERVER})$/# \1/" -i "/etc/resolv.conf";
      fi;

      echo "";
      echo "Info:  Sleeping for 15 seconds (to allow pihole container to boot up)...";
      sleep 15;

      # ------------------------------

      # Update pihole's whitelisted domains - These domains are allowed past pihole's "gravity" and excluded from any adlists/blocklists
      if [[ -n "$(command -v pihole_update_whitelist 2>'/dev/null';)" ]]; then
        pihole_update_whitelist;
      fi;

      # -----------------------------

      # Update pihole's adlists - These are the list(s) of blocked domains which pihole's "gravity" pulls from
      if [[ -n "$(command -v pihole_update_adlists 2>'/dev/null';)" ]]; then
        pihole_update_adlists;
      fi;

      # ------------------------------
      #
      # Update pihole's network settings
      #
      if [[ 1 -eq 1 ]]; then
        echo "";
        echo "Info:  Updating pihole's network settings";
        CONTAINER_ID="$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)";
        unset NETWORK_FILEPATHS; declare -A NETWORK_FILEPATHS; # [Re-]Instantiate bash array
        # NETWORK_FILEPATHS+=(["__SOURCE__"]="__DESTINATION__");
        NETWORK_FILEPATHS+=(["/etc/hosts"]="/etc/hosts");
        NETWORK_FILEPATHS+=(["${CONFIG_DIR}/etc/resolv.conf"]="/etc/resolv.conf");
        for EACH_SOURCE in "${!NETWORK_FILEPATHS[@]}"; do
          EACH_DEST="${NETWORK_FILEPATHS[${EACH_SOURCE}]}";
          if [[ ! -e "${EACH_SOURCE}" ]]; then
            echo "  |-->  Skipped '${EACH_DEST}' (source '${EACH_SOURCE}' not found)";
          else
            # Copy each config file/directory into target container
            echo "  |-->  Updating '${EACH_DEST}'";
            EACH_TEMP="${EACH_DEST}.$(date +'%s.%N').tmp";
            # Workaround note: Cannot use 'docker cp' to copy over files which are in-use by the container (no '--force' argument)
            #  |--> Instead, pull an Indiana Jones by copying the file into the container as a temporary file via 'docker cp', then replace the target file with the temporary file via the 'cp' native Linux command using the '--force' argument
            EACH_EVAL_DOCKER_CP="docker cp '${EACH_SOURCE}' '${CONTAINER_ID}:${EACH_TEMP}';";
            eval " ${EACH_EVAL_DOCKER_CP}";
            EACH_EVAL_DOCKER_EXEC_CP="docker exec -t '${CONTAINER_ID}' cp --force '${EACH_TEMP}' '${EACH_DEST}';";
            eval " ${EACH_EVAL_DOCKER_EXEC_CP}";
            EACH_EVAL_DOCKER_EXEC_CHMOD="docker exec -t '${CONTAINER_ID}' chmod 0444 '${EACH_DEST}';";
            eval " ${EACH_EVAL_DOCKER_EXEC_CHMOD}";
          fi;
        done;
      fi;

      # ------------------------------

      # Update pihole's config files
      if [[ -d "${CONFIG_DIR}" ]]; then
        echo "";
        echo "Info:  Updating pihole's config files";
        CONTAINER_ID="$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)";
        unset CONFIG_FILEPATHS; declare -A CONFIG_FILEPATHS; # [Re-]Instantiate bash array
        # CONFIG_FILEPATHS+=(["__SOURCE__"]="__DESTINATION__");
        CONFIG_FILEPATHS+=(["${CONFIG_DIR}/etc/pihole/"]="/etc/pihole/");
        CONFIG_FILEPATHS+=(["${CONFIG_DIR}/etc/dnsmasq.d/"]="/etc/dnsmasq.d/");
        for EACH_SOURCE in "${!CONFIG_FILEPATHS[@]}"; do
          EACH_DEST="${CONFIG_FILEPATHS[${EACH_SOURCE}]}";
          if [[ ! -e "${EACH_SOURCE}" ]]; then
            echo "  |-->  Skipped '${EACH_DEST}' (source '${EACH_SOURCE}' not found)";
          else
            if [[ -d "${EACH_SOURCE}" ]]; then
              # Directory - Make sure to copy files from folder to folder instead of copying the whole folder another level deep in the container
              EACH_CP_DEST="$(dirname "${EACH_DEST}";)/";
            else
              # File(s) - Copy as-is
              EACH_CP_DEST="${EACH_DEST}";
            fi;
            # Copy each config file/directory into target container
            echo "  |-->  Updating '${EACH_DEST}'";
            EACH_EVAL_DOCKER_CP="docker cp '${EACH_SOURCE}' '${CONTAINER_ID}:${EACH_CP_DEST}';";
            echo "    |-->  Calling [ ${EACH_EVAL_DOCKER_CP} ]...";
            eval " ${EACH_EVAL_DOCKER_CP}";
          fi;
        done;
      fi;

      # ------------------------------

      # Update pihole's symbolic link(s)
      if [[ 1 -eq 1 ]]; then
        echo "";
        echo "Info:  Updating pihole's symbolic link(s)";
        CONTAINER_ID="$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)";
        docker exec -t "${CONTAINER_ID}" ln -sf '/macvendor.db' '/etc/pihole/macvendor.db';
      fi;

      # ------------------------------

      # Update pihole's file/directory permissions
      if [[ 1 -eq 1 ]]; then
        echo "";
        echo "Info:  Updating pihole's file/directory permissions";
        CONTAINER_ID="$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)";
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:pihole' '/etc/pihole/';
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:pihole' '/etc/pihole/dhcp.leases';
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:pihole' '/etc/pihole/gravity.db';
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:root'   '/etc/pihole/pihole-FTL.conf';
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:pihole' '/etc/pihole/pihole-FTL.db';
        docker exec -t "${CONTAINER_ID}" chown -L 'pihole:pihole' '/etc/pihole/macvendor.db';
      fi;

      # ------------------------------

      # Show the version of target pihole container
      echo "";
      echo "Info:  Getting version from pihole container...";
      docker exec "$(docker ps --all --quiet --filter "ancestor=pihole/pihole";)" pihole version;

      # ------------------------------

    fi;

  fi;

fi;

echo "";

printf -- '-%.0s' {1..10}; printf " Script ended at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";

echo "------------------------------";

exit ${EXIT_CODE};


# ------------------------------------------------------------
#
# Citation(s)
#
#   discourse.pi-hole.net  |  "[Solved] While executing: attempt to write a readonly database error - Help / Community Help - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/solved-while-executing-attempt-to-write-a-readonly-database-error/33003/4
#
#   discourse.pi-hole.net  |  "Enabling HTTPS for your Pi-hole Web Interface - FAQs / Community How-to's - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/enabling-https-for-your-pi-hole-web-interface/5771
#
#   discourse.pi-hole.net  |  "How do I add list via cli - FAQs / Community How-to's - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/how-do-i-add-list-via-cli/43733/2
#
#   docs.pi-hole.net  |  "Overview of Pi-hole - Pi-hole documentation"  |  https://docs.pi-hole.net/
#
#   github.com  |  "GitHub - pi-hole/docker-pi-hole: Pi-hole in a docker container"  |  https://github.com/pi-hole/docker-pi-hole/
#
#   github.com  |  "Using `--dns-option=ndots:0` w/ user-defined networking results in duplicate ndots:0 options · Issue #37349 · moby/moby · GitHub"  |  https://github.com/moby/moby/issues/37349
#
#   hub.docker.com  |  "pihole/pihole - Docker Hub"  |  https://hub.docker.com/r/pihole/pihole
#
#   serverfault.com  |  "domain name system - How to configure custom DNS server with Docker? - Server Fault"  |  https://serverfault.com/a/612131
#
#   stackoverflow.com  |  "How do I publish a UDP Port on Docker? - Stack Overflow"  |  https://stackoverflow.com/a/27596415
#
#   www.linuxuprising.com  |  "Ubuntu: How To Free Up Port 53, Used By systemd-resolved - Linux Uprising Blog"  |  https://www.linuxuprising.com/2020/07/ubuntu-how-to-free-up-port-53-used-by.html
#
#   www.sqlitetutorial.net  |  "SQLite Describe Table"  |  https://www.sqlitetutorial.net/sqlite-tutorial/sqlite-describe-table/
#
# ------------------------------------------------------------