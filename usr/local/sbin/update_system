#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/update_system" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/update_system?t=$(date +'%s.%N')" | bash -s -- --now;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/update_system_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/update_system"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); echo "Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  if [[ -n "$(command -v yum 2>'/dev/null';)" ]]; then  # Distros: Fedora, Oracle Linux, Red Hat Enterprise Linux, CentOS, etc.
    #
    # Disabled for Fedora distros (RHEL/CentOS)
    #
    echo "System-Update disabled for Fedora-based distros (RHEL, CentOS, etc.)";
    exit 1;

  else
    #
    #  Linux - Fetch, Pull, & Install updates (system & package)
    #
    THIS_SCRIPT=$(basename "${0}");
    THIS_DIRNAME=$(dirname "${0}");
    if [ "$(date +%A)" == "Sunday" ] || [ "${1}" == "now" ] || [ "${1}" == "-now" ] || [ "${1}" == "--now" ]; then
      echo "------------------------------------------------------------";
      echo "";
      echo "$(date '+%Y-%m-%d %H:%M:%S') | Starting \"${THIS_SCRIPT}\"";
      echo "";
      echo "------------------------------------------------------------";
      #
      # apt
      #
      if [[ -n "$(command -v apt 2>'/dev/null';)" ]]; then  # Distros: Debian, Ubuntu, etc.
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"apt\" resolved to $(command -v apt 2>'/dev/null')";
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"apt-get\" resolved to $(command -v apt-get 2>'/dev/null')";
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo apt-get -y update";
        sudo apt-get -y update;
        if [[ -n "$(command -v update_unifi 2>'/dev/null';)" ]]; then
          if [[ $(/bin/systemctl list-unit-files --no-legend --no-pager --full "unifi.service" | grep "^unifi.service" 1>'/dev/null' 2>&1; echo ${?};) -ne 0 ]]; then
            echo "";
            echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo update_unifi";
            sudo update_unifi;
          fi;
        fi;
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo apt list --upgradable";
        sudo apt list --upgradable;
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo apt-get -y dist-upgrade";
        sudo apt-get -y dist-upgrade;
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo apt-get -y autoremove";
        sudo apt-get -y autoremove;
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo apt-get -y clean";
        sudo apt-get -y clean;
      else
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"apt\" not found";
      fi;
      echo "------------------------------------------------------------";
      #
      # yum
      #
      if [[ -n "$(command -v yum 2>'/dev/null';)" ]]; then  # Distros: Fedora, Oracle Linux, Red Hat Enterprise Linux, CentOS, etc.
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"yum\" resolved to $(command -v yum 2>'/dev/null';)";
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo yum list --upgradable";
        sudo yum check-update; RET_CODE_YUM_CHECK_UPDATE=$?;
        if [ ${RET_CODE_YUM_CHECK_UPDATE} -eq 100 ]; then
          # Command [ yum check-update ] returns exit value of 100 if there are packages available for an update
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo yum -y update";
          sudo yum -y update;
        fi;
      else
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"yum\" not found";
      fi;
      echo "------------------------------------------------------------";
      #
      # updatedb
      #
      if [ $(which updatedb 2>'/dev/null' | wc -l;) -eq 0 ]; then
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"updatedb\" not found";
      else
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"updatedb\" resolved to $(which updatedb)";
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo updatedb";
        sudo updatedb;
      fi;
      echo "------------------------------------------------------------";
      #
      # ldconfig
      #
      if [ $(which ldconfig 2>'/dev/null' | wc -l;) -eq 0 ]; then
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"ldconfig\" not found";
      else
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"ldconfig\" resolved to $(which ldconfig 2>'/dev/null')";
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo ldconfig";
        sudo ldconfig;
      fi;
      echo "------------------------------------------------------------";
      #
      # pip
      #
      if [ "skip pip" == "skip pip" ]; then
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Skipping \"pip\"";
      else 
        if [ $(which pip 2>'/dev/null' | wc -l;) -eq 0 ]; then
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"pip\" not found";
        else
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"pip\" resolved to $(which pip 2>'/dev/null')";
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo pip install --upgrade pip;";
          sudo pip install --upgrade pip;
          # Update pip modules - 'newer' version of pip (version??)
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 sudo -H pip install -U;";
          sudo pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 sudo -H pip install -U;
          # Update pip modules - 'older' version of pip (version??)
          echo "";
          echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 sudo -H pip install -U;";
          sudo pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 sudo -H pip install -U;
        fi;
      fi;
      echo "------------------------------------------------------------";
      if [ $(which do-release-upgrade 2>'/dev/null' | wc -l;) -eq 0 ]; then
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Command \"do-release-upgrade\" not found";
      else
        OS_UPDATES_CHECK="$(do-release-upgrade --check-dist-upgrade-only;)";
        OS_UPDATES_AVAILABLE="$(echo "${OS_UPDATES_CHECK}" | grep '^New release' | wc -l;)";
        if [ "${OS_UPDATES_AVAILABLE}" == "1" ]; then
          echo "";
          echo "!!!  Updates exist for current operating system:";
          echo "${OS_UPDATES_CHECK}" | grep -v '^Check';
        else
          echo "";
          echo "No operating system updates found";
        fi;
      fi;
      echo "------------------------------------------------------------";
      #
      # Check if reboot is required
      #
      if [ -f "/var/run/reboot-required" ]; then
        # The File '/var/run/reboot-required' is an Ubuntu native, and signifies that at least one recent update requires a reboot to fully complete their install/update.
        # If we find that ^ file on our current host (after running updates), then the system is in the reboot preparation phase -> set it just to restart after 2 minutes
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | REBOOT REQUIRED TO FINALIZE ONE OR MORE UPDATES - SETTING A RESTART FOR 2 MINUTES FROM NOW";
        # Schedule the system restart/reboot (NOT reset)
        SCHEDULED_RESTART_TIME=$(date -d "$(date +%H):$(date +%M) 2 minutes" +'%H:%M');
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Calling  > sudo shutdown -r \"${SCHEDULED_RESTART_TIME}\"";
        shutdown -r "${SCHEDULED_RESTART_TIME}";
      fi;
    else
        echo "";
        echo "$(date '+%Y-%m-%d %H:%M:%S') | Use argument '--now' to run system update";
    fi;
    if [ -f "/usr/local/bin/get_os" ]&& [ $("/usr/local/bin/get_os" | grep 'WSL' | wc -l;) -eq 1 ]; then
      #
      # WSL (Windows Subsystem for Linux)
      #  |--> To shutdown WSL, manually create above file via  [ sudo touch /var/run/reboot-required ]  when closing
      #       terminals, otherwise the linux environment persists the background as a service (essentially hidden)
      #
      touch "/var/run/reboot-required";
    fi;
    #
    # Exit gracefully
    #
    echo "";
    echo "$(date '+%Y-%m-%d %H:%M:%S') | Finished \"${THIS_SCRIPT}\"";
    echo "------------------------------------------------------------";
    exit 0;
  fi;
fi;