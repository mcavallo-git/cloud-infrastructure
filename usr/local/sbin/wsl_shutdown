#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/wsl_shutdown" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/wsl_shutdown_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/wsl_shutdown"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  #
  # Shutdown WSL (Windows Subsystem for Linux)
  #  |--> To shutdown WSL, signal to linux that a reboot is required by manually creating file '/var/run/reboot-required', otherwise the WSL linux environment persists the background as a service (and continues to consume hardware resources as-needed)
  #
  if [[ -n "$(uname -r 2>&1 | grep -i 'microsoft' 2>&1;)" ]]; then  
    ACTION_DESCRIPTION="Kill all WSL terminals";
    READ_TIMEOUT=60;
    read -p "Perform action [ ${ACTION_DESCRIPTION} ], now?  (press 'y' to confirm)  " -a USER_RESPONSE -n 1 -t ${READ_TIMEOUT} <'/dev/tty'; RETURN_CODE_READ=${?};
    echo "";
    if [[ "${RETURN_CODE_READ}" -gt 128 ]]; then
      # FAILED - USER INPUT TIMED OUT
      echo "  |--> Error:  Response timed out after ${READ_TIMEOUT}s";
    elif [[ -z "${USER_RESPONSE}" ]]; then
      # DENIED - USER INPUT IS EMPTY
      echo "  |--> Warning:  Denied  (empty response received)";
    elif [[ ! "${USER_RESPONSE}" =~ ^[Yy]$ ]]; then
      # DENIED - USER INPUT FAILED REGEX TEST
      echo "  |--> Warning:  Denied  (response '${USER_RESPONSE}' received)";
    else
      # CONFIRMED - USER INPUT IS NON-EMPTY AND PASSED REGEX TEST
      echo "  |--> Info:  Confirmed  (response '${USER_RESPONSE}' received)";
      echo "  |--> Info:  Performing action [ ${ACTION_DESCRIPTION} ]...";
      # ------------------------------
      #
      # Signal to linux that a reboot is required by manually creating file '/var/run/reboot-required'
      #
      sudo touch "/var/run/reboot-required";
      # ------------------------------
      #
      # Default to calling wsl.exe directly (with --shutdown argument)
      #
      WSL_EXE="$(if [[ -n "$(command -v wsl.exe 2>'/dev/null';)" ]]; then echo "$(realpath "$(command -v "wsl.exe";)" 2>'/dev/null';)"; elif [[ -f "$(find /mnt/*/Windows/System32/wsl.exe -mindepth 0 -maxdepth 0 -type f | head -n 1;)" ]]; then find /mnt/*/Windows/System32/wsl.exe -mindepth 0 -maxdepth 0 -type f | head -n 1; else echo "$(wslpath -u "$(wslvar -s "ComSpec";)";)"; fi;)";
      # ------------------------------
      ${WSL_EXE} --shutdown;
      #
      # Fallback to cmd.exe
      #
      CMD_EXE="$(if [[ -n "$(command -v cmd.exe 2>'/dev/null';)" ]]; then echo "$(realpath "$(command -v "cmd.exe";)";)"; elif [[ -f "$(find /mnt/*/Windows/System32/cmd.exe -mindepth 0 -maxdepth 0 -type f | head -n 1;)" ]]; then find /mnt/*/Windows/System32/cmd.exe -mindepth 0 -maxdepth 0 -type f | head -n 1; else echo "$(wslpath -u "$(wslvar -s "ComSpec";)";)"; fi;)";
      ${CMD_EXE} "/C" "wsl.exe --shutdown";
      # ------------------------------
      #
      # Fallback to powershell.exe
      #
      POWERSHELL_EXE="$(if [[ -n "$(command -v powershell.exe 2>'/dev/null';)" ]]; then echo "$(realpath "$(command -v "powershell.exe";)";)"; elif [[ -f "$(find /mnt/*/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -mindepth 0 -maxdepth 0 -type f | head -n 1;)" ]]; then find /mnt/*/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -mindepth 0 -maxdepth 0 -type f | head -n 1; else echo "$(wslpath -u "$(wslvar -s "windir";)";)/System32/WindowsPowerShell/v1.0/powershell.exe"; fi;)";
      ${POWERSHELL_EXE} "wsl.exe --shutdown";
      # ------------------------------
      #
      # Fallback to killing all bash shell terminals (current shell as well as any other bash shells on local device)
      #
      PROCESSES=$(ps -e -o pid,cmd);
      for EACH_PID in $(echo "${PROCESSES}" | sed -rne 's/^\s*([0-9]+)\s+(-bash)$/\1/p';); do
        echo "Calling [ kill -SIGKILL ${EACH_PID}; ]...";
        kill -SIGKILL ${EACH_PID};
      done;
      # ------------------------------
    fi;
  else
    # Exit - Non-WSL Environment detected
    echo "";
    echo "Info:  Skipping shutdown (unable to detect WSL environment)";
    echo "";
    exit 1;
  fi;
fi;