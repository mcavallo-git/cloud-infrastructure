#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_docker" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_docker?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_docker_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/install_docker"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "${OSTYPE}" == "linux-gnu"* || "$(uname -s)" == "Linux" ]] && [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else

  BIN_DOCKER="/usr/bin/docker";
  BIN_DOCKER_COMPOSE="/usr/local/bin/docker-compose";

  # ------------------------------------------------------------
  if [ 0 -eq 1 ] && [ -n "$(command -v get_os 2>'/dev/null';)" ] && [[ "$(get_os)" == *"Microsoft"* ]]; then
    #
    # DEPRECATED
    #  WSL --> Windows (docker forwarding)
    #   |
    #   |--> Forward docker cli calls back to the Docker Desktop (Windows Docker) install exe's
    #   |--> Deprecated 2021-Q4 as Docker Desktop will be a paid software service around 2022-Q1
    #

    # Redirect Bash calls to Windows docker-host
    ln -sf "/mnt/c/Program Files/Docker/Docker/resources/bin/docker.exe" "${BIN_DOCKER}";
    ln -sf "/mnt/c/Program Files/Docker/Docker/resources/bin/docker-compose.exe" "${BIN_DOCKER_COMPOSE}";

    # Download Docker Desktop (if not found locally)
    if [ ! -f "/mnt/c/Program Files/Docker/Docker/resources/bin/docker.exe" ]; then
      echo -e "\n""Error: Must install Docker Desktop (for Windows), which WSL will leverage through direct-calls via WSL 2.0 CLI pass-through""\n";
      "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe" "https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe";
      exit 1;
    fi;

    # if [ -v SUDO_USER ]; then
    #   usermod -aG docker "${SUDO_USER}";
    # fi;
    # usermod -aG docker "${USER}";

    # Redirect Bash calls to Windows docker-host
    ln -sf "/mnt/c/Program Files/Docker/Docker/resources/bin/docker.exe" "${BIN_DOCKER}";
    ln -sf "/mnt/c/Program Files/Docker/Docker/resources/bin/docker-compose.exe" "${BIN_DOCKER_COMPOSE}";

  else # ------------------------------------------------------------
    #
    # Docker Installation
    #

    if [ ! -f "${BIN_DOCKER}" ]; then
      curl -sL "https://get.docker.com/" | sh;
    fi;

    SERVICE_NAME="docker";
    if [ -z "$(/usr/sbin/service ${SERVICE_NAME} status | grep 'Active: active (running)')" ]; then
      echo "Calling [ /usr/sbin/service \"${SERVICE_NAME}\" start; ]...";
      /usr/sbin/service "${SERVICE_NAME}" start;
    fi;

    if [ ! -f "${BIN_DOCKER_COMPOSE}" ]; then

      if [ -n "$(command -v apk 2>'/dev/null';)" ]; then
        # Alpine Distro(s) --> Install Prerequisite-Packages [ py-pip, python-dev, libffi-dev, openssl-dev, gcc, libc-dev, & make ]
        apk update && apk add py-pip python-dev libffi-dev openssl-dev gcc libc-dev make;
      fi;
      if [ "$(uname -m)" == "x86_64" ]; then
        #
        # Docker-Compose Installer --> x86_64 CPUs
        #  |--> Reference: [ https://docs.docker.com/compose/install ]
        #
        curl -sL "https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-$(uname -s)-$(uname -m)" -o "${BIN_DOCKER_COMPOSE}";
        # curl -sL "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64" -o "${BIN_DOCKER_COMPOSE}";
      else
        #
        # Docker-Compose Installer --> Non-x86_64 CPUs (namely Raspberry Pis, which have ARM64 ("aarch64" machine hardware name) CPUs)
        #  |--> Reference: [ https://github.com/docker/compose/issues/6831#issuecomment-558865087 ]
        #
        echo "Calling [ apt-get -y update ]...";
        apt-get -y update;
        echo "Calling [ apt-get -y install python3; ]...";
        apt-get -y install python3;
        echo "Calling [ apt-get -y install python3-pip; ]...";
        apt-get -y install python3-pip;
        echo "Calling [ pip3 install --upgrade pip; ]...";
        pip3 install --upgrade pip;
        echo "Calling [ python3 -m pip install -IU docker-compose; ]...";
        python3 -m pip install -IU docker-compose;
      fi;

      chmod 0755 "${BIN_DOCKER_COMPOSE}";

    fi;
    
  fi;

  systemctl enable docker --now;

  "${BIN_DOCKER}" --version;
  "${BIN_DOCKER_COMPOSE}" --version;

fi;


# ------------------------------------------------------------
# Citation(s)
#
#   docs.docker.com  |  "Get Docker CE for Ubuntu"  |  https://docs.docker.com/v17.09/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce-1
#
#   docs.docker.com  |  "Install Docker Compose"  |  https://docs.docker.com/compose/install/
#
#   github.com  |  "Release docker/compose image for armv7 / arm64v8 · Issue #6831 · docker/compose · GitHub"  |  https://github.com/docker/compose/issues/6831#issuecomment-558865087
#
#   stackoverflow.com  |  "Run Docker on Ubuntu on Windows Subsystem for Linux"  |  https://stackoverflow.com/a/48008676
#
# ------------------------------------------------------------