#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/archive_logs" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------

if [[ 0 -eq 1 ]]; then

# Download & run this script on-the-fly:
curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/archive_logs?$(date +'%s.%N')" | bash;

# Run the local copy of this script:
bash "${HOME}\Documents\GitHub\cloud-infrastructure\usr\local\sbin\archive_logs";

fi;

# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
# LOGDIR="${HOME}/archive_logs_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/archive_logs"; fi;
# mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
# LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
# exec > >(tee -a "${LOGFILE}" );
# exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------

  SERVICE_NAME="httpd";
  GLOB_PATTERN="*_log-*";
  DIR_LOGS="/var/log";
  DIR_ARCH="/var/archived_logs";

  if [ ! -d "${DIR_LOGS}/${SERVICE_NAME}" ]; then
    echo "";
    echo "ERROR:";
    echo "  Logs-dir not found for service \"${SERVICE_NAME}\" at path \"${DIR_LOGS}/${SERVICE_NAME}\" ";
    echo "";
    exit 1;
  

  elif [ ! -h "${DIR_ARCH}" ]; then

    echo "";
    echo "ERROR:";
    echo "  Symlink not found at path \"${DIR_ARCH}\" ";
    echo "  Please create a symbolic link from \"${DIR_ARCH}\" to your desired backup directory (ideally on a separate mount point)";
    echo "";
    echo "EXAMPLE:";
    echo "  ln -sf \"/REPLACE_WITH_YOUR_BACKUP_DIRECTORY/\" \"${DIR_ARCH}\"";
    echo "";
    exit 1;

  else

    # Stop the target service
    /usr/sbin/service "${SERVICE_NAME}" stop; RET_CODE=$?;
    if [ "${RET_CODE}" != "0" ]; then
      echo "";
      echo "ERROR:";
      echo "  Unable to stop service \"${SERVICE_NAME}\" - Exiting...";
      echo "";
      exit 1;
    
    else
      # Create the new logs dir
      if [ ! -d "${DIR_ARCH}/${SERVICE_NAME}" ]; then
        mkdir -p "${DIR_ARCH}/${SERVICE_NAME}";
        chmod 0700 "${DIR_ARCH}/${SERVICE_NAME}";
      fi;
      # Migrate all logs to new logs dir
      mv ${DIR_LOGS}/${SERVICE_NAME}/* ${DIR_ARCH}/${SERVICE_NAME}/.;
      # Remove old (now empty) logs dir
      rmdir ${DIR_LOGS}/${SERVICE_NAME};
      # Link the old logs dir to the new logs dir with a symbolic link
      ln -sf "${DIR_ARCH}/${SERVICE_NAME}" "${DIR_LOGS}/${SERVICE_NAME}";
      # Start the target service
      /usr/sbin/service "${SERVICE_NAME}" start;

      ### Archive each log-file found (which is not the latest logfile, as-to avoid collisions with application file-access)
      # for EACH_FILE in $(find "${DIR_LOGS}/${SERVICE_NAME}/" -type f -name "${GLOB_PATTERN}"); do
      #   BASENAME=$(basename "${EACH_FILE}");
      #   PATH_LOGS="${DIR_LOGS}/${SERVICE_NAME}/${BASENAME}"; 
      #   PATH_ARCH="${DIR_ARCH}/${SERVICE_NAME}/${BASENAME}";
      #   if [ -e "${PATH_LOGS}" ] && [ ! -e "${PATH_ARCH}" ]; then
      #     echo "Archiving log file  [ ${PATH_LOGS} ]  to path  [${PATH_ARCH} ]  ...";
      #     mv "${PATH_LOGS}" "${PATH_ARCH}";
      #     chmod 0400 "${PATH_ARCH}";
      #     ln -sf "${PATH_ARCH}" "${PATH_LOGS}";
      #   fi;
      # done;

    fi;

  fi;

fi;
