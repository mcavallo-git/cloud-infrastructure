#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/certbot_add_wildcard" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT

DN="example.com"; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/certbot_add_wildcard?t=$(date +'%s.%N')" | bash -s -- "${DN}";

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/certbot_add_wildcard_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/certbot_add_wildcard"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  # 
  # Use $1 as domain name for wildcard cert
  #
  if [[ -z "$1" ]]; then
    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Missing domain name - Please try again using first argument (\$1) as domain name";
    exit 1;
  else
    DOMAIN_NAME="$1";
    if [[ -n "$(command -v certbot 2>'/dev/null';)" ]]; then
      echo "";
      echo "Info:  Calling [ command -v certbot; ]...";
      command -v certbot;
    else
      echo "";
      echo "Info:  Required package(s):  [ python-certbot-nginx ]";
      echo "  |";
      read -p "  |--> Install/Update these package(s), now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
      echo "";
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [[ -n "$(command -v apt 2>'/dev/null';)" ]]; then # Distros: Debian, Ubuntu, etc.
          # Add required package repo(s)
          add-apt-repository --yes --update "ppa:certbot/certbot";
          # Install required package(s)
          apt-get --yes install "python-certbot-nginx";
        fi;
      fi;
    fi;
    # Create the SSL (TLS/HTTPS) certificate
    if [[ -n "$(command -v certbot 2>'/dev/null';)" ]]; then
      echo "";
      echo "------------------------------------------------------------";
      echo " !!!";
      echo " !!!  Log-into your DNS provider's website/management-service (in-browser, app, etc.)";
      echo " !!!";
      echo " !!!  Perform the requested DNS update(s), below (which exist to verify domain ownership)";
      echo " !!!";
      echo " !!!  BEFORE accepting the continuation prompts (from certbot/lets-encrypt), verify that DNS change(s) performed have propogated by browsing to:";
      echo " !!!   |";
      echo " !!!   |-->  https://mxtoolbox.com/SuperTool.aspx?action=txt%3a_acme-challenge.${DOMAIN_NAME}&run=toolpage";
      echo " !!!";
      echo " !!!  CALL THE FOLLOWING TO BEGIN:";
      echo "";
      echo "DN=\"${DOMAIN_NAME}\"; certbot certonly --manual --manual-public-ip-logging-ok --server https://acme-v02.api.letsencrypt.org/directory --preferred-challenges dns-01 -d \"\${DN}\" -d \"*.\${DN}\"; certbot certificates -d \"\${DN}\"; test -x \"/usr/local/sbin/reload_nginx\" && /usr/local/sbin/reload_nginx;";
      echo "";
      echo "------------------------------------------------------------";
      echo "";
      # echo "Info:  Calling [ certbot certonly --manual --manual-public-ip-logging-ok --server https://acme-v02.api.letsencrypt.org/directory --preferred-challenges dns-01 -d \"${DOMAIN_NAME}\" -d \"*.${DOMAIN_NAME}\"; certbot certificates -d \"${DOMAIN_NAME}\"; test -x \"/usr/local/sbin/reload_nginx\" && /usr/local/sbin/reload_nginx; ]...";
      # certbot certonly --manual --manual-public-ip-logging-ok --server https://acme-v02.api.letsencrypt.org/directory --preferred-challenges dns-01 -d "${DOMAIN_NAME}" -d "*.${DOMAIN_NAME}"; certbot certificates -d "${DOMAIN_NAME}"; test -x "/usr/local/sbin/reload_nginx" && /usr/local/sbin/reload_nginx;
    fi;
  fi;
fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   dev.to  |  "Let's Encrypt: Renew Wildcard Certificate With Certbot - DEV"  |  https://dev.to/nabbisen/let-s-encrypt-renew-wildcard-certificate-manually-with-certbot-1jp
#
#   guides.wp-bullet.com  |  "Let’s Encrypt Wildcard SSL nginx for WordPress Ubuntu 18.04"  |  https://guides.wp-bullet.com/lets-encrypt-wildcard-ssl-nginx-for-wordpress-ubuntu-18-04/
#
#   medium.com  |  "How to obtain a wildcard ssl certificate from Let’s Encrypt and setup Nginx to use wildcard subdomain"  |  https://medium.com/@utkarsh_verma/how-to-obtain-a-wildcard-ssl-certificate-from-lets-encrypt-and-setup-nginx-to-use-wildcard-cfb050c8b33f
#
#   packages.debian.org  |  "Package: dpkg-dev (1.19.7) - Debian package development tools"  |  https://packages.debian.org/sid/dpkg-dev
#
# ------------------------------------------------------------