#!/bin/bash

if [ 0 -eq 1 ]; then echo 1; else echo 0; fi;
  # OneLiner (Option 1)
  docker rm --force $(docker stop $(docker ps --all --quiet)); docker rmi --force $(docker images --all --quiet); docker network rm $(docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none' | awk '{print $1}');
  # OneLiner (Option 2)
  docker stop $(docker ps --quiet); docker rm --force $(docker ps --all --quiet); docker rmi --force $(docker images --all --quiet); docker network rm $(docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none' | awk '{print $1}');
fi;


# Dockers Instances - Stop all Instances currently running
number_of_live_dockers=$(docker ps --quiet | awk '{print $1}' | wc -l);
printf "[ $number_of_live_dockers ] Instances Running - ";
if [ $number_of_live_dockers -gt 0 ]; then
  printf "Performing STOP on all Running Instances...\n";
  docker stop $(docker ps --quiet);
  printf "\n";
else
  printf "No Action Necessary\n";
fi;


# Docker Containers - Remove all Containers stored Locally
count_containers=$(docker ps --all --quiet | awk '{print $1}' | wc -l);
printf "[ $count_containers ] Containers Stored Locally - ";
if [ $count_containers -gt 0 ]; then
  printf "Performing REMOVE on all Local Containers...\n";
  docker rm --force $(docker ps --all --quiet);
  # docker rm --force $(docker stop $(docker ps --all --quiet)); 
  printf "\n";
else
  printf "No Action Necessary\n";
fi;


# Prune Images
count_prunable_images=$(docker images --all --quiet | wc -l);
count_prunable_skipOS_images=$(docker images --all | grep -v 'IMAGE' | grep -v 'centos' | grep -v  'openjdk' | grep -v  'postgres' | grep -v  'sonarqube' | awk '{print $3}' | wc -l);
printf "[ $count_prunable_images ] Dangling Images - ";
if [ $count_prunable_images -gt 0 ]; then
  printf "Performing PRUNE on all Dangling Images...\n";
  # docker rmi --force $(docker images --all | grep -v 'IMAGE' | grep -v 'centos' | grep -v  'openjdk' | grep -v  'postgres' | grep -v  'sonarqube' | awk '{print $3}');
  # docker rmi --force $(docker images --all | grep -v 'IMAGE' | awk '{print $3}');
  docker rmi --force $(docker images --all --quiet);
  printf "\n";
else
  printf "No Action Necessary\n";
fi;


# Prune Networks
# count_networks=$(docker network ls --quiet --filter driver=null | wc -l);
count_networks=$(docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none');
printf "[ ${count_networks} ] Networks Stored Locally - ";
if [ $count_networks -gt 0 ]; then
  printf "Performing PRUNE on all local networks...\n";
  # docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none';
  # docker network ls --quiet --filter driver=null;
  # docker network disconnect -f $(docker network ls | awk '{print $1}');
	docker network rm $(docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none' | awk '{print $1}');
  printf "\n";
else
  printf "No Action Necessary\n";
fi;


# Prune Volumes
echo -e "\nDocker Volume-Pruner -   Performing PRUNE on all Dangling volumes...\n"; docker volume prune -f; echo "";


exit 0;

