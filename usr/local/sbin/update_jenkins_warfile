#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/update_jenkins_warfile" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	
	# Backup the current Jenkins main-executable (jenkins.war)
	JENKINS_RUNTIME_DIRNAME="/usr/share/jenkins"; # Base-directory for Jenkins ".war" file
	JENKINS_RUNTIME_SYSTEM="${JENKINS_RUNTIME_DIRNAME}/jenkins.war";
	JENKINS_RUNTIME_BACKUP="${JENKINS_RUNTIME_SYSTEM}.$(date +'%Y%m%d_%H%M%S').bak";
	JENKINS_RUNTIME_DOWNLOADED="${JENKINS_RUNTIME_SYSTEM}.$(date +'%Y%m%d_%H%M%S').wget";

	# Download an updated version of the Jenkins main-executable (jenkins.war)
	echo "";
	echo "$(date +'%D  %r')   Downloading Latest version of Jenkins...";
	WGET_LOGFILE="${LOGFILE}.wget";
	if [ -f "${WGET_LOGFILE}" ]; then
		rm -f "${WGET_LOGFILE}";
	fi;
	DOWNLOAD_URL="https://updates.jenkins-ci.org/latest/jenkins.war";
	wget --quiet --server-response --output-document="${JENKINS_RUNTIME_DOWNLOADED}" --output-file="${WGET_LOGFILE}" "${DOWNLOAD_URL}";

	# Log the relevant info from the version which was just downloaded
	cat "${WGET_LOGFILE}";
	# printf "$(date +'%D  %r')   " && cat "${WGET_LOGFILE}" | grep "Location: ${DOWNLOAD_URL}";
	# printf "$(date +'%D  %r')   " && cat "${WGET_LOGFILE}" | grep "Last-Modified: ";
	rm -f "${WGET_LOGFILE}";

	# Verify that download actually downloaded more than 0 bytes
	DOWNLOAD_FILESIZE=$(du -sh "${JENKINS_RUNTIME_DOWNLOADED}" | awk '{print $1}');

	# Compare Jenkins Versions
	JENKINS_VERSION_SYSTEM=$(java -jar "${JENKINS_RUNTIME_SYSTEM}" --version | sed -rn --expression='s/^([0-9]{1,10}\.?)+[0-9]{1,10}$/\0/p');
	JENKINS_VERSION_DOWNLOADED=$(java -jar "${JENKINS_RUNTIME_DOWNLOADED}" --version | sed -rn --expression='s/^([0-9]{1,10}\.?)+[0-9]{1,10}$/\0/p'); 

	echo "";
	echo "$(date +'%D  %r')   DOWNLOAD_FILESIZE = \"${DOWNLOAD_FILESIZE}\"";
	if [ ! -n "${JENKINS_VERSION_DOWNLOADED}" ] || [ "${JENKINS_VERSION_DOWNLOADED}" == "" ]; then
		echo "";
		echo "$(date +'%D  %r')   Empty runtime detected: \"${JENKINS_RUNTIME_SYSTEM}\"";
		echo "$(date +'%D  %r')   Reverting to previous runtime: \"${JENKINS_RUNTIME_BACKUP}\"";

	else
		# Compare Jenkins Versions
		JENKINS_VERSION_SYSTEM=$(java -jar "${JENKINS_RUNTIME_SYSTEM}" --version);
		JENKINS_VERSION_DOWNLOADED=$(java -jar "${JENKINS_RUNTIME_DOWNLOADED}" --version);

		echo "";
		echo "$(date +'%D  %r')   JENKINS_VERSION_SYSTEM = \"${JENKINS_VERSION_SYSTEM}\"";
		echo "$(date +'%D  %r')   JENKINS_VERSION_DOWNLOADED = \"${JENKINS_VERSION_DOWNLOADED}\"";

		if [ "${JENKINS_VERSION_DOWNLOADED}" == "2.185" ]; then
			# Skip buggy Jenkins runtime(s)
			echo "";
			echo "$(date +'%D  %r')   NOTICE: Blocking downloaded Jenkins runtime";
			echo "$(date +'%D  %r')     |-->  Version: ${JENKINS_VERSION_DOWNLOADED}";
			echo "$(date +'%D  %r')     |-->  Reason: Has a bug (error) in its Java's SSH runtime which breaks ability to SSH into nodes as-intended (all nodes go offline)";

		# elif [ "${JENKINS_VERSION_DOWNLOADED}" == "OTHER-BUGGY-VERSION" ]; then
		# 	# Skip buggy Jenkins runtime(s)
		# 	echo "";
		# 	echo "$(date +'%D  %r')   NOTICE: Blocking downloaded Jenkins runtime";
		# 	echo "$(date +'%D  %r')     |-->  Version: OTHER-BUGGY-VERSION";
		# 	echo "$(date +'%D  %r')     |-->  Reason: Explanation of why this version is buggy and shouldn't be used in production";

		elif [ "${JENKINS_VERSION_SYSTEM}" == "${JENKINS_VERSION_DOWNLOADED}" ]; then
			# No update to version #
			echo "";
			echo "$(date +'%D  %r')   No update to jenkins version number detected (remained constant @ v${JENKINS_VERSION_SYSTEM})";

		else
			# Install the downloaded runtime

			# Backup [ a Version-stamped copy ] of [ the current jenkins runtime ]
			if [ ! -f "${JENKINS_RUNTIME_SYSTEM}.v${JENKINS_VERSION_SYSTEM}" ]; then
				cp --verbose --force "${JENKINS_RUNTIME_SYSTEM}" "${JENKINS_RUNTIME_SYSTEM}.v${JENKINS_VERSION_SYSTEM}";
			fi;

			# Backup [ a Version-stamped copy ] of [ the downloaded runtime ]
			if [ ! -f "${JENKINS_RUNTIME_SYSTEM}.v${JENKINS_VERSION_DOWNLOADED}" ]; then
				cp --verbose --force "${JENKINS_RUNTIME_DOWNLOADED}" "${JENKINS_RUNTIME_SYSTEM}.v${JENKINS_VERSION_DOWNLOADED}";
			fi;

			# Stop the Jenkins service (before updating its runtime warfile)
			echo "";
			echo "$(date +'%D  %r')   Calling [ systemctl stop jenkins; ]...";
			systemctl stop jenkins;
			
			# Replace Jenkins' runtime warfile with the newly downloaded runtime warfile
			mv --verbose --force "${JENKINS_RUNTIME_DOWNLOADED}" "${JENKINS_RUNTIME_SYSTEM}";

			# Start the Jenkins service (after updating its runtime warfile)
			echo "";
			echo "$(date +'%D  %r')   Calling [ systemctl start jenkins; ]...";
			systemctl start jenkins;

			# Reload NGINX (if found locally)
			if [ -n "$(which nginx)" ]; then
				if [ -f "$(which reload_nginx)" ]; then
					echo "";
					echo "$(date +'%D  %r')   Calling [ reload_nginx ]...";
					reload_nginx;
				else
					echo "";
					echo "$(date +'%D  %r')   Calling [ nginx -t && sleep 1 && service nginx reload; ]...";
					nginx -t && sleep 1 && service nginx reload;
				fi;
			else
				echo "";
				echo "$(date +'%D  %r')   Skipping NGINX service-restart (NGINX not found locally, e.g. calling [ which nginx ] returned nothing)";
			fi;

		fi;

	fi;

	# Exit Gracefully
	echo "";
	echo "$(date +'%D  %r')   Finished ${0}";
	exit 0;

fi;