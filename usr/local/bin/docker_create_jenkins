#!/bin/bash

# docker exec -i -t ${docker_name} -p 127.0.0.1:80:8080 /bin/bash;

REQUIRED_PKG="jq"; if [ -z "$(which ${REQUIRED_PKG} 2>'/dev/null')" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;


DOCKER_IMAGE_NAME="jenkinsci/blueocean";
DOCKER_IMAGE_TAGS=$(curl -s -S "https://registry.hub.docker.com/v1/repositories/${DOCKER_IMAGE_NAME}/tags" | jq -r ".[].name" 2>"/dev/null";); ERRORS_TAG_LOOKUP=$?;
if [ ${ERRORS_TAG_LOOKUP} -ne 0 ]; then
	echo "Error: No docker images found to match \"${DOCKER_IMAGE_NAME}\"";
	exit 1;
else

	echo "";
	echo "\${#DOCKER_IMAGE_TAGS} = [ ${#DOCKER_IMAGE_TAGS} ]";
	echo "";

	DOCKER_IMAGE_TAGS_SORTED=$(echo "${DOCKER_IMAGE_TAGS}" | sort -r);
	DOCKER_IMAGE_TAGS_SORTED_REV=$(echo "${DOCKER_IMAGE_TAGS}" | sort);

	unset ARR_TAG_OPTIONS; declare -A ARR_TAG_OPTIONS; # [Re-]Instantiate bash associative array (-A)

	EACH_KEY=0;
	# MIN_KEY=$((EACH_KEY+1));
	MIN_KEY=${EACH_KEY};
	for EACH_TAG in ${DOCKER_IMAGE_TAGS_SORTED[@]}; do
		ARR_TAG_OPTIONS+=(["${EACH_KEY}"]="${EACH_TAG}");
		EACH_KEY=$((EACH_KEY+1));
	done;
	MAX_KEY=$((${EACH_KEY}-1));

	# MENU_LENGTH=10;
	# if [ -n "$(which bc 2>'/dev/null')" ] && [ -n "$(which tput 2>'/dev/null')" ]; then
	# 	MENU_LENGTH=$(echo "$(tput lines) / 2" | bc);
	# fi;
	# IMAGES_MENU_OPTIONS=$(echo "${DOCKER_IMAGE_TAGS_SORTED}" | tail -n ${MENU_LENGTH});
	# echo "IMAGES_MENU_OPTIONS:";
	# echo "${IMAGES_MENU_OPTIONS}";

	if [ ${CHOICE_KEY} -le 0 ]; then
		echo "Error: No Containers found to be running - Please start a container then rerun \"${0}\"";
	else
		
		ARR_TAG_OPTIONS_NO_DUPES=($(echo "${ARR_TAG_OPTIONS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '));
		for EACH_KEY in "${!ARR_TAG_OPTIONS_NO_DUPES[@]}"; do
			EACH_TAG="${ARR_TAG_OPTIONS_NO_DUPES[${EACH_KEY}]}";
			echo "   ${EACH_KEY}	|  ${DOCKER_IMAGE_NAME}:${EACH_TAG}";
		done;

		ERROR_SUGGEST_HELP="  |--> Expected user-input to be of type [ integer ], with value between [ ${MIN_KEY} ] and [ ${MAX_KEY} ], inclusive";
		
		# Let the user determine which tag (image-revision) to build-from
		read -p "Select which Tag to build:  " -t 60 -r; READ_RET_CODE=$?;
		if [ ${READ_RET_CODE} -gt 128 ]; then
			# Error: Timeout reached for User-input ( from [ read --help ]: "The exit status is greater than 128 if the timeout is exceeded" )
			echo -e "Error: Response timed out""\n""${ERROR_SUGGEST_HELP}";

		elif [ -n "${REPLY}" ] && [[ ${REPLY} =~ ^-?[0-9]+$ ]] && [ ${REPLY} -ge ${MIN_KEY} ] && [ ${REPLY} -le ${MAX_KEY} ]; then
			USER_SELECTION_KEY=$((0+${REPLY}));
			if [ -z "${ARR_TAG_OPTIONS_NO_DUPES[${USER_SELECTION_KEY}]}" ]; then
				# Error: User-input key not found as an index within the Docker-Image-Tags array
				echo -e "Error: Invalid selection of \"${REPLY}\"""\n""${ERROR_SUGGEST_HELP}";

			else
				# Success - User selected a valid tag
				E1="LINES=$(tput lines)";
				E2="COLUMNS=$(tput cols)";
				DOCKER_IMAGE_WITH_TAG="${DOCKER_IMAGE_NAME}:${ARR_TAG_OPTIONS_NO_DUPES[${USER_SELECTION_KEY}]}";

				unset DOCKER_RUN_ARR; declare -a DOCKER_RUN_ARR; # [Re-]instantiate bash indexed array (-a)
				# DOCKER_RUN_ARR+=("-u root");
				DOCKER_RUN_ARR+=("--rm");
				DOCKER_RUN_ARR+=("-d");
				DOCKER_RUN_ARR+=("-p 8080:8080");
				# DOCKER_RUN_ARR+=("-p 50000:50000");
				# DOCKER_RUN_ARR+=("-v 'jenkins-data:/var/jenkins_home'");
				# DOCKER_RUN_ARR+=("-v '/var/run/docker.sock:/var/run/docker.sock'");
				DOCKER_RUN_ARR+=("${DOCKER_IMAGE_WITH_TAG}");

				echo -e "\n""Info: Calling [ docker run ${DOCKER_RUN_ARR[@]} ]...""\n";
				# docker run ${DOCKER_RUN_PARAMS};
				docker run ${DOCKER_RUN_ARR[@]};

			fi;

		else
			# Error: Malformed User-input (didn't meet criteria, above)
			echo -e "Error: Invalid/empty User-input""\n""${ERROR_SUGGEST_HELP}";

		fi;
	fi;

	# docker_name="jenkins_$(date +'%s')";
	# docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v "jenkins-data:/var/jenkins_home" -v "/var/run/docker.sock:/var/run/docker.sock" --name "${docker_name}" "jenkinsci/blueocean";
	# docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v "jenkins-data:/var/jenkins_home" -v "/var/run/docker.sock:/var/run/docker.sock" --name "${docker_name}" "jenkinsci/blueocean";
	# printf "    ===--  Started Docker:  ${docker_name}...\n"
	# printf "    ===--    Bashing Into:  ${docker_name}...\n"
	# docker exec -i -t ${docker_name} /bin/bash;

fi;



# ------------------------------------------------------------
# Citation(s)
# 
#   docs.docker.com  |  "docker search - Search the Docker Hub for images"  |  https://docs.docker.com/engine/reference/commandline/search/
#
# ------------------------------------------------------------