#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_pihole" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_pihole?t=$(date +'%s.%N')" | bash;

fi;
#
# ------------------------------------------------------------
#
# Spin-up pihole instance (using docker-compose)
#
# ------------------------------------------------------------
#
# Free-up port 53 by stopping service [ systemd-resolved ] from listening on it
#  |
#  |--> Update "/etc/systemd/resolved.conf"
#  |     |--> Uncomment "DNS=" line and set to "DNS=8.8.4.4"
#  |     |--> Uncomment "FallbackDNS=" line and set to "FallbackDNS=1.1.1.1"
#  |     |--> Uncomment "DNSStubListener=" line and set to "DNSStubListener=no"
#  |
#  |--> Redirect "/etc/resolv.conf"
#  |     |--> Run [ ln -sf "/run/systemd/resolve/resolv.conf" "/etc/resolv.conf"; ]
#  |
#  |--> Restart the machine via [ reboot ]
#
# ------------------------------------------------------------
#
# Spin-up the pihole docker (after port 53 is freed up)
#

if [ 1 -eq 1 ]; then

  # Check to see if any pihole dockers are currently running (before updating/removing/replacing them with a newer version)
  FIRST_REINSTALL_CONFIRMATION="";
  SECOND_REINSTALL_CONFIRMATION="";
    # Require a first round of user confirmations ('Y' or 'y' keypress) before reinstalling pihole over an already-running instance of pihole
    echo -e "";
    echo -e " ! !        ! !                                                   ! !        ! ! ";
    echo -e " ! ! NOTICE ! !  This will reinstall any existing pihole dockers  ! ! NOTICE ! ! ";
    echo -e " ! !   |    ! !   Make sure you've freed up port 53 on localhost  ! !        ! ! ";
    echo -e "       |  ";
    read -p "       |--> Are you sure you want to continue? (y/n)  " -a FIRST_REINSTALL_CONFIRMATION -n 1 -t 60 <'/dev/tty'; # Await single keypress
    echo -e "";
  fi;

  if [ ${RUNNING_PIHOLE_DOCKERS} -eq 0 ] || [[ "${FIRST_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then

    # Require a second round of user confirmations ('Y' or 'y' keypress) before reinstalling pihole over an already-running instance of pihole
    if [[ "${FIRST_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then
      echo -e "       |  ";
      read -p "       |--> Are you completely positive you want to continue? (y/n)  " -a SECOND_REINSTALL_CONFIRMATION -n 1 -t 60 <'/dev/tty'; # Await single keypress
      echo -e "\n";
    fi;
    
    if [ ${RUNNING_PIHOLE_DOCKERS} -eq 0 ] || [[ "${SECOND_REINSTALL_CONFIRMATION}" =~ ^[Yy]$ ]]; then

      # ------------------------------
      # Setup the config/networking/etc. directories to volume map to pihole
      CONFIG_DIR="/root/docker-configs/pihole";
      mkdir --parents --verbose "${CONFIG_DIR}";

      mkdir --parents --verbose "${CONFIG_DIR}/etc/pihole/";    # Volume-mapped into docker container
      mkdir --parents --verbose "${CONFIG_DIR}/etc/dnsmasq.d/"; # Volume-mapped into docker container

      # ------------------------------

      # Set the working directory
      cd "${CONFIG_DIR}";

      # ------------------------------

      # Download a base docker-compose YAML script (intended to be used for spinning up customized pihole containers)
      REMOTE_DOCKER_COMPOSE="https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/var/lib/docker-compose/docker-compose.pihole.yml";
      COMPOSE_FILE="${CONFIG_DIR}/docker-compose.yml";
      curl -sL "${REMOTE_DOCKER_COMPOSE}" -o "${COMPOSE_FILE}";
      chmod --verbose 0600 "${COMPOSE_FILE}";

      # ------------------------------

      # If any pihole containers are already running locally
      REVERT_RESOLV_CONF=0;
      if [ ${RUNNING_PIHOLE_DOCKERS} -gt 0 ]; then
        if [ $(sed -rne 's/^# (nameserver 8.8.4.4)$/\0/p' '/etc/resolv.conf' | wc -l 2>'/dev/null';) -gt 0 ]; then
          # Add Google DNS to local DNS resolvers before removing current pihole container (and ruining loopback DNS resolution, if active)
          echo -e "\n\nTemporarily enabling DNS nameserver \"8.8.4.4\" in \"/etc/resolv.conf\"\n\n";
          sed -re 's/^# (nameserver 8.8.4.4)$/\1/' -i "/etc/resolv.conf";
          REVERT_RESOLV_CONF=1;
        fi;
        # Remove existing pihole dockers
        docker_sniper "pihole";
        # Wait for local DNS resolution to recognize and update itself around the pihole DNS server going AWOL
        echo -e "\n\nSleeping for 30 seconds (to allow network resolution changes to propogate)...\n\n";
        sleep 30;
      fi;

      # ------------------------------
      # Spin up the pihole docker container
      if [ 1 -eq 1 ]; then
        echo -e "\n\nCalling [ cd \"${CONFIG_DIR}\"; docker-compose up --detach; ]...\n\n";
        cd "${CONFIG_DIR}";
        docker-compose up --detach;
      fi;

      # Stop pihole before freeing up port 53
      docker stop pihole;

      # Free up port 53 for pihole --> Stop the 'systemd-resolved' service in order to free up port 53 (DNS) so that pihole may create a listening thread on port 53, effectively reserving the port for the pihole service, locally
      systemctl stop systemd-resolved.service;
      systemctl disable systemd-resolved.service;

      # Start pihole back up once port 53 is available
      docker start pihole;

      # If we added a temporary DNS resolver's IP address (above) to /etc/resolv.conf, then now is the location in the script where it should be removed/cleaned-up (as it is only a workaround to download pihole's docker image while pihole itself doesn't exist to resolve DNS queries to find it)
      if [ ${REVERT_RESOLV_CONF} -eq 1 ]; then
        echo -e "\n\nDisabling DNS nameserver \"8.8.4.4\" from \"/etc/resolv.conf\"\n\n";
        sed -re 's/^(nameserver 8.8.4.4)$/# \1/' -i "/etc/resolv.conf";
      fi;

      # Update pihole's gravity database
      echo -e "\n\nUpdating pihole's gravity database...\n\n"
      docker exec "$(docker ps --all --quiet --filter "name=pihole";)" pihole updateGravity;

    fi;

  fi;

fi;


# 
# Set pihole file permissions as-intended
#   !!! PERFORM THESE STEPS MANUALLY  !!!
#
if [ 0 -eq 1 ]; then

# Bash into the docker
docker_bash_X;  # Download from [ https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/docker_bash_X ]

chown -R "pihole:pihole" "/etc/pihole/";
chown -R "pihole:pihole" "/etc/pihole/dhcp.leases";
chown -R "pihole:pihole" "/etc/pihole/gravity.db";
chown -R "pihole:pihole" "/etc/pihole/macvendor.db";
chown -R "pihole:root"   "/etc/pihole/pihole-FTL.conf";
chown -R "pihole:pihole" "/etc/pihole/pihole-FTL.db";

fi;

#
# Make sure pihole's "/etc/resolv.conf" contains line [ nameserver 127.0.0.1 ], to allow internal query-ing and adlist updating via [ pihole -g ]
#  |--> via Docker Volume-Map to [ /etc/resolv.conf ] with read-only attribute ":ro" (to avoid it being updated/reverted)
#


# ------------------------------------------------------------
#
# Citation(s)
#
#   discourse.pi-hole.net  |  "[Solved] While executing: attempt to write a readonly database error - Help / Community Help - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/solved-while-executing-attempt-to-write-a-readonly-database-error/33003/4
#
#   discourse.pi-hole.net  |  "Enabling HTTPS for your Pi-hole Web Interface - FAQs / Community How-to's - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/enabling-https-for-your-pi-hole-web-interface/5771
#
#   docs.pi-hole.net  |  "Overview of Pi-hole - Pi-hole documentation"  |  https://docs.pi-hole.net/
#
#   github.com  |  "GitHub - pi-hole/docker-pi-hole: Pi-hole in a docker container"  |  https://github.com/pi-hole/docker-pi-hole/
#
#   hub.docker.com  |  "pihole/pihole - Docker Hub"  |  https://hub.docker.com/r/pihole/pihole
#
#   www.linuxuprising.com  |  "Ubuntu: How To Free Up Port 53, Used By systemd-resolved - Linux Uprising Blog"  |  https://www.linuxuprising.com/2020/07/ubuntu-how-to-free-up-port-53-used-by.html
#
# ------------------------------------------------------------