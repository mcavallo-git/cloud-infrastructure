#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/speedtest_averaged" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT REMOTELY

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/speedtest_averaged?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/speedtest_averaged_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/speedtest_averaged"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Ensure that "speedtest" command exists
#
COMMAND_NAME="speedtest";
PACKAGE_NAME="speedtest-cli";
if [ -z "$(command -v ${COMMAND_NAME} 2>'/dev/null';)" ]; then
  echo "";
  echo "Info:  Installing command \"${COMMAND_NAME}\"...";
  sudo apt-get -y update;
  sudo apt-get -y install "${PACKAGE_NAME}";
fi;
#
# Ensure that "datamash" command exists
#
COMMAND_NAME="datamash";
PACKAGE_NAME="datamash";
if [ -z "$(command -v ${COMMAND_NAME} 2>'/dev/null';)" ]; then
  echo "";
  echo "Info:  Installing command \"${COMMAND_NAME}\"...";
  sudo apt-get -y update;
  sudo apt-get -y install "${PACKAGE_NAME}";
fi;

PUBLIC_IPV4="$(curl -sL -4 ihanhazip.com;)";
echo -e "\nPUBLIC_IPV4 = [ ${PUBLIC_IPV4} ]";

unset PING_RESULTS_ARR; declare -a PING_RESULTS_ARR; # [Re-]Instantiate bash array
unset DOWNLOAD_RESULTS_ARR; declare -a DOWNLOAD_RESULTS_ARR; # [Re-]Instantiate bash array
unset UPLOAD_RESULTS_ARR; declare -a UPLOAD_RESULTS_ARR; # [Re-]Instantiate bash array

FAILED_TESTS=0

LOOP_ITERATIONS=${LOOP_ITERATIONS:-10};
for i in $(seq ${LOOP_ITERATIONS}); do
  # Start a new speedtest
  echo -e "\n------------------------------";
  echo -e "Running speedtest #${i}/${LOOP_ITERATIONS}...\n";
  EACH_SPEEDTEST="$(speedtest --simple;)";
  # Parse ping duration
  EACH_PING_LINE="$(echo "${EACH_SPEEDTEST}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
  if [[ -n "${EACH_PING_LINE}" ]]; then
    EACH_PING_VAL="$(echo "${EACH_PING_LINE}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
    PING_RESULTS_ARR+=("${EACH_PING_VAL}");
    PING_UNITS="$(echo "${EACH_PING_LINE}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
    PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
    echo "$(printf "%-25s" "${EACH_PING_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Ping:     ${PING_AVG} ${PING_UNITS})"; fi;)";
  fi;
  # Parse download speed
  EACH_DOWNLOAD_LINE="$(echo "${EACH_SPEEDTEST}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
  if [[ -n "${EACH_DOWNLOAD_LINE}" ]]; then
    EACH_DOWNLOAD_VAL="$(echo "${EACH_DOWNLOAD_LINE}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
    DOWNLOAD_RESULTS_ARR+=("${EACH_DOWNLOAD_VAL}");
    DOWNLOAD_UNITS="$(echo "${EACH_DOWNLOAD_LINE}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
    DOWNLOAD_AVG="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
    echo "$(printf "%-25s" "${EACH_DOWNLOAD_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Download: ${DOWNLOAD_AVG} ${DOWNLOAD_UNITS})"; fi;)";
  fi;
  # Parse upload speed
  EACH_UPLOAD_LINE="$(echo "${EACH_SPEEDTEST}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
  if [[ -n "${EACH_UPLOAD_LINE}" ]]; then
    EACH_UPLOAD_VAL="$(echo "${EACH_UPLOAD_LINE}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
    UPLOAD_RESULTS_ARR+=("${EACH_UPLOAD_VAL}");
    UPLOAD_UNITS="$(echo "${EACH_UPLOAD_LINE}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
    UPLOAD_AVG="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
    echo "$(printf "%-25s" "${EACH_UPLOAD_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Upload:   ${UPLOAD_AVG} ${UPLOAD_UNITS})"; fi;)";
  fi;
  # Check if the run was a complete failure
  if [[ -z "${EACH_UPLOAD_LINE}" ]] && [[ -z "${EACH_DOWNLOAD_LINE}" ]] && [[ -z "${EACH_PING_LINE}" ]]; then
    FAILED_TESTS=$(( ${FAILED_TESTS:-0} + 1 ));
  fi;
done;

# ------------------------------
# Show final results

PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
DOWNLOAD_AVG="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
UPLOAD_AVG="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";

echo -e "\n------------------------------";
echo -e "Final speedtest results (averaged from above ${LOOP_ITERATIONS} speedtest iterations)...";
echo "";
echo "  Failed Tests:   ${FAILED_TESTS} out of ${LOOP_ITERATIONS} tests failed";
echo "";
echo "  Ping:     ${PING_AVG} ${PING_UNITS}";
echo "  Download: ${DOWNLOAD_AVG} ${DOWNLOAD_UNITS}";
echo "  Upload:   ${UPLOAD_AVG} ${UPLOAD_UNITS}";
echo "";
echo "------------------------------";

# ------------------------------


printf -- '-%.0s' {1..10}; printf " Script ended at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";


# ------------------------------------------------------------
#
# Citation(s)
# 
#   phoenixnap.com  |  "How to Test Network Speed in Linux {9 Tools} | phoenixNAP KB"  |  https://phoenixnap.com/kb/linux-network-speed-test
#
# ------------------------------------------------------------