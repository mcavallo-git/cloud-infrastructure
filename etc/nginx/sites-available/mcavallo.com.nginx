# ------------------------------------------------------------
#
#==--  mcavallo.com
#==--  www.mcavallo.com
#
server {
	listen 80;
	listen 443 ssl http2;
	listen [::]:80;
	listen [::]:443 ssl http2;
	server_name ~^(?<subdomain>.+\.)?mcavallo\.com$;
	if ($scheme != "https") {
		return 301 https://$host$request_uri; # Force request-upgrade from HTTP(80) to HTTPS(443)
	}
	access_log "/var/log/nginx/mcavallo-verbose.log" excessive;
	ssl_certificate "/etc/letsencrypt/live/mcavallo.com/fullchain.pem";
	ssl_certificate_key "/etc/letsencrypt/live/mcavallo.com/privkey.pem";
	ssl_trusted_certificate "/etc/letsencrypt/live/mcavallo.com/chain.pem";
	# ------------------------------------------------------------
	#        ~* [case-insensitive regex]
	location ~* ^/meta$ {
		if ($subdomain ~* "^api.$") {
			return 200 "rz.mcavallo.net\nusg.mcavallo.net\nlt.mcavallo.work\nws.mcavallo.work";
		}
		if ($subdomain !~* "^api.$") {
			return 302 https://$host;
		}
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^cashapp.$") {
		return 302 https://cash.me/mcavallo;
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	# if ($subdomain ~* "^cv.$") {
	# 	root /var/www/html/wordpress; # webroot
	# 	index index.php;
	# 	location / {
	# 		try_files $uri $uri/ /index.php?$args;
	# 	}
	#		         ~* [case-insensitive regex]
	# 	location ~* \.php$ { #  *.php requests
	# 		try_files $uri $uri/ /index.php?$args;
	# 		fastcgi_read_timeout 120;
	# 		fastcgi_index   index.php;
	# 		include         fastcgi_params;
	# 		fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
	# 		fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
	# 		fastcgi_pass    unix:/run/php/php7.2-fpm.sock;
	# 	}
	# }
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^git|repos.$") {
		return 302 https://github.com/mcavallo-git/repositories;
		# return 302 https://github.com/login?return_to=%2Fmcavallo-git%2Frepositories; # GitHub + Login
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^linkedin.$") {
		return 302 https://linkedin.com/in/matt-cavallo;
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^linux.$") {
		return 302 https://github.com/mcavallo-git/cloud-infrastructure#cloud-infrastructure; # GitHub
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^paypal.$") {
		return 302 https://www.paypal.me/cavalol; # Note: Use syntax  [ https://paypal.me/cavalol/25 ] to request $25 (example)
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	# if ($subdomain ~* "^resume.$") {
	# 	return 302 https://cv.mcavallo.com;
	# }
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^sync.$") {
		### Bash Module Sync
		return 302 https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure?t=$msec;
		#
		# curl -ssL cava.lol | bash
		#
		# curl -ssL "https://sync.mcavallo.com/$(date +'%s%N').sh" -H 'Cache-Control: no-store, no-cache, must-revalidate' | sudo bash;
		#
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^sync-ps.$") {
		### PowerShell Module Sync
		return 302 https://raw.githubusercontent.com/mcavallo-git/Coding/master/sync.ps1?t=$msec;
		#
		# Set-ExecutionPolicy -ExecutionPolicy "Bypass" -Scope "CurrentUser" -Force; $SyncTemp="${Env:TEMP}\sync.$($(Date).Ticks).ps1"; New-Item -ItemType "File" -Path ("${SyncTemp}") -Value (($(New-Object Net.WebClient).DownloadString("https://sync-ps.mcavallo.com/ps?t=$((Date).Ticks)"))) | Out-Null; . "${SyncTemp}"; Remove-Item "${SyncTemp}";
		#
		# New-Item -Path ("${Env:TEMP}\sync_cloud_infrastructure.ps1") -Value (($(New-Object Net.WebClient).DownloadString("https://sync-ps.mcavallo.com/ps"))) -Force | Out-Null; PowerShell -NoProfile -ExecutionPolicy Bypass ("${Env:TEMP}\sync_cloud_infrastructure.ps1"); Remove-Item -Path ("${Env:TEMP}\sync_cloud_infrastructure.ps1");
		#
	}
	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	if ($subdomain ~* "^venmo.$") {
		return 302 https://venmo.com/cavalol;
	}
	# ------------------------------------------------------------
	if ($request_uri = "/") {
		return 302 "https://github.com/mcavallo-git/Coding/blob/master/README.md#devops-resource-reference";
	}
	if ($request_uri = "/cloud-infrastructure") {
		return 302 "https://github.com/mcavallo-git/cloud-infrastructure";
	}
	if ($request_uri = "/coding") {
		return 302 "https://github.com/mcavallo-git/coding";
	}
	if ($request_uri = "/good-credit") {
		return 302 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/images/archive/credit-score-factors.jpg";
	}
	if ($request_uri = "/linux") {
		return 302 "https://github.com/mcavallo-git/cloud-infrastructure";
	}
	if ($request_uri = "/pc") {
		return 302 "https://pcpartpicker.com/user/cavalol/saved/7Q2Mcf";
	}
	if ($request_uri = "/repos") {
		return 302 "https://github.com/mcavallo-git/repositories";
	}

	include "/etc/nginx/nginx_error_locations.conf";

}


# ------------------------------------------------------------
### Enable NGINX Host
#
# DN="mcavallo.com"; NG="/etc/nginx/sites-available/${DN}.nginx"; echo "" > ${NG}; vi ${NG}; ln -sf ${NG} /etc/nginx/sites-enabled/${DN}; reload_nginx;
#
#
# ------------------------------------------------------------
### Create Wildcard LetsEncrypt Certs
#
# DN="mcavallo.com"; DL="${HOME}"; if [ -w "/usr/local/sbin" ]; then DL="/usr/local/sbin"; fi; wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/certbot_add_wildcard" -O "${DL}/certbot_add_wildcard" -q; chmod 0755 "${DL}/certbot_add_wildcard"; ${DL}/certbot_add_wildcard "${DN}"; test -x /usr/local/sbin/reload_nginx && /usr/local/sbin/reload_nginx;
#
#
# ------------------------------------------------------------
### Remove Domain(s) & Revoke Certificate(s)
###   |--> Deletes NGINX Files & Symlinks
###   |--> Deletes LetsEncrypt Files
###   |--> Revokes Certificate thru LetsEncrypt (Invalidates the certificate on the Certificate-Authority's end)
#
# FQDN="mcavallo.com"; certbot revoke --cert-path "/etc/letsencrypt/live/${FQDN}/fullchain.pem"; certbot delete --cert-name "${FQDN}"; find "/etc/letsencrypt/" -name "*${FQDN}*"; unlink "/etc/nginx/sites-enabled/${FQDN}"; certbot certificates;
#
#
# ------------------------------------------------------------
# Citation(s)
#
#   nginx.org  |  "Alphabetical index of variables"  |  http://nginx.org/en/docs/varindex.html
#
#   nginx.org  |  "NGINX - Core Module Variables"  |  http://nginx.org/en/docs/http/ngx_http_core_module.html#variables
#
#   serverfault.com  |  "Nginx redirect non-existant files on https to http with try_files"  |  https://serverfault.com/a/411955
#
#   serverfault.com  |  "Reply with 200 from Nginx config without serving a file"  |  https://serverfault.com/a/491817
#
#   stackoverflow.com  |  "nginx reverse proxy disable cache"  |  https://stackoverflow.com/a/56257749
#
#   stackoverflow.com  |  "Disable nginx cache for JavaScript files"  |  https://stackoverflow.com/a/45285696
#
# ------------------------------------------------------------