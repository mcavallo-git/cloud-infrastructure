#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/speedtest_averaged" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT REMOTELY

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/speedtest_averaged?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/speedtest_averaged_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/speedtest_averaged"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%dT%H%M%SZ';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Ensure that prerequisite packages are installed
#
unset PREREQ_CMD_PKG_ARR; declare -a PREREQ_CMD_PKG_ARR; # [Re-]Instantiate bash array
PREREQ_CMD_PKG_ARR+=("datamash|datamash");
PREREQ_CMD_PKG_ARR+=("jq|jq");
PREREQ_CMD_PKG_ARR+=("speedtest|speedtest-cli");
APT_UPDATE_PERFORMED=0;
for EACH_PREREQ_CMD_PKG in "${PREREQ_CMD_PKG_ARR[@]}"; do
  EACH_COMMAND="$(echo "${EACH_PREREQ_CMD_PKG}" | cut -d'|' -f1;)";
  EACH_PACKAGE="$(echo "${EACH_PREREQ_CMD_PKG}" | cut -d'|' -f2;)";
  if [ -z "$(command -v ${EACH_COMMAND} 2>'/dev/null';)" ]; then
    echo "";
    echo "Info:  Installing prerequisite package \"${EACH_PACKAGE}\" (contains command \"${EACH_COMMAND}\")...";
    if [[ "${APT_UPDATE_PERFORMED}" -eq 0 ]]; then
      sudo apt-get -y update;
      APT_UPDATE_PERFORMED=1;
    fi;
    sudo apt-get -y install "${EACH_PACKAGE}";
  fi;
done;

unset PING_RESULTS_ARR; declare -a PING_RESULTS_ARR; # [Re-]Instantiate bash array
unset DOWNLOAD_RESULTS_ARR; declare -a DOWNLOAD_RESULTS_ARR; # [Re-]Instantiate bash array
unset UPLOAD_RESULTS_ARR; declare -a UPLOAD_RESULTS_ARR; # [Re-]Instantiate bash array

FAILED_TESTS=0;

LOOP_ITERATIONS=${LOOP_ITERATIONS:-100};

TEST_OUTPUT="json"; # "json" or "simple"

# ------------------------------

if [[ "${TEST_OUTPUT}" == "json" ]]; then
  #
  # speedtest using "json" output parsing
  #
  DOWNLOAD_UNITS="Mbit/s";
  UPLOAD_UNITS="Mbit/s";
  PING_UNITS="ms";
  for i in $(seq ${LOOP_ITERATIONS}); do
    # Start a new speedtest
    echo -e "\n------------------------------";
    echo -e "Running speedtest # ${i}/${LOOP_ITERATIONS}...\n";
    EACH_SPEEDTEST_OUTPUT="$(speedtest --secure --json;)";
    # Parse download speed
    EACH_DOWNLOAD_BITRATE="$(echo "${EACH_SPEEDTEST_OUTPUT:-{\}}" | jq -r ".download" | grep -v '^null$';)";
    if [[ -n "${EACH_DOWNLOAD_BITRATE}" ]]; then
      EACH_DOWNLOAD_MEGABIT=$(echo "scale=4; (${EACH_DOWNLOAD_BITRATE})/(1048576)" | bc -l;);
      DOWNLOAD_RESULTS_ARR+=("${EACH_DOWNLOAD_MEGABIT}");
      DOWNLOAD_AVG="$(echo "scale=4; ($(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1;))/(1048576)" | bc -l;)";
      echo "Download: $(printf "%-25s" "${EACH_DOWNLOAD_MEGABIT} ${DOWNLOAD_UNITS}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg:  ${DOWNLOAD_AVG} ${DOWNLOAD_UNITS})"; fi;)";
    fi;
    # Parse upload speed
    EACH_UPLOAD_BITRATE="$(echo "${EACH_SPEEDTEST_OUTPUT:-{\}}" | jq -r ".upload" | grep -v '^null$';)";
    if [[ -n "${EACH_UPLOAD_BITRATE}" ]]; then
      EACH_UPLOAD_MEGABIT=$(echo "scale=4; (${EACH_UPLOAD_BITRATE})/(1048576)" | bc -l;);
      UPLOAD_RESULTS_ARR+=("${EACH_UPLOAD_MEGABIT}");
      UPLOAD_AVG="$(echo "scale=4; ($(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1;))/(1048576)" | bc -l;)";
      echo "Upload:   $(printf "%-25s" "${EACH_UPLOAD_MEGABIT} ${UPLOAD_UNITS}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg:  ${UPLOAD_AVG} ${UPLOAD_UNITS})"; fi;)";
    fi;
    # Parse ping duration
    EACH_PING_MS="$(echo "${EACH_SPEEDTEST_OUTPUT:-{\}}" | jq -r ".ping" | grep -v '^null$';)";
    if [[ -n "${EACH_PING_MS}" ]]; then
      PING_RESULTS_ARR+=("${EACH_PING_MS}");
      PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
      echo "Ping:     $(printf "%-25s" "${EACH_PING_MS} ${PING_UNITS}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg:  ${PING_AVG} ${PING_UNITS})"; fi;)";
    fi;
    # Get WAN IPv4 & ISP info
    EACH_WAN_IP="$(echo "${EACH_SPEEDTEST_OUTPUT:-{\}}" | jq -r ".client.ip" | grep -v '^null$';)";
    EACH_ISP_NAME="$(echo "${EACH_SPEEDTEST_OUTPUT:-{\}}" | jq -r ".client.isp" | grep -v '^null$';)";
    if [[ -n "${EACH_WAN_IP}" ]] && [[ -n "${EACH_ISP_NAME}" ]]; then
      echo "WAN IP:   $(printf "%-20s" "${EACH_WAN_IP}";)  (ISP:  ${EACH_ISP_NAME})";
    fi;
    # Check if the run was a complete failure
    if [[ -z "${EACH_UPLOAD_LINE}" ]] && [[ -z "${EACH_DOWNLOAD_LINE}" ]] && [[ -z "${EACH_PING_LINE}" ]]; then
      FAILED_TESTS=$(( ${FAILED_TESTS:-0} + 1 ));
    fi;
  done;

  DOWNLOAD_AVG="$(echo "scale=4; ($(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1;))/(1048576)" | bc -l;)";
  DOWNLOAD_MAX="$(echo "scale=4; ($(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1;))/(1048576)" | bc -l;)";
  DOWNLOAD_MIN="$(echo "scale=4; ($(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1;))/(1048576)" | bc -l;)";

  UPLOAD_AVG="$(echo "scale=4; ($(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1;))/(1048576)" | bc -l;)";
  UPLOAD_MAX="$(echo "scale=4; ($(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1;))/(1048576)" | bc -l;)";
  UPLOAD_MIN="$(echo "scale=4; ($(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1;))/(1048576)" | bc -l;)";

  PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
  PING_MAX="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1 --round=2;)";
  PING_MIN="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1 --round=2;)";

# ------------------------------

elif [[ "${TEST_OUTPUT}" == "simple" ]]; then
  #
  # speedtest using "simple" output parsing
  #
  PUBLIC_IPV4="$(curl -sL -4 icanhazip.com;)";
  echo -e "\nPUBLIC_IPV4 = [ ${PUBLIC_IPV4} ]";
  if [[ 0 -eq 1 ]]; then
    for i in $(seq ${LOOP_ITERATIONS}); do
      # Start a new speedtest
      echo -e "\n------------------------------";
      echo -e "Running speedtest # ${i}/${LOOP_ITERATIONS}...\n";
      EACH_SPEEDTEST_OUTPUT="$(speedtest --secure --simple;)";
      # Parse download speed
      EACH_DOWNLOAD_LINE="$(echo "${EACH_SPEEDTEST_OUTPUT}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
      if [[ -n "${EACH_DOWNLOAD_LINE}" ]]; then
        EACH_DOWNLOAD_VAL="$(echo "${EACH_DOWNLOAD_LINE}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
        DOWNLOAD_RESULTS_ARR+=("${EACH_DOWNLOAD_VAL}");
        DOWNLOAD_UNITS="$(echo "${EACH_DOWNLOAD_LINE}" | sed -rne "s/^Download:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
        DOWNLOAD_AVG="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
        echo "$(printf "%-25s" "${EACH_DOWNLOAD_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Download: ${DOWNLOAD_AVG} ${DOWNLOAD_UNITS})"; fi;)";
      fi;
      # Parse upload speed
      EACH_UPLOAD_LINE="$(echo "${EACH_SPEEDTEST_OUTPUT}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
      if [[ -n "${EACH_UPLOAD_LINE}" ]]; then
        EACH_UPLOAD_VAL="$(echo "${EACH_UPLOAD_LINE}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
        UPLOAD_RESULTS_ARR+=("${EACH_UPLOAD_VAL}");
        UPLOAD_UNITS="$(echo "${EACH_UPLOAD_LINE}" | sed -rne "s/^Upload:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
        UPLOAD_AVG="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
        echo "$(printf "%-25s" "${EACH_UPLOAD_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Upload:   ${UPLOAD_AVG} ${UPLOAD_UNITS})"; fi;)";
      fi;
      # Parse ping duration
      EACH_PING_LINE="$(echo "${EACH_SPEEDTEST_OUTPUT}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\0/p";)";
      if [[ -n "${EACH_PING_LINE}" ]]; then
        EACH_PING_VAL="$(echo "${EACH_PING_LINE}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\1/p";)";
        PING_RESULTS_ARR+=("${EACH_PING_VAL}");
        PING_UNITS="$(echo "${EACH_PING_LINE}" | sed -rne "s/^Ping:\s+([^\s]+)\s+(.+)\s*$/\2/p";)";
        PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
        echo "$(printf "%-25s" "${EACH_PING_LINE}";)  $(if [[ "${i}" -ne 1 ]]; then echo "(Avg Ping:     ${PING_AVG} ${PING_UNITS})"; fi;)";
      fi;
      # Check if the run was a complete failure
      if [[ -z "${EACH_UPLOAD_LINE}" ]] && [[ -z "${EACH_DOWNLOAD_LINE}" ]] && [[ -z "${EACH_PING_LINE}" ]]; then
        FAILED_TESTS=$(( ${FAILED_TESTS:-0} + 1 ));
      fi;
    done;
  fi;

  DOWNLOAD_AVG="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
  DOWNLOAD_MAX="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1 --round=2;)";
  DOWNLOAD_MIN="$(echo "${DOWNLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1 --round=2;)";

  UPLOAD_AVG="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
  UPLOAD_MAX="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1 --round=2;)";
  UPLOAD_MIN="$(echo "${UPLOAD_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1 --round=2;)";

  PING_AVG="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash mean 1 --round=2;)";
  PING_MAX="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash max 1 --round=2;)";
  PING_MIN="$(echo "${PING_RESULTS_ARR[@]}" | tr " " "\n" | datamash min 1 --round=2;)";

# ------------------------------

else

  echo "";
  echo "Error - Output parsing type \"${TEST_OUTPUT}\" not handled";

fi;

# ------------------------------
# Show final results

echo "";
echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";
echo "";
echo -n " Results:";
  echo -n "$(printf "%15s" "${LOOP_ITERATIONS} test(s)";) were initiated";
  echo -n "$(printf "%20s" "${FAILED_TESTS} test(s)";) either failed or had errors";
  echo -e "\n";
echo "  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";
echo "";

echo -n "   $(printf "%-12s" "Download:";)";
  echo -n "$(printf "%15s" "${DOWNLOAD_AVG} ${DOWNLOAD_UNITS}";) (Avg)";
  echo -n "$(printf "%20s" "${DOWNLOAD_MAX} ${DOWNLOAD_UNITS}";) (Max)";
  echo -n "$(printf "%20s" "${DOWNLOAD_MIN} ${DOWNLOAD_UNITS}";) (Min)";
  echo -e "\n";

echo "  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";
echo "";

echo -n "   $(printf "%-12s" "Upload:";)";
  echo -n "$(printf "%15s" "${UPLOAD_AVG} ${UPLOAD_UNITS}";) (Avg)";
  echo -n "$(printf "%20s" "${UPLOAD_MAX} ${UPLOAD_UNITS}";) (Max)";
  echo -n "$(printf "%20s" "${UPLOAD_MIN} ${UPLOAD_UNITS}";) (Min)";
  echo -e "\n";

echo "  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";
echo "";

echo -n "   $(printf "%-12s" "Ping:";)";
  echo -n "$(printf "%15s" "${PING_AVG} ${PING_UNITS}";) (Avg)";
  echo -n "$(printf "%20s" "${PING_MAX} ${PING_UNITS}";) (Max)";
  echo -n "$(printf "%20s" "${PING_MIN} ${PING_UNITS}";) (Min)";
  echo -e "\n";

echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";

# ------------------------------

# Exit cleanly
printf -- '-%.0s' {1..10}; printf " Script ended at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";


# ------------------------------------------------------------
#
# Citation(s)
# 
#   phoenixnap.com  |  "How to Test Network Speed in Linux {9 Tools} | phoenixNAP KB"  |  https://phoenixnap.com/kb/linux-network-speed-test
#
# ------------------------------------------------------------