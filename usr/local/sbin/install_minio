#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_minio" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_minio?t=$(date --utc +'%s.%N';)" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_minio_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_minio"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  RET_CODE=1;
  if [ -n "$(which mc)" ]; then
    echo "Info: Skipping install of [ mc ] command - Calling [ which mc ] returned [ $(which mc) ";

  elif [ -f "/usr/local/bin/mc" ]; then
    echo "Info: Skipping install of [ mc ] command - File \"/usr/local/bin/mc\" already exists";

  else
    # Download MC (as-per reccommend by MinIO Guide ( see Citation(s), below )
    echo "Info: Adding MinIO management package - Call using command [ mc ]";
    curl -sL "https://dl.min.io/client/mc/release/linux-amd64/mc" -o "/usr/local/bin/mc" && chmod 0755 "/usr/local/bin/mc";

  fi;

  # Ensure that docker is installed
  curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_docker?t=$(date --utc +'%s.%N';)" | bash;

  # Ensure the docker-service is started
  SERVICE_NAME="docker";
  /usr/sbin/service "${SERVICE_NAME}" start;

  # Pull & Spin-up the MINIO server as a docker container ( pulls from https://hub.docker.com/r/minio/minio/ )
  PORT_MINIO="9000"; DIR_MINIO_DATA="/data"; docker run -d --name "minio" -p "${PORT_MINIO}:9000" "minio/minio" "server" "${DIR_MINIO_DATA}";

# Locate Min-IO Config file(s)
find \
/var/lib/docker/volumes/*/_data/.minio.sys/config/config.json \
-type f \
-exec echo -e "\n""Found MinIO config.json:" \; \
-exec echo -e "|""\n""Filepath" \; \
-exec echo -e "------------------------------------------------------------" \; \
-exec echo -e '{}' \; \
-exec echo -e "------------------------------------------------------------"\n"" \; \
-exec echo -e "|""\n""Contents" \; \
-exec echo -e "------------------------------------------------------------" \; \
-exec cat '{}' \; \
-exec echo -e "\n""------------------------------------------------------------""\n" \; \
;

# wget https://dl.min.io/client/mc/release/linux-amd64/mc
# chmod +x mc
# ./mc --help

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   docs.min.io  |  "MinIO Admin Complete Guide"  |  https://docs.min.io/docs/minio-admin-complete-guide.html
#
#   docs.min.io  |  "MinIO Server Config Guide"  |  https://docs.min.io/docs/minio-server-configuration-guide.html
#
#   docs.min.io  |  "MinIO | Learn how to secure access to MinIO server with TLS"  |  https://docs.min.io/docs/how-to-secure-access-to-minio-server-with-tls.html
#
#   www.civo.com  |  "Create a multi-user MinIO server as a private S3 compatible object host - Civo.com"  |  https://www.civo.com/learn/create-a-multi-user-minio-server-for-s3-compatible-object-hosting
#
#   www.digitalocean.com  |  "How to Set Up an Object Storage Server Using Minio on Ubuntu 16.04 | DigitalOcean"  |  https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-16-04
#
# ------------------------------------------------------------