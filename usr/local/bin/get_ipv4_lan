#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/get_ipv4_lan" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/get_ipv4_lan?t=$(date +'%s.%N')" | bash; # Non-Verbose (LAN IPv4, only)

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/get_ipv4_lan?t=$(date +'%s.%N')" | bash -s -- --verbose; # Verbose (LAN IPv4 + Netmask + NIC + Gateway IPv4)


fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile

if [ -n "$1" ] && [[ "$1" == *"log"* ]]; then # log this script's output

LOGDIR="${HOME}/get_ipv4_lan_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/get_ipv4_lan"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;

fi;

# ------------------------------------------------------------

shopt -s lastpipe; # If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.
          # |
          # |--> e.g. extends scope of variables which get set/updated during "while ...; do" loop to be referenced AFTER said loop is "done;"
          #           (normally, variables set during background tasks are scoped separately, and not able to be referenced afterwards)


# ------------------------------------------------------------
# Determine LAN IPv4
#

START_TIMESTAMP="$(date +'%Y%m%d_%H%M%S')";

LOOPBACK_IPV4="127.0.0.1";

PRIVATE_IP_SUBNET="169.254.0.0/16'";

REGEX_IPV4='(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))';

if [ -n "$(which ip 2>'/dev/null')" ]; then # ------------------------------------------------------------

  ### Get LAN-Local's Gateway IPv4
  THIS_GATEWAY_IPV4=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\1/p");

  ### Get LAN-Local IPv4(s) - One per NIC
  THIS_LAN_NIC=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\2/p");

  ### Get LAN-Local IPv4, as well as LAN-Local IPv6 (if exists)
  THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.' 2>'/dev/null';); # THIS_IPv4
  THIS_LAN_NETMASK=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/^.*\///' 2>'/dev/null';);

elif [ -n "$(which ifconfig 2>'/dev/null')" ]; then # ------------------------------------------------------------

  SED_LINE='s/^\s*inet\s+'${REGEX_IPV4}'\s+netmask\s+'${REGEX_IPV4}'\s+broadcast\s+'${REGEX_IPV4}'\s*$/\0/p';
  SED_INET='s/^\s*inet\s+'${REGEX_IPV4}'\s+netmask\s+'${REGEX_IPV4}'\s+broadcast\s+'${REGEX_IPV4}'\s*$/\1/p';
  SED_NETMASK='s/^\s*inet\s+'${REGEX_IPV4}'\s+netmask\s+'${REGEX_IPV4}'\s+broadcast\s+'${REGEX_IPV4}'\s*$/\5/p';
  SED_BROADCAST='s/^\s*inet\s+'${REGEX_IPV4}'\s+netmask\s+'${REGEX_IPV4}'\s+broadcast\s+'${REGEX_IPV4}'\s*$/\9/p';

  ifconfig | while read EACH_LINE; do
    EACH_SED_LINE=$(echo "${EACH_LINE}" | sed -rne "${SED_LINE}";);

    # Parse the LAN IPv4 ("inet") from the ifconfig string
    EACH_INET=$(echo "${EACH_LINE}" | sed -rne "${SED_INET}";);

    if [ -n "${EACH_INET}" ] && [ "${EACH_INET}" != "${LOOPBACK_IPV4}" ]; then
      # If the parsed IPv4 is not a loopback IPv4, then save it
      THIS_LAN_IPV4="${EACH_INET}";

      # Parse the Netmask & Broadcast from the ifconfig string
      EACH_NETMASK=$(echo "${EACH_LINE}" | sed -rne "${SED_NETMASK}";);
      EACH_BROADCAST=$(echo "${EACH_LINE}" | sed -rne "${SED_BROADCAST}";);
      if [ -n "${EACH_NETMASK}" ] && [ -n "${EACH_BROADCAST}" ]; then
        THIS_LAN_NETMASK="${EACH_NETMASK}";
        THIS_LAN_BROADCAST="${EACH_BROADCAST}";
      fi;

    fi;

  done;

fi;


# ------------------------------------------------------------
# Export Variable(s)
#

test -v THIS_GATEWAY_IPV4 && export THIS_GATEWAY_IPV4="${THIS_GATEWAY_IPV4}";
test -v THIS_LAN_BROADCAST && export THIS_LAN_BROADCAST="${THIS_LAN_BROADCAST}";
test -v THIS_LAN_NETMASK && export THIS_LAN_NETMASK="${THIS_LAN_NETMASK}";
test -v THIS_LAN_NIC && export THIS_LAN_NIC="${THIS_LAN_NIC}";
test -v THIS_LAN_IPV4 && export THIS_LAN_IPV4="${THIS_LAN_IPV4}";

if [ "$1" == "-v" ] || [ "$1" == "--verbose" ]; then
  # "Verbose" output (show any variables which were detected in networing environment - gateway, broadcast, nic, etc.)
  test -v THIS_GATEWAY_IPV4 && echo -e "\n${THIS_GATEWAY_IPV4}  <-- Gateway IPv4, exported as \$THIS_GATEWAY_IPV4";
  test -v THIS_LAN_BROADCAST && echo -e "\n${THIS_LAN_BROADCAST}  <-- LAN Broadcast, exported as \$THIS_LAN_BROADCAST";
  test -v THIS_LAN_NETMASK && echo -e "\n${THIS_LAN_NETMASK}  <-- LAN NetMask, exported as \$THIS_LAN_NETMASK";
  test -v THIS_LAN_NIC && echo -e "\n${THIS_LAN_NIC}  <-- LAN NIC, exported as \$THIS_LAN_NIC";
  test -v THIS_LAN_IPV4 && echo -e "\n${THIS_LAN_IPV4}  <-- LAN IPv4, exported as \$THIS_LAN_IPV4";

elif [ "$1" == "-q" ] || [ "$1" == "--quiet" ]; then
  # "Quiet" output (lan ipv4 w/ NO trailing newline)
  if [ -v THIS_LAN_IPV4 ] && [ -n "${THIS_LAN_IPV4}" ]; then
    echo -n "${THIS_LAN_IPV4}";
  fi;

else
  # "Normal" output (lan ipv4 w/ newline)
  if [ -v THIS_LAN_IPV4 ] && [ -n "${THIS_LAN_IPV4}" ]; then
    echo "${THIS_LAN_IPV4}";
  fi;

fi;


# ------------------------------------------------------------
# Exit with appropriate return-code
#

if [ -v THIS_LAN_IPV4 ] && [ -n "${THIS_LAN_IPV4}" ]; then
  exit 0;
else
  exit 1;
fi;


# ------------------------------------------------------------
# 
# Citation(s)
# 
#   serverfault.com  |  "Where does the route to 169.254.0.0 comes from?"  |  https://serverfault.com/a/132716
# 
# ------------------------------------------------------------