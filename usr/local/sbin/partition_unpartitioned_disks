#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/partition_unpartitioned_disks" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# test -v SUDO_USER && partition_unpartitioned_disks --user $SUDO_USER --allow;
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Partition un-partitioned disk(s) && add volumes to empty disks which use their whole disk-space
	ROLLBACK_IFS="${IFS}"; IFS=$'\n';
	for EACH_LINE in $(parted -lms 2>&1 | grep -i ^/;); do \
	EACH_DISK_DEVICE=$(echo "${EACH_LINE}" | cut -d':' -f1;);
	EACH_DISK_SIZE=$(echo "${EACH_LINE}" | cut -d':' -f2;);
	EACH_PARTITION_TABLE=$(echo "${EACH_LINE}" | cut -d':' -f6;);
	# Create disk partition-tables
	if [ "${EACH_PARTITION_TABLE}" == "unknown" ]; then
		echo "Info:  Partitioning  [  ${EACH_DISK_DEVICE}  ]  as 'msdos'...";
		parted -s "${EACH_DISK_DEVICE}" mklabel 'msdos';
	else
		echo "Info:  Skipping disk-partitioning for device  [  ${EACH_DISK_DEVICE}  ]  (already partitioned as ${EACH_PARTITION_TABLE})"
	fi;
	# Create disk volumes
	EACH_DISK_VOLUME_COUNT="$(parted -s ${EACH_DISK_DEVICE} print 2>&1 | grep -E '^\s+[0-9]\s' | wc -l;)";
	if [ "${EACH_DISK_VOLUME_COUNT}" == "0" ]; then
		echo "Info:  Creating volume  [ ${EACH_DISK_SIZE} ] on device  [  ${EACH_DISK_DEVICE}  ]  w/ using filesystem-type  [ ext4 ]...";
		parted -s "${EACH_DISK_DEVICE}" mkpart "primary" "ext4" 0 "${EACH_DISK_SIZE}";
	else
		echo "Info:  Skipping volume-creation for device  [  ${EACH_DISK_DEVICE}  ]  (already contains  [ ${EACH_DISK_VOLUME_COUNT} ]  volume(s))"
	fi;
	done; IFS="${ROLLBACK_IFS}";

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   access.redhat.com  |  "Chapter 7. Kernel crash dump guide Red Hat Enterprise Linux 7 | Red Hat Customer Portal"  |  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/kernel_administration_guide/kernel_crash_dump_guide
#
#   help.ubuntu.com  |  "Kernel Crash Dump"  |  https://help.ubuntu.com/lts/serverguide/kernel-crash-dump.html
#
#   linux.die.net  |  "parted(8): partition change program - Linux man page"  |  https://linux.die.net/man/8/parted
#
#   opensource.com  |  "How to partition a disk in Linux | Opensource.com"  |  https://opensource.com/article/18/6/how-partition-disk-linux
#
# ------------------------------------------------------------