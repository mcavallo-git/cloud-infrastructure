#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_pwsh" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_pwsh?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# LOCAL_SBIN="/usr/local/sbin/install_pwsh" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_pwsh_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_pwsh"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  if [ -n "$(command -v pwsh 2>'/dev/null';)" ]; then
    echo "";
    echo "Info:  pwsh (PowerShell Core) already installed - getting version...";
    pwsh --version;
  else
    VALID_OS=0;
    if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then
      #
      #   Ubuntu Environment
      #

      #
      # Add/update the [ Microsoft's Linux Software Repository ] onto the list of known/trusted package repos
      #

      # Get local distro's major version
      OS_VERSION_MAJOR=$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\1/p';);
      # Get local distro's minor version
      OS_VERSION_MINOR=$(LENGTH="2"; echo "$(printf "%0${LENGTH}d" "$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\2/p';)";)";);
      # Build the package repo url based off of current distro's versioning info
      DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/${OS_VERSION_MAJOR}.${OS_VERSION_MINOR}/packages-microsoft-prod.deb";
      # Determine if there is a url endpoint ready to handle requests for the current OS
      RESPONSE_HTTP_CODE="$(curl -ILs "${DOWNLOAD_URL}" | grep '^HTTP/' | tail -n 1 | awk '{print $2}';)";
      if [[ "${RESPONSE_HTTP_CODE}" -eq 200 ]]; then
        # Microsoft Hosted Package Repository EXISTS for the current distro
        VALID_OS=1;
        # Remove any existing instances of the package repo (to remove deprecated ones)
        cd "${HOME}";
        dpkg --purge "packages-microsoft-prod" 2>'/dev/null';
        rm -fv "packages-microsoft-prod.deb" 2>'/dev/null';
        # Download the latest reference to the package repo
        wget -q "${DOWNLOAD_URL}" -O "$(basename "${DOWNLOAD_URL}";)";
        # Add/Update local references to the downloaded package repo references
        dpkg --install "$(basename "${DOWNLOAD_URL}";)";
        # Cleanup the downloaded file
        rm -fv "$(basename "${DOWNLOAD_URL}";)";
        # Install pwsh (PowerShell Core)
        apt-get -y update;
        apt-get -y install "apt-transport-https" "software-properties-common";
        apt-get -y update;
        apt-get -y install "powershell";
        # snap install powershell --classic; # Microsoft:  "PowerShell Core, for Linux, is published to the Snap store for easy installation (and updates). This is the preferred method."
      fi;
    fi;
    if [[ "${VALID_OS}" -eq 0 ]]; then
      #
      # Error:  Unhandled Linux distribution
      #
      echo "";
      echo "Error:  Unhandled Linux distribution:";
      echo "------------------------------------------------------------";
      cat /etc/*release;
      echo "------------------------------------------------------------";
      echo "";
      echo "Info:  Please refer Microsoft's tutorial page for installing PowerShell Core on Linux @:";
      echo " |    ";
      echo " |--> https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux";
      echo "";
      echo "------------------------------------------------------------";
    fi;
    if [ -n "$(command -v pwsh 2>'/dev/null';)" ]; then
      echo "";
      echo "Info:  pwsh (PowerShell Core) installed - getting version...";
      pwsh --version;
    fi;
  fi;
  # pwsh; # Start PowerShell
fi;


# -------------------------------------------------------------
#
# Citation(s)
#
#   docs.microsoft.com  |  "Installing PowerShell Core on Linux"  |  https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux
#
#   docs.microsoft.com  |  "Installing PowerShell on Ubuntu - PowerShell | Microsoft Docs"  |  https://docs.microsoft.com/en-us/powershell/scripting/install/install-ubuntu
#
# ------------------------------------------------------------