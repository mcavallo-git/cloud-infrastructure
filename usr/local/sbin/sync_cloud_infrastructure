#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/sync_cloud_infrastructure" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
# Sync 1-Liner ( See:  https://github.com/mcavallo-git/cloud-infrastructure/blob/master/README.md )
#
if [ 0 -eq 1 ]; then

wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure" -O "/usr/local/sbin/sync_cloud_infrastructure" -q && chmod 0755 "/usr/local/sbin/sync_cloud_infrastructure" && /usr/local/sbin/sync_cloud_infrastructure --all;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Instantiate runtime variables
	
	START_SECONDS_NANOSECONDS=$(date +'%s.%N');
	START_EPOCHSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1);
	# START_NANOSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
	# START_MICROSECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-6);
	# START_MILLISECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-3);
	START_DATETIME="$(date --date=@${START_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S')";
	START_TIMESTAMP="$(date --date=@${START_EPOCHSECONDS} +'%Y%m%d_%H%M%S')";

	GIT_SOURCE_REPO_URL="";

	DEFAULT_GIT_SOURCE_REPO_URL="https://github.com/mcavallo-git/cloud-infrastructure.git";

	DIRNAME_LOCAL_CONFIG="/etc/sync_cloud_infrastructure";

	# ------------------------------------------------------------
	# Make sure the Config directory exists (create it if it doesn't)
	if [ ! -d "${DIRNAME_LOCAL_CONFIG}" ]; then
		mkdir -p "${DIRNAME_LOCAL_CONFIG}";
	fi;
	if [ -d "${DIRNAME_LOCAL_CONFIG}" ] && [ -n "$(which stat;)" ] && [ "$(stat --format '%a' ${DIRNAME_LOCAL_CONFIG})" != "755" ]; then
		chmod 755	"${DIRNAME_LOCAL_CONFIG}";
	fi;

	# Get the Git Source-Repo from the local device's config
	FILEPATH_GIT_SOURCE_REPO_URL="${DIRNAME_LOCAL_CONFIG}/git_source_repo.url";
	GIT_SOURCE_REPO_URL="${DEFAULT_GIT_SOURCE_REPO_URL}";
	if [ -f "${FILEPATH_GIT_SOURCE_REPO_URL}" ]; then
		GIT_SOURCE_REPO_URL="$(cat ${FILEPATH_GIT_SOURCE_REPO_URL};)";
	fi; 

	# Fall-back to the default Git-Repo if none is defined, locally
	if [ -z "${GIT_SOURCE_REPO_URL}" ]; then
		GIT_SOURCE_REPO_URL="${DEFAULT_GIT_SOURCE_REPO_URL}";
	fi;

	GIT_REPO_OWNER="$(basename $(dirname ${GIT_SOURCE_REPO_URL};);)";
	GIT_REPO_NAME="$(basename ${GIT_SOURCE_REPO_URL} | cut -d. -f1;)";

	# ------------------------------------------------------------
	EXIT_CODE=1; # Set status to fail by-default, and only proceed if a known good-status is reached

	GIT_LOCAL_PARENT_PATH="${HOME}/Documents/GitHub";

	GIT_LOCAL_REPO_PATH="${GIT_LOCAL_PARENT_PATH}/${GIT_REPO_NAME}/";

	WIN32_HOMEDIR="";

	DIR_REPO_BASE="";


	# ------------------------------------------------------------
	# Make sure required runtime(s) are installed
	REQUIRED_PKG="bc"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;
	REQUIRED_PKG="cron"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;
	REQUIRED_PKG="dos2unix"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;
	REQUIRED_PKG="git"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;
	REQUIRED_PKG="rsync"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;
	REQUIRED_PKG="vim"; if [ -z "$(which ${REQUIRED_PKG})" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;


	# ------------------------------------------------------------
	# If this script's last-modified date was more than 60-seconds ago, update it before proceeding

	if [ -f '/usr/local/sbin/sync_cloud_infrastructure' ] && [ $(echo "$(date +'%s') - 60 > $(stat -c '%Y' '/usr/local/sbin/sync_cloud_infrastructure')" | bc) -eq 1 ]; then
		#####  Sync 1-liner  →  Pull the raw version of the file directly out of GitHub
		echo -e "\n""Info: Pulling latest \"/usr/local/sbin/sync_cloud_infrastructure\" from GitHub (last-modified date was more-than 60s ago)";
		BENCHMARK_START=$(date +'%s.%N');
		wget "https://raw.githubusercontent.com/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/master/usr/local/sbin/sync_cloud_infrastructure" -O "/usr/local/sbin/sync_cloud_infrastructure" -q;
		
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		echo "  |→ Finished after ${BENCHMARK_DELTA}s";

		chmod 0755 "/usr/local/sbin/sync_cloud_infrastructure";
		"/usr/local/sbin/sync_cloud_infrastructure" $@;
		exit 0;
	fi;


	# ------------------------------------------------------------
	# Parse inline arguments (passed to current script)

	ARGS=("$@");
	ARGS_COUNT=${#ARGS[@]};

	ARGS_CHECK_WSL=0;
	ARGS_CRONJOB="";
	ARGS_DEBUG_MODE=0;
	ARGS_REMOVE_CRONJOBS=0;
	ARGS_SYNC_DDNS=0;
	ARGS_SYNC_JENKINS=0;
	ARGS_SYNC_NGINX=0;
	ARGS_SYNC_SSH_CONFIG=0;
	ARGS_SYNC_UFW=0;

	RESTART_SERVICE_CRON=0;
	RESTART_SERVICE_JENKINS=0;
	RESTART_SERVICE_NGINX=0;
	RESTART_SERVICE_SSH=0;
	RESTART_SERVICE_UFW=0;

	# Walk through any inline-arguments passed to this function
	for (( i=0;i<$ARGS_COUNT;i++ )); do

		EACH_ARG=${ARGS[${i}]};

		# Check if this is the last inline-argument or if there are more to follow
		if [ $((${i}+1)) -eq ${ARGS_COUNT} ]; then # if this is the last argument
			NEXT_ARG="";
		else
			NEXT_ARG=${ARGS[$((${i}+1))]};
			if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
				NEXT_ARG="";
			fi;
		fi;

		if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

			# Parse cronjob calls
			if [ "${EACH_ARG}" == "--cron" ]; then
				if [ -z "${ARGS_CRONJOB}" ] && [ "${NEXT_ARG}" == "sync" ]; then # --cron sync
					ARGS_CRONJOB="SYNC";
				elif [ -z "${ARGS_CRONJOB}" ] && [ "${NEXT_ARG}" == "remove" ]; then # --cron remove
					ARGS_REMOVE_CRONJOBS=1;
				else
					if [ -n "${ARGS_CRONJOB}" ]; then
						echo "$(date +'%Y-%m-%d %H:%M:%S') | Error → Invalid inline-argument:   Multiple instances of \"--cron\" detected";
					else
						echo "$(date +'%Y-%m-%d %H:%M:%S') | Error → Invalid inline-argument:   ${EACH_ARG} ${NEXT_ARG}";
					fi;
					echo "$(date +'%Y-%m-%d %H:%M:%S') | Error → Setup sync cron-job(s) via \"--cron sync\". Setup jenkins cron-job(s) via \"--cron jenkins\". To remove associated cron-jobs, use \"--cron remove\"";
					exit 1;
				fi;
			fi;

			# Use "--all" inline-arg. to sync all modules
			if [ "${EACH_ARG}" == "--all" ]; then
				ARGS_CHECK_WSL=1;
				ARGS_CRONJOB="SYNC";
				ARGS_DEBUG_MODE=1;
				ARGS_REMOVE_CRONJOBS=0;
				# ARGS_SYNC_DDNS=1;
				ARGS_SYNC_JENKINS=1;
				ARGS_SYNC_NGINX=1;
				ARGS_SYNC_SSH_CONFIG=1;
				ARGS_SYNC_UFW=1;
			fi;

			if [ "${EACH_ARG}" == "--remove-cronjobs" ] || [ "${EACH_ARG}" == "--remove" ]; then
				ARGS_REMOVE_CRONJOBS=1; # Parse remove-cronjobs calls
			fi;

			if [ "${EACH_ARG}" == "--wsl" ] || [ "${EACH_ARG}" == "--windows" ]; then
				ARGS_CHECK_WSL=1; # Parse WSL-Check calls
			fi;

			if [ "${EACH_ARG}" == "--debug" ] || [ "${EACH_ARG}" == "--verbose" ]; then
				ARGS_DEBUG_MODE=1; # Parse Debug/Verbose Calls
			fi;

			if [ "${EACH_ARG}" == "--ddns" ]; then
				ARGS_SYNC_DDNS=1; # Parse DDNS-Sync Calls
			fi;

			if [ "${EACH_ARG}" == "--jenkins" ]; then
				ARGS_SYNC_JENKINS=1; # Parse JENKINS-Sync Calls
			fi;
			
			if [ "${EACH_ARG}" == "--nginx" ]; then
				ARGS_SYNC_NGINX=1; # Parse NGINX-Sync Calls
			fi;

			if [ "${EACH_ARG}" == "--ssh" ] || [ "${EACH_ARG}" == "--sshd" ]; then
				ARGS_SYNC_SSH_CONFIG=1; # Parse SSH-Config calls
			fi;

			if [ "${EACH_ARG}" == "--ufw" ]; then
				ARGS_SYNC_UFW=1; # Parse UFW-Sync Calls
			fi;


		fi;

	done;

	if [ ${ARGS_DEBUG_MODE} -eq 1 ]; then
		echo "";
		echo "Debug:  ARGS = [ ${ARGS} ]";
		echo "Debug:  ARGS_COUNT = [ ${ARGS_COUNT} ]";
		echo "";
		echo "Debug:  ARGS_CHECK_WSL = [ ${ARGS_CHECK_WSL} ]";
		echo "Debug:  ARGS_CRONJOB = [ ${ARGS_CRONJOB} ]";
		echo "Debug:  ARGS_DEBUG_MODE = [ ${ARGS_DEBUG_MODE} ]";
		echo "Debug:  ARGS_REMOVE_CRONJOBS = [ ${ARGS_REMOVE_CRONJOBS} ]";
		echo "Debug:  ARGS_SYNC_DDNS = [ ${ARGS_SYNC_DDNS} ]";
		echo "Debug:  ARGS_SYNC_JENKINS = [ ${ARGS_SYNC_JENKINS} ]";
		echo "Debug:  ARGS_SYNC_NGINX = [ ${ARGS_SYNC_NGINX} ]";
		echo "Debug:  ARGS_SYNC_SSH_CONFIG = [ ${ARGS_SYNC_SSH_CONFIG} ]";
		echo "Debug:  ARGS_SYNC_UFW = [ ${ARGS_SYNC_UFW} ]";

	fi;

	# ------------------------------------------------------------
	# Ensure the (GitHub) Repos directory exists, locally
	if [ ! -d "${GIT_LOCAL_PARENT_PATH}" ]; then
		mkdir -p "${GIT_LOCAL_PARENT_PATH}";
	fi;


	# ------------------------------------------------------------
	# Fetch/Pull/Clone the Remote Repo
	echo -e "\n""Info: Pulling the latest revision of the \"${GIT_REPO_NAME}\" repository";
	echo "  |→ Source (URL):        ${GIT_SOURCE_REPO_URL}";
	echo "  |→ Destination (Path):  ${GIT_LOCAL_REPO_PATH}";
	BENCHMARK_START=$(date +'%s.%N');
	# Clone the repo if it hasn't been synced, yet
	if [ ! -d "${GIT_LOCAL_REPO_PATH}" ]; then
		cd "${GIT_LOCAL_PARENT_PATH}" && \
		git clone --quiet "${GIT_SOURCE_REPO_URL}";
	fi;
	# Sync local workstation's commands with the repo's commands
	cd "${GIT_LOCAL_REPO_PATH}" && \
	git fetch --quiet && \
	git reset --quiet --hard "origin/master" && \
	git pull --quiet;
	BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
	test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

	# ------------------------------------------------------------
	# Set ownership for git-repo files as-intended
	echo -e "\n""Info: Setting ownership for directories within the \"${GIT_REPO_NAME}\" synced repository";
	BENCHMARK_START=$(date +'%s.%N');
	# find "${GIT_LOCAL_REPO_PATH}" -type d -exec chmod 0700 "{}" ";"; # directories, find + chmod
	find "${GIT_LOCAL_REPO_PATH}" -type d -print0 | xargs -0 chmod 0700; # directories, xargs + chmod
	BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
	test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

	# Set ownership for git-repo directories as-intended
	echo -e "\n""Info: Setting ownership for files within the \"${GIT_REPO_NAME}\" synced repository";
	BENCHMARK_START=$(date +'%s.%N');
	# find "${GIT_LOCAL_REPO_PATH}" -type f -exec chmod 0600 "{}" ";"; # files, find + chmod
	find "${GIT_LOCAL_REPO_PATH}" -type f -print0 | xargs -0 chmod 0600; # files, xargs + chmod
	BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
	test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


	# ------------------------------------------------------------
	# Check for (Detect/Handle) WSL instance(s)
	if [ ${ARGS_CHECK_WSL} -eq 1 ]; then
		WSL_CHECK_EXISTS=$(which wsl_get_windows_username);
		if [ -n "${WSL_CHECK_EXISTS}" ]; then
			echo -e "\n""Info: Checking for Windows Subsystem for Linux (WSL) Environment";
			WIN32_USERNAME=$(wsl_get_windows_username);
			WIN32_USER_ERRORS="$?";
		fi;
		
		if [ -n "${WIN32_USERNAME}" ] && [ -n "${WIN32_USER_ERRORS}" ] && [ "${WIN32_USER_ERRORS}" == "0" ]; then
			#  Windows OS running WSL (Windows Subsystem for Linux) - Locate source directory from amongst Win32-Host-User's files
			echo -e "\n""Info: Detected [ Windows Subsystem for Linux (WSL) ] Environment - Checking for local repo files";
			WIN32_HOMEDIR=$(find /mnt/*/Users/${WIN32_USERNAME} -mindepth 0 -maxdepth 0 -type d);
			WIN32_USR_LOCAL=$(find ${WIN32_HOMEDIR}/Documents -maxdepth 5 -name 'local' -type d | grep "/${GIT_REPO_NAME}/usr/local");
			if [ ! -n "${WIN32_USR_LOCAL}" ]; then
				echo "";
				echo "Error → Unable to locate directory matching '${GIT_REPO_NAME}/usr/local' within win32-user's documents @ '${WIN32_USERNAME}'";
				exit 1;
			else
				DIR_REPO_USR="$(dirname ${WIN32_USR_LOCAL})";
				DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
			fi;
		fi;
	fi;


	# ------------------------------------------------------------
	if [ ! -v WIN32_HOMEDIR ] || [ -z "${WIN32_HOMEDIR}" ]; then
		# If Windows/WSL check(s) failed (or were skipped), push forwards by checking for required Linux filepath(s)
		# echo -e "\n""Info: Unset/Empty variable: \${WIN32_HOMEDIR} ";
		echo -e "\n""Info: Checking for local repository files within [ $(whoami) ] user's home-directory";
		BENCHMARK_START=$(date +'%s.%N');
		WHOAMI_HOME_DIR="$(getent passwd $(id -un) | cut --delimiter=: --fields=6)";
		WHOAMI_USR_LOCAL=$(find ${WHOAMI_HOME_DIR} -mindepth 2 -maxdepth 5 -name 'local' -type d | grep "/${GIT_REPO_NAME}/usr/local");
		DIR_REPO_USR="$(dirname ${WHOAMI_USR_LOCAL})";
		DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
		SOURCE_DIR_ERRS=$?;
		if [ ${SOURCE_DIR_ERRS} -eq 0 ]; then
			echo "  |→ Using [ $(whoami) ] user's repository directory @ [ ${DIR_REPO_BASE} ]";
		else 
			if [ -v SUDO_USER ] && [ -n "${SUDO_USER}" ]; then
				#  Linux OS - Locate source directory from amongst Non-Sudo User's files
				echo "  |→ Repository not found within [ $(whoami) ] user's home-directory";
				echo "  |→ Checking for local repository files within [ ${SUDO_USER} ] user's home-directory";
				BENCHMARK_START=$(date +'%s.%N');
				SUDOER_HOME_DIR="$(getent passwd ${SUDO_USER} | cut --delimiter=: --fields=6)";
				SUDOER_USR_LOCAL=$(find ${SUDOER_HOME_DIR} -mindepth 2 -maxdepth 5 -name 'local' -type d | grep "/${GIT_REPO_NAME}/usr/local");
				DIR_REPO_USR="$(dirname ${SUDOER_USR_LOCAL})";
				DIR_REPO_BASE="$(dirname ${DIR_REPO_USR})";
				SOURCE_DIR_ERRS=$?;
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				if [ ${SOURCE_DIR_ERRS} -eq 0 ]; then
					echo "  |→ Using [ ${SUDO_USER} ] user's repository directory @ [ ${DIR_REPO_BASE} ]";
				fi;
			fi;
		fi;
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


	else
		# Running in WSL - Create link to repo-manuals
		MAN_DIR="${WIN32_HOMEDIR}/Documents/GitHub/CodingPrivate/man";
		if [ -d "${MAN_DIR}" ]; then
			# Current User 
			if [ -d "${HOME}" ] && [ ! -h "${HOME}/man" ]; then
				ln -sf "${MAN_DIR}" "${HOME}/man";
			fi;
			if [ -v SUDO_USER ]; then
				# Sudoer User (also create link in default user's homedir)
				SUDOER_HOMEDIR="$(getent passwd ${SUDO_USER} | cut -d: -f 6;)";
				if [ -d "${SUDOER_HOMEDIR}" ]; then
					if [ ! -h "${SUDOER_HOMEDIR}/man" ]; then
						ln -sf "${MAN_DIR}" "${SUDOER_HOMEDIR}/man";
					fi;
					chown --no-dereference "${SUDO_USER}:$(id -gn ${SUDO_USER})" "${SUDOER_HOMEDIR}/man";
				fi;
			fi;
		fi;


	fi;

	# ------------------------------------------------------------
	if [ -z "${DIR_REPO_BASE}" ]; then
		# Error-out if any required variable(s) are empty/unset
		EXIT_CODE=1;

		echo "";
		echo "Error → Required variable found to be empty/unset: \${DIR_REPO_BASE}";

	elif [ ! -d "${DIR_REPO_BASE}/usr/local/bin/" ] || [ ! -d "${DIR_REPO_BASE}/usr/local/sbin/" ]; then
		# Error-out if any required source directories are missing
		EXIT_CODE=1;

		if [ ! -d "${DIR_REPO_BASE}/usr/local/bin/" ]; then
			echo "";
			echo "Error → Directory not-found: [ ${DIR_REPO_BASE}/usr/local/bin/ ]";
		fi;
		if [ ! -d "${DIR_REPO_BASE}/usr/local/sbin/" ]; then
			echo "";
			echo "Error → Directory not-found: [ ${DIR_REPO_BASE}/usr/local/sbin/ ]";
		fi;

	else
		# Required source directory/directories exist → Sync them to local workstation/server
		EXIT_CODE=0;
		
		
		# ------------------------------------------------------------
		#
		# /usr/local/bin
		#
		DESTINATION_PATH="/usr/local/bin";
		SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
		FILE_PERMS="0755"; DIR_PERMS="0755";
		echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
		BENCHMARK_START=$(date +'%s.%N');
		rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
		if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
		dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


		# ------------------------------------------------------------
		#
		# /usr/local/sbin
		#
		DESTINATION_PATH="/usr/local/sbin";
		SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
		FILE_PERMS="0755"; DIR_PERMS="0755";
		echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
		BENCHMARK_START=$(date +'%s.%N');
		rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
		if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
		dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


		# ------------------------------------------------------------
		#
		# /etc/profile.d/bash_history_logging.sh
		#
		DESTINATION_PATH="/etc/profile.d/bash_history_logging.sh";
		SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
		FILE_PERMS="0644"; DIR_PERMS="0644";
		echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
		BENCHMARK_START=$(date +'%s.%N');
		rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
		if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
		dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

		# ------------------------------------------------------------
		#
		# /etc/ddns_ufw_update
		#
		DESTINATION_PATH="/etc/ddns_ufw_update";
		SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
		FILE_PERMS="0644"; DIR_PERMS="0755";
		echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
		BENCHMARK_START=$(date +'%s.%N');
		rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
		if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
		dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


		# ------------------------------------------------------------
		#
		# /etc/ssh/sshd_config
		#
		if [ ${ARGS_SYNC_SSH_CONFIG} -eq 1 ]; then

			# service --status-all 2>/dev/null | grep 'jenkins';

			if [ -z "$(which ssh)" ]; then
				echo "Info: Skipped SSH-Config Update (command \"ssh\" not found)";

			else
				
				# Backup & Update the sshd_config (SSH Server) file
				SSHD_CONFIG_LIVE="/etc/ssh/sshd_config";
				SSHD_CONFIG_MFA="${SSHD_CONFIG_LIVE}.mfa"; cp -f "${DIR_REPO_BASE}${SSHD_CONFIG_MFA}" "${SSHD_CONFIG_MFA}";
				SSHD_CONFIG_NO_MFA="${SSHD_CONFIG_LIVE}.no_mfa"; cp -f "${DIR_REPO_BASE}${SSHD_CONFIG_NO_MFA}" "${SSHD_CONFIG_NO_MFA}";
				SSHD_CONFIG_PASS_AUTH="${SSHD_CONFIG_LIVE}.password_auth"; cp -f "${DIR_REPO_BASE}${SSHD_CONFIG_PASS_AUTH}" "${SSHD_CONFIG_PASS_AUTH}";

				if [ -d "/etc/ssh/authorized_keys" ] && [ "$(find /etc/ssh/authorized_keys -type f | wc -l;)" != "0" ]; then
					# At least one SSH-Key exists in the standard keyfile directory (/etc/ssh/authorized_keys)
					MFA_CONFIG_LOGIN_DUO="/etc/duo/login_duo.conf";
					MFA_CONFIG_PAM_DUO="/etc/duo/pam_duo.conf";
					if [ -f "${MFA_CONFIG_PAM_DUO}" ] || [ -f "${MFA_CONFIG_LOGIN_DUO}" ]; then
						# Duo MFA Installed --> Use it (through PAM) for SSH-Authentication
						SSHD_CONFIG_REPLACEMENT="${SSHD_CONFIG_MFA}";
					else
						# No MFA, but at least one SSH-Key exists
						SSHD_CONFIG_REPLACEMENT="${SSHD_CONFIG_NO_MFA}";
					fi;
				else
					# No SSH Key(s) exist in the standard keyfile directory (/etc/ssh/authorized_keys) --> Allow passwords, for now
					SSHD_CONFIG_REPLACEMENT="${SSHD_CONFIG_PASS_AUTH}";
				fi;

				dos2unix --quiet "${SSHD_CONFIG_LIVE}";
				dos2unix --quiet "${SSHD_CONFIG_REPLACEMENT}";
				if [ $(cmp -s "${SSHD_CONFIG_LIVE}" "${SSHD_CONFIG_REPLACEMENT}" 1>&2 2>"/dev/null"; echo $?;) -eq 0 ]; then
					# SSH-Config file already fully up-to-date
					echo -e "\n""Info: Skipped update to SSH-Config file \"${SSHD_CONFIG_LIVE}\"";
					echo "  |--> Checksum already up-to-date with \"$(basename ${SSHD_CONFIG_REPLACEMENT})\"";

				else
					# At least one Tell the user to make sure and open a new SSH terminal to avoid being locked-out of the server
					echo -e "\n""!!! Warning !!!";
					echo "  |";
					echo "  |--> Update to SSH Configuration Requested";
					echo "  |";
					echo "  |--> To avoid being locked-out, ensure you have a separate SSH connection open (aside from this terminal) before continuing";
					echo "  |";
					read -p "  |--> Are you sure you want to continue? (y/n - if you are unsure, choose n)   " -t 20 -r;
					if [ -z "${REPLY}" ] || [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" != "Y" ]; then
						# User declined the config-update
						echo "Info: Skipped SSH-Config Update (canceled by user)";
					else

						# User accepted/confirmed the config-update
						echo -e "\n""Info: Updating SSH-Config file \"${SSHD_CONFIG_LIVE}\"";
						echo "  |-> Using config from file \"${SSHD_CONFIG_REPLACEMENT}\"";
						
						# Backup & Update the sshd_config (SSH Server) file
						BENCHMARK_START=$(date +'%s.%N');
						mv "${SSHD_CONFIG_LIVE}" "${SSHD_CONFIG_LIVE}.${START_TIMESTAMP}.bak" \
							&& wget "https://raw.githubusercontent.com/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/master${SSHD_CONFIG_REPLACEMENT}" -O "${SSHD_CONFIG_REPLACEMENT}" -q \
							&& chmod 0644 "${SSHD_CONFIG_REPLACEMENT}" \
							&& cp -f "${SSHD_CONFIG_REPLACEMENT}" "${SSHD_CONFIG_LIVE}" \
							&& RESTART_SERVICE_SSH=1;

						BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
						test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

					fi;
				fi;
			fi;
		fi;


		# ------------------------------------------------------------
		# Sync UFW ("Uncomplicated Firewall")
		if [ ${ARGS_SYNC_UFW} -eq 1 ]; then
			# Ensure that the UFW module exists on the current Linux Distro before continuing to setting it up
			if [ "$(which ufw)" == "" ]; then
				echo -e "\n""Info: Skipped UFW sync (incompatible Linux distro)";
			else
				# Check for base-level errors with the UFW runtime (usually from Windows Subsystem for Linux + IPTables)
				if [[ $(ufw status 1>&2 2>/dev/null; echo $?;) -ne 0 ]]; then
					echo -e "\n""Info: Skipped UFW sync (incompatible OS)";

				else
					# Check UFW Enabled/Disabled Status
					UFW_ENABLED=$(test -n "$(ufw status | grep 'Status' | grep 'inactive')" && echo 0 || echo 1;);
					if [ ${UFW_ENABLED} -eq 0 ]; then
						# Prompt for confirmation before auto-enabling UFW
						echo -e "\n""!!! Warning !!!";
						echo "  |";
						echo "  |--> UFW sync requested, however UFW is currently disabled";
						echo "  |";
						read -p "  |--> Enable UFW, now? (y/n - if you are unsure, choose n)  " -t 20 -r;
						if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
							ufw enable;
						fi;
					fi;

					# Re-check UFW Enabled/Disabled Status
					UFW_ENABLED=$(test -n "$(ufw status | grep 'Status' | grep 'inactive')" && echo 0 || echo 1;);
					if [ ${ARGS_DEBUG_MODE} -eq 1 ]; then
						echo -e "\n""Debug: UFW_ENABLED = [ ${UFW_ENABLED} ]";
					fi;

					# Proceed if UFW is, indeed, enabled
					if [ ${UFW_ENABLED} -eq 1 ]; then

						RESTART_SERVICE_UFW=1;
						RESTART_SERVICE_SSH=1;

						# Sync Cronjob Automation:  UFW DDNS Updates
						if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then
							CRON_DDNS_UFW_UPDATE="/etc/cron.d/CRON_ddns_ufw_update";
							echo -e "\n""Info: Updating \"${CRON_DDNS_UFW_UPDATE}\" with changes from \"${GIT_REPO_NAME}\" repository";
							BENCHMARK_START=$(date +'%s.%N');
							wget "https://raw.githubusercontent.com/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/master${CRON_DDNS_UFW_UPDATE}" -O "${CRON_DDNS_UFW_UPDATE}" -q \
								&& chmod 0644 "${CRON_DDNS_UFW_UPDATE}" \
								&& RESTART_SERVICE_CRON=1;
							BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
							test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
						fi;

					fi;

				fi;

			fi;
		fi;


		# ------------------------------------------------------------
		#
		# /etc/cron.d/...
		#
		if [ "${ARGS_CRONJOB}" == "SYNC" ]; then
			RESTART_SERVICE_CRON=1;
			if [ "${ARGS_CRONJOB}" == "SYNC" ]; then

				# ------------------------------------------------------------
				#
				# /etc/cron.d/CRON_sync_cloud_infrastructure
				#
				DESTINATION_PATH="/etc/cron.d/CRON_sync_cloud_infrastructure";
				SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
				FILE_PERMS="0644"; DIR_PERMS="0644";
				echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
				BENCHMARK_START=$(date +'%s.%N');
				rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
				if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
				dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

				# ------------------------------------------------------------
				#
				# /etc/cron.d/CRON_update_dns_config
				#
				if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then
					DESTINATION_PATH="/etc/cron.d/CRON_update_dns_config";
					if [ -f "${DESTINATION_PATH}" ]; then
						REPLY="y";
					else
						echo ""; read -p "Setup DNS-Server Sync (daily @ 04:05 AM) via \"update_dns_config\"? (y/n)   " -t 20 -r; # Do not perform this sync unless user opts-in
					fi;
					if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
						SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
						FILE_PERMS="0644"; DIR_PERMS="0644";
						echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
						BENCHMARK_START=$(date +'%s.%N');
						rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
						if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
						dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
						BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
						test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
					else
						echo "Info: Skipped DNS-Server Sync";
					fi;
				fi;

				# ------------------------------------------------------------
				#
				# /etc/cron.d/CRON_update_system
				#
				if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then
					DESTINATION_PATH="/etc/cron.d/CRON_update_system";
					if [ -f "${DESTINATION_PATH}" ]; then
						REPLY="y";
					else
						echo ""; read -p "Setup Automatic Updates (every Sunday @ 04:10 AM) via \"update_system\"? (y/n)   " -t 20 -r; # Do not perform this sync unless user opts-in
					fi;

					if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
						SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
						FILE_PERMS="0644"; DIR_PERMS="0644";
						echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
						BENCHMARK_START=$(date +'%s.%N');
						rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
						if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
						dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
						BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
						test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
					else
						echo "Info: Skipped Automatic Updates";
					fi;
				fi;

				# ------------------------------------------------------------
				#
				# /etc/cron.d/CRON_raspi_hw_monitor
				#
				if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then
					RaspberryPi_Check=$(grep 'Hardware' '/proc/cpuinfo' | sed --regexp-extended --quiet --expression='s/^Hardware\s*:\s*([a-zA-Z0-9]+)\s*$/\1/p');
					if [ "${RaspberryPi_Check}" == "BCM2835" ]; then
						DESTINATION_PATH="/etc/cron.d/CRON_raspi_hw_monitor";
						SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
						FILE_PERMS="0644"; DIR_PERMS="0644";
						echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
						BENCHMARK_START=$(date +'%s.%N');
						rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
						if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
						dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
						BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
						test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
					fi;
				fi;

			fi;

		fi;


		# ------------------------------------------------------------
		#
		# ${HOME}/.
		#

		# Get list of files to Copy into Home-Dirs
		COPY_FROM_SOURCE="${DIR_REPO_BASE}/root";
		FILES_TO_COPY=$(ls -hAl "${COPY_FROM_SOURCE}/" | awk '{print $9}');

		# User-List whose Home-Dirs will be updated
		LINUX_BASH_USERS=$(cat /etc/passwd | grep /bin/bash | awk -F':' '{ print $1}');

		# Determine longest Username to enhance log-readability by left-padding (right-aligning) output text, below
		#   NOTE: Linux usernames cannot be longer than 32 chars (according to useradd man page)
		USERNAMES_MOSTCHARS=0;
		for EACH_SSH_USER in ${LINUX_BASH_USERS}; do
			EACH_USERNAME_LENGTH=${#EACH_SSH_USER};
			if (( ${EACH_USERNAME_LENGTH} > ${USERNAMES_MOSTCHARS} )); then
				USERNAMES_MOSTCHARS=${EACH_USERNAME_LENGTH};
			fi;
		done;
		echo -e "\n""Info: Syncing Bash-Config & Terminal-Formatting files for SSH-Enabled users...";
		BENCHMARK_START=$(date +'%s.%N');
		# Begin copying files to SSH-Enabled User-Home Directories
		for EACH_FILE in ${FILES_TO_COPY}; do
			if [[ ! -z "${EACH_FILE// }" ]]; then # Ignore blank/empty filenames
				echo "  |→ \"${EACH_FILE}\" (Home-Directory File)";
				SRC_FULLPATH="${COPY_FROM_SOURCE}/${EACH_FILE}";
				for EACH_SSH_USER in ${LINUX_BASH_USERS}; do
					EACH_PRIMARY_GROUP="$(id -gn ${EACH_SSH_USER})";
					DIR_USER_HOME="$(eval echo ~${EACH_SSH_USER})";
					USERNAME_RPAD="  "$(printf '%-'${USERNAMES_MOSTCHARS}'s' "|--→ ${EACH_SSH_USER}");
					# Only copy files to SSH-Enabled user home-directories (plus root)
					if [ -d "${DIR_USER_HOME}/.ssh" ] || [ -f "${DIR_USER_HOME}/.bash_history" ] || [ -f "/etc/ssh/authorized_keys/${EACH_SSH_USER}" ] || [ "${EACH_SSH_USER}" == "root" ]; then
						DEST_FULLPATH="${DIR_USER_HOME}/${EACH_FILE}";
						if [ -d "${SRC_FULLPATH}" ] && [ -f "${SRC_FULLPATH}/"* ]; then
							# Directories containing at least one file
							dos2unix --quiet "${SRC_FULLPATH}/"*;
							cp -rf "${SRC_FULLPATH}" "${DIR_USER_HOME}";
							chown -R "${EACH_SSH_USER}:${EACH_PRIMARY_GROUP}" "${DEST_FULLPATH}";
							chmod -R 600 "${DEST_FULLPATH}";
							chmod 700 "${DEST_FULLPATH}";
						else
							# Files
							dos2unix --quiet "${SRC_FULLPATH}";
							cp -f "${SRC_FULLPATH}" "${DEST_FULLPATH}";
							chown "${EACH_SSH_USER}:${EACH_PRIMARY_GROUP}" "${DEST_FULLPATH}";
							chmod 600 "${DEST_FULLPATH}";
						fi;
						echo "${USERNAME_RPAD}:  [ ${DEST_FULLPATH} ]";
					fi;
				done;
			fi;
		done;
		BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |";
		test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


		# ------------------------------------------------------------
		#
		# /etc/cron.d/CRON_ddns_updater
		#
		if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then
			if [ ${ARGS_SYNC_DDNS} -eq 1 ]; then
				# Syncs the cronjob trigger to update a given DNS-Provider with current WAN IP
				CRON_UPDATE_DNS_A_RECORDS="/etc/cron.d/CRON_ddns_updater";
				echo -e "\n""Info: Updating \"${CRON_UPDATE_DNS_A_RECORDS}\" with changes from \"${GIT_REPO_NAME}\" repository";
				BENCHMARK_START=$(date +'%s.%N');

				/usr/local/bin/ddns_setup \
					&& wget "https://raw.githubusercontent.com/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/master${CRON_UPDATE_DNS_A_RECORDS}" -O "/etc/cron.d/CRON_ddns_updater" -q \
					&& chmod 0644 "/etc/cron.d/CRON_ddns_updater" \
					&& RESTART_SERVICE_CRON=1;

				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
			fi;
		fi;


		# ------------------------------------------------------------
		#
		# Jenkins Items
		#
		if [ ${ARGS_SYNC_JENKINS} -eq 1 ] && [ ${RESTART_SERVICE_JENKINS} -eq 0 ] && [ -x "/usr/sbin/service" ]; then

			SERVICE_NAME="jenkins";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo -e "\n""Info: Skipped NGINX config-sync (not found as a local service)";

			else

				# ------------------------------------------------------------
				#
				# /var/cache/jenkins/war
				#
				DESTINATION_PATH="/var/cache/jenkins/war";
				SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
				FILE_PERMS="0644"; DIR_PERMS="0755";
				echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
				BENCHMARK_START=$(date +'%s.%N');
				rsync --archive --inplace --checksum --quiet --chown="jenkins:jenkins" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
				if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
				dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

				# ------------------------------------------------------------
				#
				# /var/cache/jenkins/war
				#
				DESTINATION_PATH="/etc/default/jenkins";
				SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
				FILE_PERMS="0644"; DIR_PERMS="0755";
				echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
				BENCHMARK_START=$(date +'%s.%N');
				rsync --archive --inplace --checksum --quiet --chown="jenkins:jenkins" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
				if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
				dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";


				if [ ${ARGS_REMOVE_CRONJOBS} -eq 0 ]; then

					# ------------------------------------------------------------
					#
					# /etc/cron.d/CRON_jenkins_export_config
					#
					DESTINATION_PATH="/etc/cron.d/CRON_jenkins_export_config";
					SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
					FILE_PERMS="0644"; DIR_PERMS="0644";
					echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
					BENCHMARK_START=$(date +'%s.%N');
					rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
					if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
					dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
					BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
					test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

					# ------------------------------------------------------------
					#
					# /etc/cron.d/CRON_jenkins_log_cleanup
					#
					DESTINATION_PATH="/etc/cron.d/CRON_jenkins_log_cleanup";
					SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
					FILE_PERMS="0644"; DIR_PERMS="0644";
					echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
					BENCHMARK_START=$(date +'%s.%N');
					rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
					if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
					dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
					BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
					test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

					# ------------------------------------------------------------
					#
					# /etc/cron.d/CRON_jenkins_warfile_update
					#
					DESTINATION_PATH="/etc/cron.d/CRON_jenkins_warfile_update";
					SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
					FILE_PERMS="0644"; DIR_PERMS="0644";
					echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
					BENCHMARK_START=$(date +'%s.%N');
					rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform file-sync
					if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
					dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
					BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
					test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

				fi;
				
				RESTART_SERVICE_JENKINS=1;
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

			fi;

		fi;


		# ------------------------------------------------------------
		#
		# /etc/nginx
		#
		if [ ${ARGS_SYNC_NGINX} -eq 1 ]; then
			if [ -z "$(which nginx)" ]; then
				# NGINX does NOT exist locally
				echo -e "\n""Info: Skipped NGINX sync (not found as a local service)";

			else
				# NGINX exists locally
				DESTINATION_PATH="/etc/nginx"; if [ ! -d  "${DESTINATION_PATH}" ]; then mkdir -p "${DESTINATION_PATH}"; fi;
				SOURCE_PATH="${DIR_REPO_BASE}${DESTINATION_PATH}"$(test -d "${DIR_REPO_BASE}${DESTINATION_PATH}" && echo "/";);
				FILE_PERMS="0644"; DIR_PERMS="0755";
				echo -e "\n""Info: Updating \"${DESTINATION_PATH}\" with changes from \"${GIT_REPO_NAME}\" repository";
				BENCHMARK_START=$(date +'%s.%N');
				rsync --archive --inplace --checksum --quiet --chown="root:root" --chmod="D${DIR_PERMS},F${FILE_PERMS}" "${SOURCE_PATH}" "${DESTINATION_PATH}"; # Perform dir-sync
				if [ "${FILE_PERMS}" == "${DIR_PERMS}" ]; then chmod -R "${FILE_PERMS}" "${DESTINATION_PATH}"; fi; # Ensure permissions are set as-intended
				dos2unix --quiet "${DESTINATION_PATH}"/*; # Convert any CRLF files to force line-endings to be LF (only)
				DH_PARAM_FILEPATH="/etc/ssl/certs/dhparam.pem";
				DH_ENCRYPTION_BIT_STRENGTH=2048; # 2048 / 3072 / 4096 <-- Do not go lower than 2048 (as-of late 2019)
				if [ ! -f "${DH_PARAM_FILEPATH}" ]; then
					echo "  |→ Creating Diffie-Hellman Parameters File @ \"${DH_PARAM_FILEPATH}\"...";
					openssl dhparam -out "${DH_PARAM_FILEPATH}" ${DH_ENCRYPTION_BIT_STRENGTH};
				fi;

				# Walk through all sites-available (from repo), resolve their IPv4, then compare against current device's WAN IPv4 & only sync if the two IPv4's are a direct match
				find "/etc/nginx/sites-available/" -mindepth 1 -maxdepth 1 -name "*.nginx" -type "f" -print0 | while IFS= read -r -d $'\0' Each_SitesAvailable; do
					Each_FQDN=$(echo "$(basename ${Each_SitesAvailable})" | rev | cut -d. -f 1 --complement | rev);
					Each_SitesEnabled="/etc/nginx/sites-enabled/${Each_FQDN}";
					if [ "$(dig +short ${Each_FQDN})" == "$(curl -s -4 https://icanhazip.com)" ]; then
						# The FQDN resolved to an IPv4 which matches this workstation/server's WAN IPv4 - Set this FQDN to "Enabled" for the current NGINX server
						ln -sf "${Each_SitesAvailable}" "${Each_SitesEnabled}";
						echo "  |→ Enabling NGINX FQDN \"${Each_FQDN}\" (Exact match found between FQDN's-resolved-IPv4 & Current-WAN-IPv4)";
					elif [ -L "${Each_SitesEnabled}" ]; then
						# If the FQDN's IPv4 didn't resolve to the same IPv4 as the current workstation/server's WAN IPv4, but the FQDN is found to be enabled anyways, then disable it
						unlink "${Each_SitesEnabled}";
						# echo "  |→ Disabling NGINX FQDN \"${Each_FQDN}\" (No match found between FQDN's-resolved-IPv4 & Current WAN IPv4)";
					# else
						# echo "  |→ Skipped NGINX FQDN \"${Each_FQDN}\" (No match found between FQDN's-Resolved-IPv4 & Current WAN IPv4)";
					fi;
				done;

				# Setup certbot to reload NGINX whenever a Let's Encrypt HTTPS certificate is renewed via certbot
				if [ -d "/etc/letsencrypt/renewal-hooks/deploy" ] && [ ! -e "/etc/letsencrypt/renewal-hooks/deploy/reload_nginx" ] && [ -f "/usr/local/sbin/reload_nginx" ]; then
					ln --symbolic --verbose --force "/usr/local/sbin/reload_nginx" "/etc/letsencrypt/renewal-hooks/deploy/reload_nginx";
				fi;

				RESTART_SERVICE_NGINX=1;
				BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
				test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";

			fi;

		fi;

		if [ ${ARGS_REMOVE_CRONJOBS} == 1 ]; then
			#
			# --remove-cronjobs  -->  Removes all scripts matching /etc/cron.d/CRON_*  (other than CRON_sync_cloud_infrastructure, which triggers this, current script)
			#
			LOCAL_CRON_D_SCRIPTS=$(ls /etc/cron.d/CRON_* | grep -v 'sync_cloud_infrastructure' 2>/dev/null;);
			COUNT_CRON_D_SCRIPTS=$(echo "${LOCAL_CRON_D_SCRIPTS}" | wc -l;);
			if [ $(echo "${LOCAL_CRON_D_SCRIPTS}" | wc -l) -eq 0 ]; then
				echo -e "\n""Info: Skipped removal of cron sync-triggers (No scripts found matching \"/etc/cron.d/CRON_*\")";
			else
				echo -e "\n""Info: Found ${COUNT_CRON_D_SCRIPTS} cron sync-triggers matching \"/etc/cron.d/CRON_*\":";
				for EACH_CRON_TRIGGER in ${LOCAL_CRON_D_SCRIPTS}; do
					echo "  |";
					read -p "  |--> Are you sure you want to remove cron sync-trigger \"${EACH_CRON_TRIGGER}\"? (y/n)   " -t 20 -r;
					if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
						echo "  |----> Confirmed - Removing \"${EACH_CRON_TRIGGER}\"...";
						rm -f "${EACH_CRON_TRIGGER}";
					else
						echo "  |----> Skipped - Leaving \"${EACH_CRON_TRIGGER}\" unchanged/unaffected";
					fi;
				done;
			fi;

		fi;
		
		# ------------------------------------------------------------
		# Remove old/renamed scripts (if found to exist)
		# ------------------------------------------------------------
		#   bin-scripts
		TO_DEL="/usr/local/bin/docker_list_volume_maps.sh"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/bin/docker_check_installation_status"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		#   sbin-scripts
		TO_DEL="/usr/local/sbin/jenkins-config-export"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/jenkins_war_update"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/install_devops_packages"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/install_utilities"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/update_bins_from_sftp"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/sudoer_edit"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;
		TO_DEL="/usr/local/sbin/sync_config_gpg_git"; if [ -f "${TO_DEL}" ] && [ ! -h "${TO_DEL}" ]; then rm -f "${TO_DEL}"; fi;


		# ------------------------------------------------------------
		# Restart Service (if needed)  -->  cron
		# ------------------------------------------------------------
		if [ ${RESTART_SERVICE_CRON} -eq 1 ] && [ -x "/usr/sbin/service" ]; then
			SERVICE_NAME="cron";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo "Skipped restart of the \"${SERVICE_NAME}\" service (not found as a local service)";
			else
				/usr/sbin/service "${SERVICE_NAME}" restart;
				/usr/sbin/service "${SERVICE_NAME}" status;
			fi;
		fi;


		# ------------------------------------------------------------
		# Restart Service (if needed)  -->  jenkins
		# ------------------------------------------------------------
		if [ ${RESTART_SERVICE_JENKINS} -eq 1 ] && [ -x "/usr/sbin/service" ]; then
			SERVICE_NAME="jenkins";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo "Skipped restart of the \"${SERVICE_NAME}\" service (not found as a local service)";
			else
				/usr/sbin/service "${SERVICE_NAME}" restart;
				/usr/sbin/service "${SERVICE_NAME}" status;
			fi;
		fi;

		# ------------------------------------------------------------
		# Restart Service (if needed)  -->  nginx
		# ------------------------------------------------------------
		if [ ${RESTART_SERVICE_NGINX} -eq 1 ] && [ -x "/usr/sbin/service" ]; then
			SERVICE_NAME="nginx";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo "Skipped restart of the \"${SERVICE_NAME}\" service (not found as a local service)";
			else
				/usr/local/sbin/reload_nginx;
			fi;
		fi;


		# ------------------------------------------------------------
		# Restart Service (if needed)  -->  ssh
		# ------------------------------------------------------------
		if [ ${RESTART_SERVICE_SSH} -eq 1 ] && [ -x "/usr/sbin/service" ]; then
			SERVICE_NAME="ssh";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo "Skipped restart of the \"${SERVICE_NAME}\" service (not found as a local service)";
			else
				/usr/sbin/service "${SERVICE_NAME}" restart;
				/usr/sbin/service "${SERVICE_NAME}" status;
			fi;
		fi;


		# ------------------------------------------------------------
		# Restart Service (if needed)  -->  ufw
		# ------------------------------------------------------------
		if [ ${RESTART_SERVICE_UFW} -eq 1 ] && [ -x "/usr/sbin/service" ]; then
			SERVICE_NAME="ufw";
			SERVICE_MATCHES=$(service --status-all 2>/dev/null | sed --regexp-extended --quiet --expression='s/^\ \[ (\+|\-) \]\ \ ('${SERVICE_NAME}')$/\2/p');
			if [ -z "${SERVICE_MATCHES}" ]; then
				echo "Skipped restart of the \"${SERVICE_NAME}\" service (not found as a local service)";
			else
				/usr/sbin/service "${SERVICE_NAME}" restart;
				if [ -n "$(which ${SERVICE_NAME};)" ]; then
					ufw reload;
				fi;
				/usr/sbin/service "${SERVICE_NAME}" status;
			fi;
		fi;


		# ------------------------------------------------------------
		# Cleanup log files outside of the retention-policy's max-age
		# ------------------------------------------------------------
		DIRECTORY_TO_CLEAN="${LOGDIR}/";
		MAX_RETENTION_DAYS=3;
		if [ -d "${DIRECTORY_TO_CLEAN}" ]; then
			find ${DIRECTORY_TO_CLEAN} -type f -mtime +${MAX_RETENTION_DAYS} -exec rm -- "{}" ";";
		fi;

	fi;


	# ------------------------------------------------------------
	# Show Runtime Statistics
	echo -e "\n""Info: End of \"sync_cloud_infrastructure\" runtime";
	BENCHMARK_START=${START_SECONDS_NANOSECONDS};
	BENCHMARK_DELTA=$(echo "$(date +'%s.%N') - ${BENCHMARK_START}" | bc);
	test ${ARGS_DEBUG_MODE} -eq 1 && echo "  |→ Finished after ${BENCHMARK_DELTA}s";
	echo "";


	# ------------------------------------------------------------
	# Exit as-intended (force returned code)
	exit ${EXIT_CODE};


	# ------------------------------------------------------------
	# DO_UPD="${GIT_LOCAL_REPO_PATH}/usr/local/sbin/update_from_git_repo" && \
	# sudo chmod 700 "${DO_UPD}" && \
	# sudo "${DO_UPD}";

fi;
