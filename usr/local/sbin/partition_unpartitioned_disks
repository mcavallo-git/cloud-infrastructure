#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/partition_unpartitioned_disks" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------

echo "";
echo "Warning:  This runtime has been deprecated";
echo "";
echo "Info:  Please refer to updated partitioning methods by visiting URL:";
echo "";
echo "  https://github.com/mcavallo-git/Coding/search?q=linux+partition&unscoped_q=linux+partition  ";
echo "";
exit 1;

# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT


wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/partition_unpartitioned_disks" -O "/usr/local/sbin/partition_unpartitioned_disks" -q && chmod 0755 "/usr/local/sbin/partition_unpartitioned_disks" && /usr/local/sbin/partition_unpartitioned_disks;


fi;
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Install helper package(s)
	if [ $(which kdump 2>'/dev/null' | wc -l;) -eq 0 ]; then
		if [ $(which apt 2>'/dev/null' | wc -l;) -gt 0 ]; then # Distros: Debian, Ubuntu, etc.
			apt-get -y install nfs-common;
		elif [ $(which yum 2>'/dev/null' | wc -l;) -gt 0 ]; then # Distros: Fedora, Oracle Linux, Red Hat Enterprise Linux, CentOS, etc.
			yum -y install nfs-utils cifs-utils samba-client samba-common;
		fi;
	fi;

	# Partition un-partitioned disk(s), add volume(s) to empty disk(s), & mount unmounted volume(s)
	ROLLBACK_IFS="${IFS}"; IFS=$'\n';
	for EACH_LINE in $(parted -lms 2>&1 | grep -i ^/;); do
		echo "------------------------------------------------------------";
		EACH_DISK_DEVICE=$(echo "${EACH_LINE}" | cut -d':' -f1;);
		EACH_DISK_BASENAME=$(basename "${EACH_DISK_DEVICE}");
		EACH_DISK_SIZE=$(echo "${EACH_LINE}" | cut -d':' -f2;);
		EACH_PARTITION_TABLE=$(echo "${EACH_LINE}" | cut -d':' -f6;);

		# Partition un-partitioned disk(s)
		if [ "${EACH_PARTITION_TABLE}" == "unknown" ]; then
			echo "";
			READ_TIMEOUT=60;
			read -p "CONFIRM:  Do you want to partition device [ ${EACH_DISK_DEVICE} ] (currently unpartitioned), now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
			echo "";
			if [ ${RETURN_CODE_READ} -gt 128 ]; then
				echo "Error:  Response timed out after ${READ_TIMEOUT}s";
			elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
				echo "Info:  Confirmed - Calling [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; ] ...";
				parted -s "${EACH_DISK_DEVICE}" mklabel 'msdos';
			else
				echo "Info:  Denied - Skipping call [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; ]";
			fi;
		else
			echo "Info:  Skipping disk-partitioning for device [ ${EACH_DISK_DEVICE} ] (already partitioned as ${EACH_PARTITION_TABLE})";
		fi;

		# Add volume(s) to empty disk(s)
		EACH_DISK_VOLUME_COUNT="$(parted -s ${EACH_DISK_DEVICE} print 2>&1 | grep -E '^\s+[0-9]\s' | wc -l;)";
		if [ "${EACH_DISK_VOLUME_COUNT}" == "0" ]; then
			echo "";
			READ_TIMEOUT=60;
			read -p "CONFIRM:  Do you want to add a new volume on device [ ${EACH_DISK_DEVICE} ] of size [ ${EACH_DISK_SIZE} ], now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
			echo "";
			if [ ${RETURN_CODE_READ} -gt 128 ]; then
				echo "Error:  Response timed out after ${READ_TIMEOUT}s";
			elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
				echo "Info:  Confirmed - Calling [ umount -f \"${EACH_DISK_DEVICE}\" 2>/dev/null; fsck -a \"${EACH_DISK_DEVICE}\"; mkfs \"${EACH_DISK_DEVICE}\"; parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; fdisk -l \"${EACH_DISK_DEVICE}\"; ] ...";
				umount -f "${EACH_DISK_DEVICE}" 2>/dev/null; fsck -a "${EACH_DISK_DEVICE}"; mkfs "${EACH_DISK_DEVICE}"; parted -s "${EACH_DISK_DEVICE}" mklabel 'msdos'; fdisk -l "${EACH_DISK_DEVICE}";
			else
				echo "Info:  Denied - Skipping call  [ fsck -a \"${EACH_DISK_DEVICE}\"; mkfs \"${EACH_DISK_DEVICE}\"; parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; fdisk -l \"${EACH_DISK_DEVICE}\"; ]";
			fi;
		else
			echo "Info:  Skipping volume-creation for device [ ${EACH_DISK_DEVICE} ] (already contains [ ${EACH_DISK_VOLUME_COUNT} ] volume(s))";
		fi;

		# Mount un-mounted volume(s)
		KERNEL_DISK_MOUNTS="/proc/mounts";
		KERNEL_DISK_PARTITIONS="/proc/partitions";
		# EACH_DISK_PARTITIONS="$(sfdisk -l | grep "^${EACH_DISK_DEVICE}" | grep -v Empty$ | awk '{print $1}';)";
		EACH_DISK_PARTITIONS=$(lsblk -p -n -o KNAME,TYPE,MOUNTPOINT | grep -E '[part|disk] $' | awk '{print $1}';);
		ROLLBACK_IFS="${IFS}"; IFS=$'\n';
		for EACH_SUB_DEVICE in ${EACH_DISK_PARTITIONS}; do
			EACH_CHILD_DEPENDENCY_COUNT=$(lsblk -p -n -o PKNAME,NAME,MOUNTPOINT "${EACH_SUB_DEVICE}" 2>/dev/null | grep "^${EACH_SUB_DEVICE} " 2>/dev/null | wc -l);
 			if [ ${EACH_CHILD_DEPENDENCY_COUNT} -eq 0 ]; then
				EACH_DISK_MOUNT_POINTS=$(cat "${KERNEL_DISK_MOUNTS}" | grep "^${EACH_SUB_DEVICE}" 2>'/dev/null' | wc -l;);
				if [ "${EACH_DISK_MOUNT_POINTS}" == "0" ]; then
					EACH_NEW_MOUNT="/mnt/$(basename ${EACH_SUB_DEVICE})";
					if [ -d "${EACH_NEW_MOUNT}" ]; then
						EACH_NEW_MOUNT="${EACH_NEW_MOUNT}_$(date +'%s')";
					fi;
					echo "";
					READ_TIMEOUT=60;
					read -p "CONFIRM:  Do you want to mount [ ${EACH_SUB_DEVICE} ] to filepath [ ${EACH_NEW_MOUNT} ], now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
					echo "";
					if [ ${RETURN_CODE_READ} -gt 128 ]; then
						echo "Error:  Response timed out after ${READ_TIMEOUT}s";
					elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
						echo "Info:  Confirmed - Calling [ umount -f \"${EACH_SUB_DEVICE}\" 2>/dev/null; fsck -a \"${EACH_SUB_DEVICE}\"; mkdir -p \"${EACH_NEW_MOUNT}\"; mount -t xfs \"${EACH_SUB_DEVICE}\" \"${EACH_NEW_MOUNT}\"; ] ...";
						# clear Superblock of disk
						umount -f "${EACH_SUB_DEVICE}" 2>/dev/null; fsck -a "${EACH_SUB_DEVICE}"; mkdir -p "${EACH_NEW_MOUNT}"; mount -t xfs "${EACH_SUB_DEVICE}" "${EACH_NEW_MOUNT}";
					else
						echo "Info:  Denied - Skipping call [ mkdir -p \"${EACH_NEW_MOUNT}\"; mount -t xfs \"${EACH_SUB_DEVICE}\" \"${EACH_NEW_MOUNT}\"; ]";
					fi;
				else
					echo "Info:  Skipping disk-mounting for device [ ${EACH_SUB_DEVICE} ] (already mounted @ [ ${EACH_DISK_MOUNT_POINTS} ] location(s))";
				fi;
			else
				echo "Info:  Skipping disk-mounting for device [ ${EACH_SUB_DEVICE} ] (has [ ${EACH_CHILD_DEPENDENCY_COUNT} ] child-nodes(s))";
			fi;
		done; # IFS="${ROLLBACK_IFS}";

	done; IFS="${ROLLBACK_IFS}";

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   access.redhat.com  |  "Chapter 7. Kernel crash dump guide Red Hat Enterprise Linux 7 | Red Hat Customer Portal"  |  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/kernel_administration_guide/kernel_crash_dump_guide
#
#   askubuntu.com  |  "mount - Why do I get "wrong fs type, bad option, bad superblock" error? - Ask Ubuntu"  |  https://askubuntu.com/a/525246
#
#   help.ubuntu.com  |  "Kernel Crash Dump"  |  https://help.ubuntu.com/lts/serverguide/kernel-crash-dump.html
#
#   linux.die.net  |  "parted(8): partition change program - Linux man page"  |  https://linux.die.net/man/8/parted
#
#   opensource.com  |  "How to partition a disk in Linux | Opensource.com"  |  https://opensource.com/article/18/6/how-partition-disk-linux
#
#   serverfault.com  |  "linux - mkfs fails complaining that: "/dev/sdb is apparently in use by the system; will not make a filesystem here" - Server Fault"  |  https://serverfault.com/a/672435
#
#   unix.stackexchange.com  |  "mount - Is there a command to see where a disk is mounted? - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/34772
#
#   unix.stackexchange.com  |  "RHEL 7: mount windows cifs share failed - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/164927
#
#   unix.stackexchange.com  |  "ubuntu - mount: wrong fs type, bad option, bad superblock - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/315070
#
# ------------------------------------------------------------