#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_pihole" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_pihole?t=$(date +'%s.%N')" | bash;

fi;
#
# ------------------------------------------------------------
#
# Spin-up pihole instance (using docker-compose)
#
# ------------------------------------------------------------
#
# Free-up port 53 by stopping service [ systemd-resolved ] from listening on it
#  |
#  |--> Update "/etc/systemd/resolved.conf"
#  |     |--> Uncomment "DNS=" line and set to "DNS=8.8.4.4"
#  |     |--> Uncomment "FallbackDNS=" line and set to "FallbackDNS=1.1.1.1"
#  |     |--> Uncomment "DNSStubListener=" line and set to "DNSStubListener=no"
#  |
#  |--> Redirect "/etc/resolv.conf"
#  |     |--> Run [ ln -sf "/run/systemd/resolve/resolv.conf" "/etc/resolv.conf"; ]
#  |
#  |--> Restart the machine via [ reboot ]
#
# ------------------------------------------------------------
#
# Spin-up the pihole docker (after port 53 is freed up)
#

if [ 1 -eq 1 ]; then

  clear;

  echo -e "";
  echo -e " ! !        ! !                                                   ! !        ! ! ";
  echo -e " ! ! NOTICE ! !  This will reinstall any existing pihole dockers  ! ! NOTICE ! ! ";
  echo -e " ! !   |    ! !   Make sure you've freed up port 53 on localhost  ! !        ! ! ";
  echo -e "       |  ";
  read -p "       |--> Are you sure you want to continue? (y/n)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
  echo -e "";

  if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then

    echo -e "       |  ";
    read -p "       |--> Are you completely positive you want to continue? (y/n)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
    echo -e "\n";

    if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then

      CONFIG_DIR="/root/docker-configs/pihole";

      mkdir -p "${CONFIG_DIR}";
      mkdir -p "${CONFIG_DIR}/etc/pihole/";
      mkdir -p "${CONFIG_DIR}/etc/dnsmasq.d/";

      HOSTNAME_PIHOLE="${HOSTNAME_PIHOLE:-$(cat ${CONFIG_DIR}/HOSTNAME_PIHOLE;)}";
      DOMAIN_PIHOLE="${DOMAIN_PIHOLE:-$(cat ${CONFIG_DIR}/DOMAIN_PIHOLE;)}";
      WEBPASSWORD="${WEBPASSWORD:-$(cat ${CONFIG_DIR}/WEBPASSWORD;)}";
      SERVER_IP="${SERVER_IP:-$(cat ${CONFIG_DIR}/SERVER_IP;)}";
      TZ="${TZ:-$(cat /etc/timezone;)}";

      VIRTUAL_HOST="${HOSTNAME_PIHOLE}${DOMAIN_PIHOLE})";

      cd "${CONFIG_DIR}";

      REVERT_RESOLV_CONF=0;
      if [ $(sed -rne 's/^# (nameserver 8.8.4.4)$/\0/p' '/etc/resolv.conf' | wc -l 2>'/dev/null';) -gt 0 ]; then
        echo -e "\n\nTemporarily enabling DNS nameserver \"8.8.4.4\" in \"/etc/resolv.conf\"\n\n";
        sed -re 's/^# (nameserver 8.8.4.4)$/\1/' -i "/etc/resolv.conf";
        REVERT_RESOLV_CONF=1;
      fi;

      docker_kill_all;

      echo -e "\n\nSleeping for 30 seconds (to allow network resolution changes to propogate)...\n\n";
      sleep 30;

      REMOTE_DOCKER_COMPOSE="https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/var/lib/docker-compose/docker-compose.pihole.yml";
      LOCAL_DOCKER_COMPOSE="${CONFIG_DIR}/docker-compose.yml";

      curl -sL "${REMOTE_DOCKER_COMPOSE}" -o "${LOCAL_DOCKER_COMPOSE}";
      chmod 0600 "${LOCAL_DOCKER_COMPOSE}";

      # ------------------------------
      #
      # docker-compose.yml --> variable injection via 'sed'
      #

      # container_name: ...
      if [ -n "${HOSTNAME_PIHOLE}" ]; then
        sed -re "s/^(\s+)(image:.*)\$/\1container_name: '${HOSTNAME_PIHOLE//\//\\\/}'\n\1\2/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;

      # hostname: ...
      if [ -n "${VIRTUAL_HOST}" ]; then
        sed -re "s/^(\s+)(image:.*)\$/\1hostname: '${VIRTUAL_HOST//\//\\\/}'\n\1\2/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;

      # environment: ...
      if [ -n "${SERVER_IP}" ]; then
        sed -re "s/^(\s+)(environment:.*)\$/\1\2\n\1  ServerIP: '${SERVER_IP//\//\\\/}'/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;
      if [ -n "${TZ}" ]; then
        sed -re "s/^(\s+)(environment:.*)\$/\1\2\n\1  TZ: '${TZ//\//\\\/}'/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;
      if [ -n "${VIRTUAL_HOST}" ]; then
        sed -re "s/^(\s+)(environment:.*)\$/\1\2\n\1  VIRTUAL_HOST: '${VIRTUAL_HOST//\//\\\/}'/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;
      if [ -n "${WEBPASSWORD}" ]; then
        sed -re "s/^(\s+)(environment:.*)\$/\1\2\n\1  WEBPASSWORD: '${WEBPASSWORD//\//\\\/}'/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;

      # volumes: ...
      if [ -d "${CONFIG_DIR}" ]; then
        # Networking config dirs
          sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/pihole\/:\/etc\/pihole\/'/" -i "${LOCAL_DOCKER_COMPOSE}";
          sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/dnsmasq.d\/:\/etc\/dnsmasq.d\/'/" -i "${LOCAL_DOCKER_COMPOSE}";
          sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/resolv.conf:\/etc\/resolv.conf:ro'/" -i "${LOCAL_DOCKER_COMPOSE}";
          # sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/lighttpd\/external.conf:\/etc\/lighttpd\/external.conf:ro'/" -i "${LOCAL_DOCKER_COMPOSE}";
        # SSL/TLS (HTTPS) certificate dirs
          # sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/letsencrypt\/live\/pihole\/privkey.pem:\/etc\/letsencrypt\/live\/pihole\/privkey.pem:ro'/" -i "${LOCAL_DOCKER_COMPOSE}";
          # sed -re "s/^(\s+)(volumes:.*)\$/\1\2\n\1  - '${CONFIG_DIR//\//\\\/}\/etc\/letsencrypt\/live\/pihole\/fullchain.pem:\/etc\/letsencrypt\/live\/pihole\/fullchain.pem:ro'/" -i "${LOCAL_DOCKER_COMPOSE}";
      fi;


      # ------------------------------
      # Spin up the pihole docker container
      if [ 1 -eq 1 ]; then

        # echo -e "\n\nCalling [ export CONFIG_DIR=\"${CONFIG_DIR}\" DOMAIN_PIHOLE=\"${DOMAIN_PIHOLE}\" HOSTNAME_PIHOLE=\"${HOSTNAME_PIHOLE}\" WEBPASSWORD=\"***\" SERVER_IP=\"${SERVER_IP}\" VIRTUAL_HOST=\"${VIRTUAL_HOST}\"; ]...\n\n";
        # export CONFIG_DIR="${CONFIG_DIR}" DOMAIN_PIHOLE="${DOMAIN_PIHOLE}" HOSTNAME_PIHOLE="${HOSTNAME_PIHOLE}" WEBPASSWORD="${WEBPASSWORD}" SERVER_IP="${SERVER_IP}" VIRTUAL_HOST="${VIRTUAL_HOST}";

        echo -e "\n\nCalling [ cd \"${CONFIG_DIR}\"; docker-compose up --detach; ]...\n\n";
        cd "${CONFIG_DIR}"; docker-compose up --detach;

        # echo -e "\n\nCalling [ export CONFIG_DIR=\"\" DOMAIN_PIHOLE=\"\" HOSTNAME_PIHOLE=\"\" WEBPASSWORD=\"\" SERVER_IP=\"\" VIRTUAL_HOST=\"\"; ]...\n\n";
        # export CONFIG_DIR="" DOMAIN_PIHOLE="" HOSTNAME_PIHOLE="" WEBPASSWORD="" SERVER_IP="" VIRTUAL_HOST="";

      fi;

      docker stop pihole;

      systemctl stop systemd-resolved.service;
      systemctl disable systemd-resolved.service;

      docker start pihole;

      if [ ${REVERT_RESOLV_CONF} -eq 1 ]; then
        echo -e "\n\nDisabling DNS nameserver \"8.8.4.4\" from \"/etc/resolv.conf\"\n\n";
        sed -re 's/^(nameserver 8.8.4.4)$/# \1/' -i "/etc/resolv.conf";
      fi;

    fi;

  fi;

fi;


# 
# Set pihole file permissions as-intended
#   !!! PERFORM THESE STEPS MANUALLY  !!!
#
if [ 0 -eq 1 ]; then

# Bash into the docker
docker_bash_X;  # Download from [ https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/docker_bash_X ]

chown -R "pihole:pihole" "/etc/pihole/";
chown -R "pihole:pihole" "/etc/pihole/dhcp.leases";
chown -R "pihole:pihole" "/etc/pihole/gravity.db";
chown -R "pihole:pihole" "/etc/pihole/macvendor.db";
chown -R "pihole:root"   "/etc/pihole/pihole-FTL.conf";
chown -R "pihole:pihole" "/etc/pihole/pihole-FTL.db";

fi;

#
# Make sure pihole's "/etc/resolv.conf" contains line [ nameserver 127.0.0.1 ], to allow internal query-ing and adlist updating via [ pihole -g ]
#  |--> via Docker Volume-Map to [ /etc/resolv.conf ] with read-only attribute ":ro" (to avoid it being updated/reverted)
#


# ------------------------------------------------------------
#
# Citation(s)
#
#   discourse.pi-hole.net  |  "[Solved] While executing: attempt to write a readonly database error - Help / Community Help - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/solved-while-executing-attempt-to-write-a-readonly-database-error/33003/4
#
#   discourse.pi-hole.net  |  "Enabling HTTPS for your Pi-hole Web Interface - FAQs / Community How-to's - Pi-hole Userspace"  |  https://discourse.pi-hole.net/t/enabling-https-for-your-pi-hole-web-interface/5771
#
#   docs.pi-hole.net  |  "Overview of Pi-hole - Pi-hole documentation"  |  https://docs.pi-hole.net/
#
#   github.com  |  "GitHub - pi-hole/docker-pi-hole: Pi-hole in a docker container"  |  https://github.com/pi-hole/docker-pi-hole/
#
#   hub.docker.com  |  "pihole/pihole - Docker Hub"  |  https://hub.docker.com/r/pihole/pihole
#
#   www.linuxuprising.com  |  "Ubuntu: How To Free Up Port 53, Used By systemd-resolved - Linux Uprising Blog"  |  https://www.linuxuprising.com/2020/07/ubuntu-how-to-free-up-port-53-used-by.html
#
# ------------------------------------------------------------