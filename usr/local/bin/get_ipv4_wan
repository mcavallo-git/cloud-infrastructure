#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/get_ipv4_wan" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/bin/get_ipv4_wan?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile

if [ -n "$1" ] && [[ "$1" == *"log"* ]]; then # log this script's output

LOGDIR="${HOME}/get_ipv4_wan_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/get_ipv4_wan"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;

fi;

# ------------------------------------------------------------
# Determine WAN IPv4
#

# External servers to resolve WAN-IP through

# IPv4 Resolvers
IPV4_RESOLVERS+=("https://ipv4.icanhazip.com");
IPV4_RESOLVERS+=("https://v4.ident.me");
IPV4_RESOLVERS+=("https://ipinfo.io/ip");
IPV4_RESOLVERS+=("https://ipecho.net/plain");

# IPv6 Resolvers
IPV6_RESOLVERS+=("https://ipv6.icanhazip.com");
IPV6_RESOLVERS+=("https://v6.ident.me");
IPV6_RESOLVERS+=("https://bot.whatismyipaddress.com");
IPV6_RESOLVERS+=("https://checkip.amazonaws.com");

# ------------------------------

EXIT_CODE=0;

IPV4_WAN="";
IPV4_RESOLUTION_SERVER="";

IPV6_WAN="";
IPV6_RESOLUTION_SERVER="";

# REGEX_IPV4='(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))';

# ------------------------------

# Get current WAN IPv4
for EACH_IPV4_RESOLVER in "${IPV4_RESOLVERS[@]}"; do
  EACH_TEST_IPV4_WAN=$(curl -4 -L -s "${EACH_IPV4_RESOLVER}";);
  if [ -z "${EACH_TEST_IPV4_WAN}" ]; then
    IPV4_RESOLUTION_SERVER="${EACH_IPV4_RESOLVER}";
    IPV4_WAN="${EACH_TEST_IPV4_WAN}"
  fi;
done;

# Get current WAN IPv6
for EACH_IPV6_RESOLVER in "${IPV6_RESOLVERS[@]}"; do
  EACH_TEST_IPV6_WAN=$(curl -6 -L -s "${EACH_IPV6_RESOLVER}";);
  if [ -z "${EACH_TEST_IPV6_WAN}" ]; then
    IPV6_RESOLUTION_SERVER="${EACH_IPV6_RESOLVER}";
    IPV6_WAN="${EACH_TEST_IPV6_WAN}"
  fi;
done;

# ------------------------------

# Output Results
if [ -z "${IPV4_WAN}" ] && [ -z "${IPV6_WAN}" ]; then
  # Error: Show Message
  echo "Error:  Unable to resolve WAN IPv4/IPv6";
  EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
else
  # Success
  if [ "${1}" == "verbose" ]; then
  # "Verbose" output
    echo "";
    echo "IPV4_WAN:  [ ${IPV4_WAN} ]";
    echo "IPV6_WAN:  [ ${IPV6_WAN} ]";
    echo "";
    echo "IPV4_RESOLUTION_SERVER:  [ ${IPV4_RESOLUTION_SERVER} ]";
    echo "IPV6_RESOLUTION_SERVER:  [ ${IPV6_RESOLUTION_SERVER} ]";
    echo "";
  elif [ "$1" == "-q" ] || [ "$1" == "--quiet" ]; then
    # "Quiet" output (NO trailing newline)
    echo -n "${IPV4_WAN}";
  else
    # "Normal" output (output w/ newline)
    echo "${IPV4_WAN}";
  fi;
fi;

# ------------------------------------------------------------

# Exit cleanly

exit ${EXIT_CODE:-0};

# ------------------------------------------------------------