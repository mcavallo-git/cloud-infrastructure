#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/uninstall_jenkins" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT REMOTELY:


curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/uninstall_jenkins?t=$(date +'%s.%N')" | bash;


fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/uninstall_jenkins_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/uninstall_jenkins"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  #
  # Uninstall Jenkins CI/CD Server
  #
  SERVICE_NAME="jenkins";

  # ------------------------------------------------------------
  #
  # Require user-confirmation to perform this action
  #
  echo -e "\n""!! WARNING !! This will completely uninstall service \"${SERVICE_NAME}\" (including associated runtime user, usergroup, service(s), etc.)";
  read -p "     |--> Are you sure you want to continue?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
  echo "";
  if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
    read -p "     |--> Are you completely positive you want to continue?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
    echo "";
    if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then

      # ------------------------------------------------------------
      #
      # Instantiate runtime variables
      #
      EXIT_CODE=1;
      START_SECONDS_NANOSECONDS=$(date +'%s.%N');
      START_EPOCHSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1);
      # START_NANOSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
      # START_MICROSECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-6);
      # START_MILLISECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-3);
      START_DATETIME="$(date --date=@${START_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S')";

      # ------------------------------------------------------------
      #
      # Remove service's dependent package(s)
      #
      echo -e "\n""Info:  Stopping service \"${SERVICE_NAME}\"";
      echo "  |--> Calling [ systemctl stop \"${SERVICE_NAME}\"; ]...";
      systemctl stop "${SERVICE_NAME}";
    
      # ------------------------------------------------------------
      #
      # Remove service's dependent package(s)
      #
      echo -e "\n""Info:  Removing software package(s) for ${SERVICE_NAME} service";
      if [[ -n "$(command -v apt 2>'/dev/null';)" ]]; then  # Distros: Debian, Ubuntu, etc.
        echo "  |--> Calling [ apt-get remove -y \"${SERVICE_NAME}\"; ]...";
        apt-get remove -y "${SERVICE_NAME}";
      elif [[ -n "$(command -v yum 2>'/dev/null';)" ]]; then  # Distros: Fedora, Oracle Linux, Red Hat Enterprise Linux, CentOS, etc.
        echo "  |--> Calling [ yum remove -y \"${SERVICE_NAME}\"; ]...";
        yum remove -y "${SERVICE_NAME}";
      fi;
      
      # ------------------------------------------------------------
      #
      # Remove Service's Runtime-User
      #
      if [ -n "$(getent passwd 'jenkins';)" ]; then
        echo -e "\n""Info:  Removing runtime user for ${SERVICE_NAME} service";
        echo "  |--> Calling [ userdel \"${SERVICE_NAME}\" --force --remove; ]...";
        userdel "${SERVICE_NAME}" --force --remove;
      fi;

      # ------------------------------------------------------------
      #
      # Remove Service's Runtime-Group
      #
      if [ -n "$(getent group 'jenkins';)" ]; then
        echo -e "\n""Info:  Removing runtime usergroup for ${SERVICE_NAME} service";
        echo "  |--> Calling [ groupdel \"${SERVICE_NAME}\"; ]...";
        groupdel "${SERVICE_NAME}";
      fi;

      # ------------------------------------------------------------
      #
      # Remove Service
      #
      if [[ -n "$(command -v apt 2>'/dev/null';)" ]]; then  # Distros: Debian, Ubuntu, etc.
        echo "  |--> Calling [ apt-get purge \"${SERVICE_NAME}\" ]...";
        apt-get -y purge "${SERVICE_NAME}";
      fi;
      if [[ -n "$(command -v update-rc.d 2>'/dev/null';)" ]]; then  # Distros: Debian, Ubuntu, etc.
        echo "  |--> Calling [ update-rc.d \"${SERVICE_NAME}\" remove -f; ]...";
        update-rc.d "${SERVICE_NAME}" remove -f;
      fi;

      # Remove "/etc/cron.d/CRON_jenkins_export_config"
      REMOVE_PATHS="/etc/cron.d/CRON_jenkins_export_config";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;
      # Remove "/etc/cron.d/CRON_jenkins_log_cleanup"
      REMOVE_PATHS="/etc/cron.d/CRON_jenkins_log_cleanup";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;
      # Remove "/etc/cron.d/CRON_jenkins_warfile_update"
      REMOVE_PATHS="/etc/cron.d/CRON_jenkins_warfile_update";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/etc/default/jenkins"
      REMOVE_PATHS="/etc/default/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/etc/systemd/system/jenkins"
      REMOVE_PATHS="/etc/systemd/system/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/usr/lib/jenkins"
      REMOVE_PATHS="/usr/lib/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/var/cache/jenkins"
      REMOVE_PATHS="/var/cache/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/var/lib/jenkins"
      REMOVE_PATHS="/var/lib/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      # Remove "/var/log/jenkins"
      REMOVE_PATHS="/var/log/${SERVICE_NAME}";
      if [ -e "${REMOVE_PATHS}" ]; then
        echo "  |--> Calling [ rm -rf \"${REMOVE_PATHS}\"; ]...";
        rm -rf "${REMOVE_PATHS}";
      fi;

      echo "  |--> Calling [ /bin/systemctl daemon-reload; ]...";
      /bin/systemctl daemon-reload;
      echo "  |--> Calling [ /bin/systemctl reset-failed; ]...";
      /bin/systemctl reset-failed;

    fi;
  fi;

  EXIT_CODE=0;

  exit ${EXIT_CODE};

fi;

# ------------------------------------------------------------
#
# Citation(s)
#
#   superuser.com  |  "How to remove systemd services"  |  https://superuser.com/a/1344239
#
#   superuser.com  |  "Coruppted Jenkins need to reinstall"  |  https://askubuntu.com/a/442466
#
# ------------------------------------------------------------