#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/jenkins_diag_info" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/jenkins_diag_info_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/jenkins_diag_info"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  #
  # Required:  Java Development Toolkit
  #  |
  #  |--> Many of these commands are tools which may be found in the Java Developer's Toolkit
  #
  if [ -z "$(which jcmd 2>'/dev/null')" ] || [ -z "$(which jps 2>'/dev/null')" ] || [ -z "$(which jmap 2>'/dev/null')" ]; then
    READ_TIMEOUT=60;
    echo "";
    echo "Error:  One or more required commands from the 'Java Development Toolkit' were not found, locally";
    echo "         (Required commands:  jcmd, jps, jmap)";
    echo "";
    read -p "Install the Java Developer Toolkit, now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; RETURN_CODE_READ=$?;
    echo "";
    if [ ${RETURN_CODE_READ} -gt 128 ]; then
      echo "Error:  Response timed out after ${READ_TIMEOUT}s";
      exit 1;
    elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
      # install_java - Instals Java + Java Developer Toolkit
      curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/sbin/install_java?t=$(date +'%s.%N')" | bash;
    else
      echo "Info:  Required package-install denied  -->  Exiting...";
      exit 1;
    fi;
  fi;

  # ------------------------------------------------------------
  #
  # Get diagnostic info about the Jenkins service
  #

  #   jcmd  -->  Sends diagnostic command requests to a running Java Virtual Machine (JVM).
  if [ 1 ]; then
    # Note: In Cent-OS7, (as-of Apr-2020), YOU MUST CALL jcmd WHILST EITHER LOGGED-IS-AS OR MASQUERADING-AS THE SERVICE USER
    SERVICE_USER="jenkins";
    # Note: Command 'VM.system_properties' seems to sum things up nicely without TOO much extra info (athough it's still a lot of info)
    # DIAG_REQUEST="VM.classloader_stats";
    # DIAG_REQUEST="VM.classloaders";
    # DIAG_REQUEST="VM.command_line";
    # DIAG_REQUEST="VM.dynlibs";
    # DIAG_REQUEST="VM.flags";
    # DIAG_REQUEST="VM.info";
    # DIAG_REQUEST="VM.log";
    # DIAG_REQUEST="VM.metaspace";
    # DIAG_REQUEST="VM.native_memory";
    # DIAG_REQUEST="VM.print_touched_methods";
    # DIAG_REQUEST="VM.set_flag";
    # DIAG_REQUEST="VM.start_java_debugging";
    # DIAG_REQUEST="VM.stringtable";
    # DIAG_REQUEST="VM.symboltable";
    DIAG_REQUEST="VM.system_properties";
    # DIAG_REQUEST="VM.uptime";
    # DIAG_REQUEST="VM.version";
    # DIAG_REQUEST="ManagementAgent.status";
    DIAG_OUTPUT="$(sudo -u ${SERVICE_USER} jcmd $(ps u -C 'java' | grep -vEi ^USER | grep -Ei ^${SERVICE_USER} | awk '{print $2}') ${DIAG_REQUEST})";
    echo -e "\n${DIAG_OUTPUT}\n";
  fi;


  # ------------------------------------------------------------
  #
  #   jmap  -->  Prints shared object memory maps or heap memory details for a process, core file, or remote debug server. This command is experimental and unsupported.
  #
  #      -heap           Prints a heap summary of the garbage collection used, the head configuration, and generation-wise heap usage. In addition, the number and size of interned Strings are printed.
  #
  #      -histo[:live]   Prints a histogram of the heap. For each Java class, the number of objects, memory size in bytes, and the fully qualified class names are printed. The JVM internal class names are printed with an asterisk (*) prefix. If the live suboption is specified, then only active objects are counted.
  #
  #      -clstats        Prints class loader wise statistics of Java heap. For each class loader, its name, how active it is, address, parent class loader, and the number and size of classes it has loaded are printed.
  #
  #      -F              Force. Use this option with the jmap -dump or jmap -histo option when the pid does not respond. The live suboption is not supported in this mode.
  #


  # WARNING:  CLSTATS OFTEN LOCKS UP THE MACHINE & ITS SERVICE(S)
  if [[ 0 -eq 1 ]]; then
    echo "Info:  Calling  [ jmap -clstats ]  which  [ Prints class loader wise statistics of Java heap. For each class loader, its name, how active it is, address, parent class loader, and the number and size of classes it has loaded are printed. ]";
    SERVICE_USER="jenkins";
    JMAP_CLSTATS="$(jmap -clstats -F $(ps u -C 'java' | grep -vEi ^USER | grep -Ei ^${SERVICE_USER} | awk '{print $2}');)";
    echo "${JMAP_CLSTATS}";
  fi;

  # WARNING:  HISTO OFTEN LOCKS UP THE MACHINE & ITS SERVICE(S)
  if [[ 0 -eq 1 ]]; then
    echo "Info:  Calling  [ jmap -histo ]  which  [ Prints a histogram of the heap. For each Java class, the number of objects, memory size in bytes, and the fully qualified class names are printed. The JVM internal class names are printed with an asterisk (*) prefix. ]";
    SERVICE_USER="jenkins";
    JMAP_HISTO="$(jmap -histo -F $(ps u -C 'java' | grep -vEi ^USER | grep -Ei ^${SERVICE_USER} | awk '{print $2}');)";
    echo "${JMAP_HISTO}";
  fi;
  

  echo "Info:  Calling  [ jmap -heap ]  which  [ Prints a heap summary of the garbage collection used, the head configuration, and generation-wise heap usage. In addition, the number and size of interned Strings are printed. ]";
  SERVICE_USER="jenkins";
  JMAP_HEAP="$(jmap -heap -F $(ps u -C 'java' | grep -vEi ^USER | grep -Ei ^${SERVICE_USER} | awk '{print $2}');)";
  echo "${JMAP_HEAP}";


  # ------------------------------------------------------------


  echo "";
  echo "Logfile:  \"${LOGFILE}\"";
  echo "";


  # ------------------------------------------------------------

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   stackoverflow.com  |  "jvm - Command to find out -Xms and -Xmx variable values for a given java process? - Stack Overflow"  |  https://stackoverflow.com/a/27961336
#
#   stackoverflow.com  |  "linux - com.sun.tools.attach.AttachNotSupportedException: Unable to open socket file: target process not responding or HotSpot VM not loaded - Stack Overflow"  |  https://stackoverflow.com/a/51507597
#
# ------------------------------------------------------------