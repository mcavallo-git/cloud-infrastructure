#!/bin/bash
#
#   LOCAL_SBIN="/usr/local/bin/kubectl_get_all_resources" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

# Option 1: (Default) Get resources for one or all namespaces (determined by terminal input at runtime)
curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

# Option 2: Get resources for all namespaces (if string is a blank value)
export NAMESPACE=""; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

# Option 3: Get resources for one namespace (if string is a NON-blank value)
export NAMESPACE="single-namespace"; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/kubectl_get_all_resources_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/kubectl_get_all_resources"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}" 2>'/dev/null'; chmod 0770 "${LOGDIR}" 2>'/dev/null';
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
# ------------------------------

START_SECONDS_NANOSECONDS=$(date +'%s.%N');
START_EPOCHSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1);
START_NANOSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
START_MICROSECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-6);
START_DATETIME="$(date --date=@${START_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S')";

echo "------------------------------";
echo "-- Info:  Start of \"kubectl_get_all_resources\" runtime at [ ${START_DATETIME}.${START_MICROSECONDS} ]";

# ------------------------------

if [[ "$(kubectl config current-context 1>'/dev/null' 2>&1; echo ${?};)" -ne 0 ]]; then
  echo "";
  echo "ERROR:  Failed to obtain current kubernetes context";
  echo "         |";
  echo "         |--> Please ensure that the desired kubernetes connection exists and is the current context";
  echo "         .     |";
  echo "         .     |--> Check the current Kubernetes context via:";
  echo "         .     |       >  kubectl config current-context";
  echo "         .     |";
  echo "         .     |--> Set the current Kubernetes context via:";
  echo "         .             >  kubectl config use-context YOUR_CLUSTER_CONTEXT";
  echo "         |";
  echo "         |--> Once the context is set as-intended, re-run this script";

else

  if [[ -v NAMESPACE ]]; then
    # Get namespace from environment variable
    if [[ -n "${NAMESPACE}" ]]; then
      echo "";
      echo "Variable \${NAMESPACE} is set to \"${NAMESPACE}\"";
      echo " |--> Getting resource manifests for this namespace";
    else
      echo "";
      echo "Variable \${NAMESPACE} is set but contains no value";
      echo " |--> Getting resource manifests for all namespaces";
    fi;
    USE_NAMESPACE="${NAMESPACE}";
  else
    # Get namespace from terminal input
    READ_TIMEOUT=60;
    echo "";
    echo -n "Get resource manifests for which namespace?  (enter a blank value to list resources for all namespaces)  ";
    read -p "" -t ${READ_TIMEOUT} USE_NAMESPACE <'/dev/tty';
    echo "";
  fi;

  # Create log directory
  LOGDIR="${HOME}/Desktop/kubectl_get_all_resources/$(date +'%Y%m%d_%H%M%S')/$(kubectl config current-context;)";
  mkdir -p "${LOGDIR}";

  if [[ -n "${USE_NAMESPACE}" ]]; then
    # Single Namespace
    #  |--> Get all kubernetes resources
    EACH_NAMESPACE="${USE_NAMESPACE}";
    LOGDIR_NS="${LOGDIR}/${EACH_NAMESPACE}";
    mkdir -p "${LOGDIR_NS}";
    echo "";
    echo "Outputting resource manifests for namespace \"${EACH_NAMESPACE}\"";
    echo " |--> Output directory:  ${LOGDIR_NS}";
    kubectl get namespace "${EACH_NAMESPACE}" --output=yaml >> "${LOGDIR_NS}/namespace.yaml";
    for EACH_RESOURCE_TYPE in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
      EACH_RESOURCE_TYPE_MANIFESTS=$(kubectl get ${EACH_RESOURCE_TYPE} --namespace="${EACH_NAMESPACE}" --ignore-not-found --output=yaml 2>/dev/null;);
      if [ -n "${EACH_RESOURCE_TYPE_MANIFESTS}" ]; then
        BASENAME_MANIFEST="${EACH_RESOURCE_TYPE}.yaml";
        echo "       |--> ${BASENAME_MANIFEST}";
        echo "${EACH_RESOURCE_TYPE_MANIFESTS}" >> "${LOGDIR_NS}/${BASENAME_MANIFEST}";
      fi;
    done;
  else
    # All Namespaces
    #  |--> Get all kubernetes resources
    echo "";
    echo "Outputting resource manifests for all namespaces";
    echo " |--> Output directory:  \"${LOGDIR}\"";
    for EACH_NAMESPACE in $(kubectl get namespaces | grep -v '^NAME ' | awk '{print $1}' | sort | uniq); do
      LOGDIR_NS="${LOGDIR}/${EACH_NAMESPACE}";
      mkdir -p "${LOGDIR_NS}";
      echo "";
      echo "Outputting resource manifests for namespace \"${EACH_NAMESPACE}\"";
      echo " |--> Output directory:  ${LOGDIR_NS}";
      kubectl get namespace "${EACH_NAMESPACE}" --output=yaml >> "${LOGDIR_NS}/namespace.yaml";
      for EACH_RESOURCE_TYPE in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
        EACH_RESOURCE_TYPE_MANIFESTS=$(kubectl get ${EACH_RESOURCE_TYPE} --namespace="${EACH_NAMESPACE}" --ignore-not-found --output=yaml 2>/dev/null;);
        if [ -n "${EACH_RESOURCE_TYPE_MANIFESTS}" ]; then
          BASENAME_MANIFEST="${EACH_RESOURCE_TYPE}.yaml";
          echo "       |--> ${BASENAME_MANIFEST}";
          echo "${EACH_RESOURCE_TYPE_MANIFESTS}" >> "${LOGDIR_NS}/${BASENAME_MANIFEST}";
        fi;
      done;
    done;
  fi;

  echo "";
  echo -e "Listing Manifest Files";
  find "${LOGDIR}";
  if [ -n "$(command -v explorer.exe 2>'/dev/null';)" ]; then
    if [ -n "$(command -v wslpath 2>'/dev/null';)" ]; then
      explorer.exe "$(wslpath -w "${LOGDIR}";)";
    else
      explorer.exe "${LOGDIR}";
    fi;
  fi;

fi;

# ------------------------------

END_SECONDS_NANOSECONDS="$(date +'%s.%N';)";
END_EPOCHSECONDS="$(echo ${END_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1;)";
END_NANOSECONDS=$(echo ${END_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
END_MICROSECONDS=$(echo ${END_NANOSECONDS} | cut --characters 1-6);
END_DATETIME="$(date --date=@${END_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S';)";
END_BENCHMARK_DELTA=$(echo "scale=4; ($(date +'%s.%N') - ${START_SECONDS_NANOSECONDS})/1" | bc -l | sed 's/\([^0-9]\|^\)\(\.[0-9]*\)/\10\2/g';);

echo "";
echo "== Info:  End of \"kubectl_get_all_resources\" runtime at [ ${END_DATETIME}.${END_MICROSECONDS} ] after [ ${END_BENCHMARK_DELTA}s ] ";


# ------------------------------------------------------------
#
# Citation(s)
#
#   www.studytonight.com  |  "How to List all Resources in a Kubernetes Namespace - Studytonight"  |  https://www.studytonight.com/post/how-to-list-all-resources-in-a-kubernetes-namespace
#
# ------------------------------------------------------------