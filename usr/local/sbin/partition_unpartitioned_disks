#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/partition_unpartitioned_disks" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT


wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/partition_unpartitioned_disks" -O "/usr/local/sbin/partition_unpartitioned_disks" -q && chmod 0755 "/usr/local/sbin/partition_unpartitioned_disks" && /usr/local/sbin/partition_unpartitioned_disks;


fi;
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Partition un-partitioned disk(s), add volume(s) to empty disk(s), & mount unmounted volume(s)
	ROLLBACK_IFS="${IFS}"; IFS=$'\n';
	for EACH_LINE in $(parted -lms 2>&1 | grep -i ^/;); do
	EACH_DISK_DEVICE=$(echo "${EACH_LINE}" | cut -d':' -f1;);
	EACH_DISK_SIZE=$(echo "${EACH_LINE}" | cut -d':' -f2;);
	EACH_PARTITION_TABLE=$(echo "${EACH_LINE}" | cut -d':' -f6;);

	# Partition un-partitioned disk(s)
	if [ "${EACH_PARTITION_TABLE}" == "unknown" ]; then
		echo "";
		READ_TIMEOUT=60;
		read -p "CONFIRM:  Do you wish to partition the device  [  ${EACH_DISK_DEVICE}  ] (which is currently unpartitioned) using type [  msdos  ]  , now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
		echo "";
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo "Error:  Response timed out after ${READ_TIMEOUT}s";
		elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			echo "Info:  Confirmed - Calling  [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; ] ...";
			parted -s "${EACH_DISK_DEVICE}" mklabel 'msdos';
		else
			echo "Info:  Denied - Skipping call   [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; ]";
		fi;
	else
		echo "Info:  Skipping disk-partitioning for device  [  ${EACH_DISK_DEVICE}  ]  (already partitioned as ${EACH_PARTITION_TABLE})";
	fi;

	# Add volume(s) to empty disk(s)
	EACH_DISK_VOLUME_COUNT="$(parted -s ${EACH_DISK_DEVICE} print 2>&1 | grep -E '^\s+[0-9]\s' | wc -l;)";
	if [ "${EACH_DISK_VOLUME_COUNT}" == "0" ]; then
		echo "";
		READ_TIMEOUT=60;
		read -p "CONFIRM:  Do you want to create a  [  ${EACH_DISK_SIZE}  ]  volume on device  [  ${EACH_DISK_DEVICE}  ]  using filesystem-type  [  ext4  ]  , now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
		echo "";
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo "Error:  Response timed out after ${READ_TIMEOUT}s";
		elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			echo "Info:  Confirmed - Calling  [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; fdisk -l \"${EACH_DISK_DEVICE}\"; ] ...";
			parted -s "${EACH_DISK_DEVICE}" mklabel 'msdos'; fdisk -l "${EACH_DISK_DEVICE}";
		else
			echo "Info:  Denied - Skipping call  [ parted -s \"${EACH_DISK_DEVICE}\" mklabel 'msdos'; fdisk -l \"${EACH_DISK_DEVICE}\"; ]";
		fi;
	else
		echo "Info:  Skipping volume-creation for device  [  ${EACH_DISK_DEVICE}  ]  (already contains  [  ${EACH_DISK_VOLUME_COUNT}  ]  volume(s))";
	fi;

	# Mount un-mounted volume(s)
	KERNEL_DISK_MOUNTS="/proc/mounts";
	EACH_DISK_MOUNT_POINTS="$(grep "^${EACH_DISK_DEVICE}" "${KERNEL_DISK_MOUNTS}" 2>'/dev/null' | wc -l;)";
	if [ "${EACH_DISK_MOUNT_POINTS}" == "0" ]; then
		EACH_NEW_MOUNT="/mnt/$(basename ${EACH_DISK_DEVICE})";
		if [ -d "${EACH_NEW_MOUNT}" ]; then
			EACH_NEW_MOUNT="${EACH_NEW_MOUNT}_$(date +'%s')";
		fi;
		echo "";
		READ_TIMEOUT=60;
		read -p "CONFIRM:  Do you want to mount device  [ ${EACH_DISK_DEVICE} ]  to filepath  [  ${EACH_NEW_MOUNT}  ]  , now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
		echo "";
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo "Error:  Response timed out after ${READ_TIMEOUT}s";
		elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			echo "Info:  Confirmed - Calling  [ mkdir -p \"${EACH_NEW_MOUNT}\"; mount \"${EACH_DISK_DEVICE}\" \"${EACH_NEW_MOUNT}\"; ] ...";
			mkdir -p "${EACH_NEW_MOUNT}"; mount "${EACH_DISK_DEVICE}" "${EACH_NEW_MOUNT}";
		else
			echo "Info:  Denied - Skipping call  [ mkdir -p \"${EACH_NEW_MOUNT}\"; mount \"${EACH_DISK_DEVICE}\" \"${EACH_NEW_MOUNT}\"; ]";
		fi;
	else
		echo "Info:  Skipping disk-mounting for device  [  ${EACH_DISK_DEVICE}  ]  (already mounted @  [ ${EACH_DISK_MOUNT_POINTS} ]  location(s))";
	fi;
	done; IFS="${ROLLBACK_IFS}";

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   access.redhat.com  |  "Chapter 7. Kernel crash dump guide Red Hat Enterprise Linux 7 | Red Hat Customer Portal"  |  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/kernel_administration_guide/kernel_crash_dump_guide
#
#   help.ubuntu.com  |  "Kernel Crash Dump"  |  https://help.ubuntu.com/lts/serverguide/kernel-crash-dump.html
#
#   linux.die.net  |  "parted(8): partition change program - Linux man page"  |  https://linux.die.net/man/8/parted
#
#   opensource.com  |  "How to partition a disk in Linux | Opensource.com"  |  https://opensource.com/article/18/6/how-partition-disk-linux
#
#   unix.stackexchange.com  |  "mount - Is there a command to see where a disk is mounted? - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/34772
#
# ------------------------------------------------------------