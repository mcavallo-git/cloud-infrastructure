#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/raspi_hw_monitor" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # Run this script on-the-fly:

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/bin/raspi_hw_monitor?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
# Watch temps using this script:
# 
#   while [[ 1 ]]; do TEMPS="$(raspi_hw_monitor)"; clear; echo "${TEMPS}"; sleep 1; done;
#
# ------------------------------------------------------------
#
# Log to logfile(s)
#
LOGDIR="${HOME}/raspi_hw_monitor_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/raspi_hw_monitor"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";


# ------------------------------
#
# Current Temp
#

if [[ -n "$(command -v vcgencmd 2>'/dev/null';)" ]] && [[ "$(id -un)" == "root" ]]; then
  CurrentTemp_Celsuis=$(vcgencmd measure_temp | sed --regexp-extended --quiet --expression="s/^temp=([0-9]+\.[0-9]+)'C\$/\1/p";);
else
  CurrentTemp_Celsuis=$(echo "scale=3 ; $(cat /sys/class/thermal/thermal_zone0/temp) / 1000" | bc -l;);
fi;


# ------------------------------
#
# Min Temp (historically)
#

MinTemp_LogFile="${LOGDIR}/min_temp";

# See if a minimum temp logfile exists (yet)
MinTemp_LogVal="$(if [[ -f "${MinTemp_LogFile}" ]] && [[ -r "${MinTemp_LogFile}" ]]; then cat "${MinTemp_LogFile}"; else echo ""; fi;)";
MinTemp_Celsuis="${MinTemp_LogVal:-${CurrentTemp_Celsuis}}";
# Compare the current temp against it to see if we have a new low
if [[ "$(echo "scale=3 ; ${CurrentTemp_Celsuis} < ${MinTemp_Celsuis}" | bc -l;)" -eq 1 ]]; then
  MinTemp_Celsuis=${CurrentTemp_Celsuis};
fi;
if [[ "${MinTemp_LogVal}" != "${MinTemp_Celsuis}" ]]; then
  # Update logfile for Minumum temperature reading
  echo "${MinTemp_Celsuis}" > "${MinTemp_LogFile}";
fi;


# ------------------------------
#
# Max Temp (historically)
#

MaxTemp_LogFile="${LOGDIR}/max_temp";

# See if a maximum temp logfile exists (yet)
MaxTemp_LogVal="$(if [[ -f "${MaxTemp_LogFile}" ]] && [[ -r "${MaxTemp_LogFile}" ]]; then cat "${MaxTemp_LogFile}"; else echo ""; fi;)";
MaxTemp_Celsuis="${MaxTemp_LogVal:-${CurrentTemp_Celsuis}}";
# Compare the current temp against it to see if we have a new high
if [[ "$(echo "scale=3 ; ${CurrentTemp_Celsuis} > ${MaxTemp_Celsuis}" | bc -l;)" -eq 1 ]]; then
  MaxTemp_Celsuis=${CurrentTemp_Celsuis};
fi;
if [[ "${MaxTemp_LogVal}" != "${MaxTemp_Celsuis}" ]]; then
  # Update logfile for Maximum temperature reading
  echo "${MaxTemp_Celsuis}" > "${MaxTemp_LogFile}";
fi;


# ------------------------------
#
# Avg Temp (historically)
#

AvgTemp_LogFile="${LOGDIR}/avg_temp";
AvgCount_LogFile="${LOGDIR}/count_avg_readings";

# See if an average temp logfile exists (yet)
AvgTemp_LogVal=$(if [[ -f "${AvgTemp_LogFile}" ]] && [[ -r "${AvgTemp_LogFile}" ]]; then cat "${AvgTemp_LogFile}"; else echo ""; fi;);
# See if an average count logfile exists (yet)
AvgCount_LogVal=$(if [[ -f "${AvgCount_LogFile}" ]] && [[ -r "${AvgCount_LogFile}" ]]; then cat "${AvgCount_LogFile}"; else echo ""; fi;);
# Calculate the latest average temperature (based on historical data & number of runs)
AvgTemp_Celsuis=$(echo "scale=6 ; ( ( ${AvgTemp_LogVal:-0} * ${AvgCount_LogVal:-0} ) + ${CurrentTemp_Celsuis} ) / ( ${AvgCount_LogVal:-0} + 1 )" | bc -l;);
AvgCount_Updated=$(echo "( ${AvgCount_LogVal:-0} + 1 )" | bc;);
echo "${AvgTemp_Celsuis}" > "${AvgTemp_LogFile}";
echo "${AvgCount_Updated}" > "${AvgCount_LogFile}";

# ------------------------------

list_temperature="";
list_temperature="${list_temperature}SoC Temp, now\t=  ${CurrentTemp_Celsuis}째C";
list_temperature="${list_temperature}\n\n";
list_temperature="${list_temperature}SoC Temp, avg\t=  ${AvgTemp_Celsuis}째C   ( count = ${AvgCount_Updated} )";
list_temperature="${list_temperature}\n";
list_temperature="${list_temperature}SoC Temp, max\t=  ${MaxTemp_Celsuis}째C";
list_temperature="${list_temperature}\n";
list_temperature="${list_temperature}SoC Temp, min\t=  ${MinTemp_Celsuis}째C";


# ------------------------------

list_logfile_info="";
list_logfile_info="${list_logfile_info}logfile (min)   =  ${MinTemp_LogFile}";
list_logfile_info="${list_logfile_info}\n";
list_logfile_info="${list_logfile_info}logfile (max)   =  ${MaxTemp_LogFile}";
list_logfile_info="${list_logfile_info}\n";
list_logfile_info="${list_logfile_info}logfile (avg)   =  ${AvgTemp_LogFile}";


# ------------------------------

declare -a Components_ClockFreq=("arm" "core" "dpi" "emmc" "h264" "hdmi" "isp" "pixel" "pwm" "uart" "v3d" "vec");
list_clock_freq="";
list_clock_freq="${list_clock_freq}Freq, cpu, now\t=  $(($(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq)/1000)) MHz";
list_clock_freq="${list_clock_freq}\n";
list_clock_freq="${list_clock_freq}Freq, cpu, min\t=  $(($(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq)/1000)) MHz";
list_clock_freq="${list_clock_freq}\n";
list_clock_freq="${list_clock_freq}Freq, cpu, max\t=  $(($(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq)/1000)) MHz";
if [[ -z "$(command -v vcgencmd 2>'/dev/null';)" ]] && [[ "$(id -un)" == "root" ]]; then
  list_clock_freq="${list_clock_freq}\n\n------------------------------------------------------------\n";
  for EachComponent in "${Components_ClockFreq[@]}"; do
    Each_ClockFreq_Hz=$(vcgencmd measure_clock ${EachComponent} | sed --regexp-extended --quiet --expression='s/^frequency\([0-9]+\)=([0-9]+)$/\1/p' | head -n 1;);
    if [[ "$(echo "${Each_ClockFreq_Hz} > 0" | bc -l;)" -eq 1 ]]; then
      list_clock_freq="${list_clock_freq}\n";
      list_clock_freq="${list_clock_freq}Freq, ${EachComponent}\t=  $(echo "scale=0 ; ${Each_ClockFreq_Hz} / 1000000" | bc -l;) MHz";
    fi;
  done;
fi;
# list_clock_freq="${list_clock_freq}\n$(cat /proc/cpuinfo)";


# ------------------------------
#
# Get additional hardware readings
#

RaspberryPi_Check=$(grep 'Hardware' '/proc/cpuinfo' | sed --regexp-extended --quiet --expression='s/^Hardware\s*:\s*([a-zA-Z0-9]+)\s*$/\1/p');

if [[ "${RaspberryPi_Check}" == "BCM2835" ]]; then

  # Ensure "vcgencmd" (Raspberry Pi utility package) is installed - Install if missing
  if [[ -z "$(command -v vcgencmd 2>'/dev/null';)" ]] && [[ "$(id -un)" == "root" ]]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ apt-get -y update; apt-get -y install libraspberrypi-bin; ]...";
    apt-get -y update; apt-get -y install libraspberrypi-bin;
  fi;

  # ------------------------------
  if [[ -n "$(command -v vcgencmd 2>'/dev/null';)" ]] && [[ "$(id -un)" == "root" ]]; then
    #
    # Get current/past system issues (over-/under-voltage, frequency being capped, thermal throttling, etc.)
    #

    Throttle_Val_After_X=$(vcgencmd get_throttled | sed --regexp-extended --quiet --expression='s/^throttled=0x([0-9]+)$/\1/p';);
    Throttle_Val="0x${Throttle_Val_After_X}";
    # list_issues="Throttle Val\t=  ${Throttle_Val}";

    #
    # get_throttled
    #  |--> Docs:  https://www.raspberrypi.com/documentation/computers/os.html#get_throttled
    #  |--> Calling `vcgencmd get_throttled` returns the throttled state of the system. This is a bit-pattern - a bit being set indicates the following meanings:
    #         |-----|-----------|--------------------------------------------------------------------------|
    #         | Bit | Hex value | Meaning (System Status)                                                  |
    #         |-----|-----------|--------------------------------------------------------------------------|
    #         |   0 |   0x00001 | Under-voltage                                                            |
    #         |   1 |   0x00002 | Arm frequency capped                                                     |
    #         |   2 |   0x00004 | Currently throttled (turbo disabled due to low voltage/over-temperature) |
    #         |   2 |   0x00008 | Soft temperature limit active                                            |
    #         |  16 |   0x10000 | Under-voltage has occurred                                               |
    #         |  17 |   0x20000 | Arm frequency capped has occurred                                        |
    #         |  18 |   0x40000 | Throttling has occurred                                                  |
    #         |  18 |   0x80000 | Soft temperature limit has occurred                                      |
    #
    #
    # ex) vcgencmd get_throttled returns "0x50005" hex value
    #       |
    #       |--> Convert to binary: "01010000000000000101"
    #       |     |
    #       |     |--> binary OR with 00000  - FALSE
    #       |     |
    #       |     |--> binary OR with 00001  -  TRUE  (arm frequency capped)
    #       |     |
    #       |     |--> binary OR with 00010  - FALSE
    #       |     |
    #       |     |--> binary OR with 10000  - FALSE
    #       |     |
    #       |     |--> binary OR with 10001  - FALSE
    #       |     |
    #       |     |--> binary OR with 10010  - FALSE
    #       |
    #       |--> Meaning:  System is reporting a status of [ arm frequency capped ]
    #
    #
    # ex) vcgencmd get_throttled returns "0x50000" hex value
    #       |
    #       |--> Convert to binary: "01010000000000000000"
    #       |     |
    #       |     |--> binary OR with 00000  -  TRUE  (under-voltage)
    #       |     |
    #       |     |--> binary OR with 00001  - FALSE
    #       |     |
    #       |     |--> binary OR with 00010  - FALSE
    #       |     |
    #       |     |--> binary OR with 10000  - FALSE
    #       |     |
    #       |     |--> binary OR with 10001  - FALSE
    #       |     |
    #       |     |--> binary OR with 10010  - FALSE
    #       |
    #       |--> Meaning:  System is reporting a status of [ under-voltage ]
    #
    #
    # ------------------------------

    list_issues="";

    if [[ 1 -eq 1 ]]; then

      # get_throttled.sh  - script created by Github user [ alwye ]  -  https://github.com/alwye/get_throttled/blob/master/get_throttled.sh

      ISSUES_MAP=( \
        [0]="Under-voltage detected" \
        [1]="Arm frequency capped" \
        [2]="Currently throttled"
        [3]="Soft temperature limit active" \
        [16]="Under-voltage has occurred" \
        [17]="Arm frequency capping has occurred" \
        [18]="Throttling has occurred" \
        [19]="Soft temperature limit has occurred" \
      );

      HEX_BIN_MAP=( \
        ["0"]="0000" \
        ["1"]="0001" \
        ["2"]="0010" \
        ["3"]="0011" \
        ["4"]="0100" \
        ["5"]="0101" \
        ["6"]="0110" \
        ["7"]="0111" \
        ["8"]="1000" \
        ["9"]="1001" \
        ["A"]="1010" \
        ["B"]="1011" \
        ["C"]="1100" \
        ["D"]="1101" \
        ["E"]="1110" \
        ["F"]="1111" \
      );

      # Get the throttle code as a hex value & slice off the beginning "0x", then left-pad it with zeroes to 5 total characters
      THROTTLED_CODE_HEX="$(echo "$(printf "%05d" "$(vcgencmd get_throttled | sed -rne "s/^\s*throttled=0x([0-9]+)\s*$/\1/pi";)";)";)";

      # Display current issues
      list_issues+="Current issues:";
      CURRENT_HEX=${THROTTLED_CODE_HEX:4:1};
      CURRENT_BIN=${HEX_BIN_MAP[$CURRENT_HEX]};
      if [ "$CURRENT_HEX" == "0" ]; then
        list_issues+="\n  No throttling issues detected.";
      else
        bit_n=0;
        for (( i=${#CURRENT_BIN}-1; i>=0; i--)); do
          if [ "${CURRENT_BIN:$i:1}" = "1" ]; then
            list_issues+="\n  ~ ${ISSUES_MAP[$bit_n]}";
            bit_n=$((bit_n+1));
          fi;
        done;
      fi;

      # Display past issues
      list_issues+="\n";
      list_issues+="\nPreviously detected issues:";
      PAST_HEX=${THROTTLED_CODE_HEX:0:1};
      PAST_BIN=${HEX_BIN_MAP[$PAST_HEX]};
      if [ $PAST_HEX = "0" ]; then
        list_issues+="\n  No throttling issues detected.";
      else
        bit_n=16;
        for (( i=${#PAST_BIN}-1; i>=0; i--)); do
          if [ "${PAST_BIN:$i:1}" = "1" ]; then
            list_issues+="\n  ~ ${ISSUES_MAP[$bit_n]}";
            bit_n=$((bit_n+1));
          fi;
        done;
      fi;

    fi;

    # ------------------------------

    declare -a Components_Voltage=("core   " "sdram_c" "sdram_i" "sdram_p");
    list_voltages="";
    for EachComponent in "${Components_Voltage[@]}"; do
      if [[ -n "${list_voltages}" ]]; then
        list_voltages="${list_voltages}\n";
      fi;
      Each_Voltage=$(vcgencmd measure_volts $EachComponent | sed --regexp-extended --quiet --expression='s/^volt=([0-9]+\.[0-9]+)V$/\1/p';);
      list_voltages="${list_voltages}Volt, ${EachComponent}\t=  ${Each_Voltage} V";
    done;

    # ------------------------------

    declare -a Components_Memory=("arm" "gpu");
    list_memory_info="";
    for EachComponent in "${Components_Memory[@]}"; do
      if [[ -n "${list_memory_info}" ]]; then
        list_memory_info="${list_memory_info}\n";
      fi;
      Each_RAM_Alloc=$(vcgencmd get_mem $EachComponent | sed --regexp-extended --quiet --expression='s/^[a-z]+=([0-9]+)M$/\1/p';);
      list_memory_info="${list_memory_info}RAM,  ${EachComponent}\t=  ${Each_RAM_Alloc} MB";
    done;
    # list_memory_info="${list_memory_info}\n$(cat /proc/meminfo)";

    # ------------------------------

    list_all="";
    list_all="${list_all}$(date +'%c')\n";
    list_all="${list_all}------------------------------------------------------------\n\n";
    list_all="${list_all}${list_issues}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_temperature}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_voltages}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_clock_freq}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_memory_info}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_logfile_info}\n\n------------------------------------------------------------";

    # ------------------------------

    # done;

    if [[ "${#}" -gt 0 ]] && [[ -n "$(echo ${@} | grep tail;)" ]]; then
      # Recursive loopback call (tail continuously)
      clear;
      echo -e "${list_all}";
      sleep 1;
      /usr/local/bin/raspi_hw_monitor --tail

    else
      # Just call once
      echo -e "${list_all}";

    fi;

  else

    list_all="";
    list_all="${list_all}$(date +'%c')\n";
    list_all="${list_all}------------------------------------------------------------\n\n";
    list_all="${list_all}${list_temperature}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_clock_freq}\n\n------------------------------------------------------------\n\n";
    list_all="${list_all}${list_logfile_info}\n\n------------------------------------------------------------";

    echo -e "${list_all}";

  fi;
fi;



# ------------------------------------------------------------
#
# Citation(s)
#
#   forums.raspberrypi.com  |  "[ubuntu] Getting CPU tempature on Ubuntu - Raspberry Pi Forums"  |  https://forums.raspberrypi.com/viewtopic.php?t=252115
#
#   forums.raspberrypi.com  |  "vcgencmd get_throttled returns 0xd0000 and 0x50000 - Raspberry Pi Forums"  |  https://forums.raspberrypi.com/viewtopic.php?f=63&t=240215
#
#   github.com  |  "get_throttled/get_throttled.sh at master 쨌 alwye/get_throttled 쨌 GitHub"  |  https://github.com/alwye/get_throttled/blob/master/get_throttled.sh
#
#   www.raspberrypi.com  |  "Raspberry Pi Documentation - Raspberry Pi OS"  |  https://www.raspberrypi.com/documentation/computers/os.html#get_throttled
#
# ------------------------------------------------------------