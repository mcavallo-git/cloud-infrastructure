#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/git_init" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
#
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT:

# Download & run this script - Note: Windows devices require a Linux emulator to run this script (such as WSL, Git Bash (https://git-scm.com/download/win), etc.)
LOCAL_BIN="/usr/local/bin/git_init"; curl -H 'Cache-Control: no-cache' -o "${LOCAL_BIN}" -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/bin/git_init?t=$(date +'%s.%N')"; chmod 0755 "${LOCAL_BIN}"; "${LOCAL_BIN}";

# Example)  Pull a git repository held in [ Azure DevOps ]
env REMOTE_HOST="ssh.dev.azure.com" REMOTE_OWNER="ORGANIZATION_NAME/PROJECT_NAME" REMOTE_REPOSITORY="REPOSITORY_NAME" REMOTE_PRIVATE_KEY="FULLPATH_TO_SSH_PRIVATE_KEY" COMMIT_USER_FULLNAME="COMMIT_USER_FULLNAME" COMMIT_USER_EMAIL="COMMIT_EMAIL_ADDRESS@DOMAIN.TLD" git_init;

# Example)  Pull a git repository held in [ BitBucket ]
env REMOTE_HOST="bitbucket.org" REMOTE_OWNER="GITHUB_REPO_OWNER" REMOTE_REPOSITORY="GITHUB_REPO_NAME" REMOTE_PRIVATE_KEY="FULLPATH_TO_SSH_PRIVATE_KEY" COMMIT_USER_FULLNAME="COMMIT_USER_FULLNAME" COMMIT_USER_EMAIL="COMMIT_EMAIL_ADDRESS@DOMAIN.TLD" git_init;

# Example)  Pull a git repository held in [ GitHub ]
env REMOTE_HOST="github.com" REMOTE_OWNER="GITHUB_REPO_OWNER" REMOTE_REPOSITORY="GITHUB_REPO_NAME" REMOTE_PRIVATE_KEY="FULLPATH_TO_SSH_PRIVATE_KEY" COMMIT_USER_FULLNAME="COMMIT_USER_FULLNAME" COMMIT_USER_EMAIL="COMMIT_EMAIL_ADDRESS@DOMAIN.TLD" git_init;

fi;

# ------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/git_init_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/git_init"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;

# ------------------------------
#
#   echo_log  -  function which simplifies logging outputs to a file/terminal based on a given verbosity level
#
echo_log() {
  local ECHO_STRING="${1}";
  local FORCE_ECHO="${2}";
  local LOWERCASE_ECHO_STRING="$(echo "${ECHO_STRING}" | awk '{print tolower($0)}';)";
  local LOWERCASE_FORCE_ECHO="$(echo "${FORCE_ECHO}" | awk '{print tolower($0)}';)";
  local TIMESTAMP="$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';)";
  if [[ "${GIT_INIT_DEBUG}" -ne "0" ]] || [[ "${LOWERCASE_ECHO_STRING}" == *"error"* ]] || [[ "${LOWERCASE_FORCE_ECHO}" == "--force-echo" ]]; then
    # Always show echoes when any of the following criteria are satisfied:
    #  - The --force-echo option is enabled
    #  - Debug verbosity is enabled
    #  - The message contains one or more errors
    echo -e "${TIMESTAMP} ${ECHO_STRING}";
  fi;
  if [[ ! -f "${LOGFILE}" ]]; then
    # Create the logfile (if it doesn't already exist)
    touch "${LOGFILE}";
  fi;
  if [[ -w "${LOGFILE}" ]]; then
    # Output message to the logfile
    echo -e "${TIMESTAMP} ${ECHO_STRING}" >> "${LOGFILE}";
  fi;
};

# ------------------------------

EXIT_CODE=0;
export GIT_INIT_DEBUG="${GIT_INIT_DEBUG:-0}";
INITIAL_PWD="$(pwd)";
LINE_BREAK="------------------------------";

# ------------------------------
#
# Welcome the User
#
echo_log "${LINE_BREAK}" "--force-echo";
echo_log "git_init - git repository configuration script" "--force-echo";
echo_log " |--> Logfile (for this session):  ${LOGFILE}" "--force-echo";
echo_log "${LINE_BREAK}" "--force-echo";


if [ -n "${1}" ] && [ -f "${1}" ]; then
  source "${1}"; # First inline parameter ( $1 ) is the path to another shell script which sets/instantiates all required config variables
fi;

# ------------------------------
#
# Ensure that runtime variables are set
#

# If acting as the "root" user and the "git" module is not installed, then attempt to install git
if [ -z "$(which git 2>'/dev/null';)" ] && [ "$(id -un)" == "root" ]; then
  if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then
    # Ubuntu
    echo_log "Git not installed (Ubuntu Linux) - Attempting to install via:";
    echo_log "---> apt -y update && apt -y install --ignore-missing git;";
    apt -qq -y update && apt -qq -y install --ignore-missing git;
    echo_log "${LINE_BREAK}";
  else
    if [[ $(cat /etc/*release | grep -i debian | wc -l) -gt 0 ]]; then
      # Debian
      echo_log "Git not installed (Debian Linux) - Attempting to install via:";
      echo_log "---> apt -y update && apt -y install --ignore-missing git;";
      apt -qq -y update && apt -qq -y install --ignore-missing git;
      echo_log "${LINE_BREAK}";
    else
      if [[ $(cat /etc/*release | grep -i centos | wc -l) -gt 0 ]]; then
        # CentOS
        echo_log "Git not installed (CentOS Linux) - Attempting to install via:";
        echo_log "---> yum -y update && yum -y install --skip-broken git;";
          yum -y update && yum -y install --skip-broken git;
        echo_log "${LINE_BREAK}";
      else
        if [[ $(cat /etc/*release | grep -i alpine | wc -l) -gt 0 ]]; then
          # Alpine
          echo_log "Git not installed (Alpine Linux) - Attempting to install via:";
          echo_log "---> apk update && apk add git;";
            apk update && apk add git;
          echo_log "${LINE_BREAK}";
        fi;
      fi;
    fi;
  fi;
fi;

# ------------------------------------------------------------

# Fail-out if git is not installed & could not be installed
if [ -z "$(command -v git 2>'/dev/null';)" ]; then
  echo_log "Error: Git runtime not installed.\n";
  EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
fi;

# Verify Repo Host
if [ -z "${REMOTE_HOST}" ]; then
  read -p "  Remote Host/IPv4?  (e.g. github.com)  :  " -t 60 <'/dev/tty';
  REMOTE_HOST="${REPLY}";
  if [ -z "${REMOTE_HOST}" ]; then
    echo_log "Error: Required variable \$REMOTE_HOST is empty.\n";
    EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
  fi;
fi;

# Verify Repo Owner
if [ -z "${REMOTE_OWNER}" ]; then
  read -p "  Remote Repo's Owner? (username/company-name which owns repo)  :  " -t 60 <'/dev/tty';
  REMOTE_OWNER="${REPLY}";
  if [ -z "${REMOTE_OWNER}" ]; then
    echo_log "Error: Required variable \$REMOTE_OWNER is empty.\n";
    EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
  fi;
fi;

# Verify Repo Basename
if [ -z "${REMOTE_REPOSITORY}" ]; then
  read -p "  Remote Repo's Basename? (e.g. name of the repository)  :  " -t 60 <'/dev/tty';
  REMOTE_REPOSITORY="${REPLY}";
  if [ -z "${REMOTE_REPOSITORY}" ]; then
    echo_log "Error: Required variable \$REMOTE_REPOSITORY is empty.\n";
    EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
  fi;
fi;

# Verify Repo SSH Private-Keys
REMOTE_PRIVATE_KEY="${REMOTE_PRIVATE_KEY:-${REMOTE_SSH_KEY}}";
if [ -z "${REMOTE_PRIVATE_KEY}" ]; then
  read -p "  Private-Key for Remote Repo? (e.g. fullpath to RSA key)  :  " -t 60 <'/dev/tty';
  REMOTE_PRIVATE_KEY="${REPLY}";
  if [ -z "${REMOTE_PRIVATE_KEY}" ]; then
    echo_log "Error: Required variable \$REMOTE_PRIVATE_KEY is empty.\n"; 
    EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
  elif [ ! -f "${REMOTE_PRIVATE_KEY}" ]; then
    echo_log "Error: File not found: \$REMOTE_PRIVATE_KEY=\"${REMOTE_PRIVATE_KEY}\".\n";
    EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
  fi;
fi;

# If no errors were detected up until this point
if [[ "${EXIT_CODE}" -eq 0 ]]; then

  # Set default git repos dir
  if [ "$(id -un)" != "root" ]; then
    REPOS_TEMP_DIR="${HOME}/git";
  else
    REPOS_TEMP_DIR="/var/lib/git";
  fi;

  # Ensure that the git repo parent dir exists
  if [ ! -d "${REPOS_TEMP_DIR}" ]; then
    echo_log "Info: Creating default Git directory \"${REPOS_TEMP_DIR}\"";
    mkdir -p "${REPOS_TEMP_DIR}";
  fi;

  # Determine the default privileges (user:group) to set for other git-repo dirs
  MATCH_CHOWN=$(dirname "${REPOS_TEMP_DIR}");
  GIT_CHOWN_UID=$(ls -ldn $(realpath "${MATCH_CHOWN}") | awk '{print $3}');
  GIT_CHOWN_GID=$(ls -ldn $(realpath "${MATCH_CHOWN}") | awk '{print $4}');
  # if [[ "${GIT_CHOWN_UID}" -ne 0 ]]; then
  #   GIT_CHOWN_USERNAME=$(id --user --name "${GIT_CHOWN_UID}");
  # else
  #   GIT_CHOWN_USERNAME=$(getent passwd "${GIT_CHOWN_UID}" | cut -d: -f1); # calling [ id --name 0 ] is invalid
  # fi;
  # GIT_CHOWN_GROUPNAME=$(id --group --name "${GIT_CHOWN_GID}");

  # Set the target checkout branch
  CHECKOUT_BRANCH="${CHECKOUT_BRANCH:-${REPO_BRANCH:-${REMOTE_BRANCH:-${BRANCH:-${DEFAULT_BRANCH}}}}}";

  # Verify that the git repos-dir has correct ownership & access-privileges set
  if [ -n "${GIT_CHOWN_UID}" ] && [ -n "${GIT_CHOWN_GID}" ] && [ -d "${REPOS_TEMP_DIR}" ]; then
    echo_log "Info: Setting Git parent directory's file permissions to \"0700\"";
      chmod 0700 "${REPOS_TEMP_DIR}";
    echo_log "${LINE_BREAK}";
    echo_log "Info: Setting Git parent directory's file ownership to \"${GIT_CHOWN_UID}:${GIT_CHOWN_GID}\"";
      chown -R "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${REPOS_TEMP_DIR}";
    echo_log "${LINE_BREAK}";
  fi;

  # Add desired variable(s) to the environment
  if [ -z "$(git config --global gc.auto;)" ]; then git config --global gc.auto 500; fi; # [global-config]  gc.auto  -  https://git-scm.com/docs/git-config#Documentation/git-config.txt-gcauto

  # Remove undesired variable(s) from the environment
  if [ -n "$(git config --global http.sslCAInfo;)" ]; then git config --global --unset http.sslCAInfo; fi; # [global-config]  http.sslCAInfo (UNSET)  -  https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpsslCAInfo
  if [ -n "$(git config --global http.sslKey;)" ]; then git config --global --unset http.sslKey; fi; # [global-config]  http.sslKey (UNSET)  -  https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpsslKey
  if [ -n "$(git config --global http.sslVerify;)" ]; then git config --global --unset http.sslVerify; fi; # [global-config]  http.sslVerify (UNSET)  -  https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpsslVerify
  if [ -n "${GIT_CONFIG_NOSYSTEM}" ]; then unset GIT_CONFIG_NOSYSTEM; fi; # "${GIT_CONFIG_NOSYSTEM="1";
  if [ -n "${GIT_CURL_VERBOSE}" ]; then unset GIT_CURL_VERBOSE; fi; # export GIT_CURL_VERBOSE="1";
  if [ -n "${GIT_TERMINAL_PROMPT}" ]; then unset GIT_TERMINAL_PROMPT; fi; # export GIT_TERMINAL_PROMPT="0";
  if [ -n "${GIT_CEILING_DIRECTORIES}" ]; then unset GIT_CEILING_DIRECTORIES; fi; # export GIT_CEILING_DIRECTORIES="${GIT_LOCAL_CEILING}";
  if [ -n "${GIT_WORK_TREE}" ]; then unset GIT_WORK_TREE; fi; # export GIT_WORK_TREE="${GIT_LOCAL_CEILING}/${REMOTE_REPOSITORY}";
  if [ -n "${GIT_DIR}" ]; then unset GIT_DIR; fi; # export GIT_DIR="${GIT_WORK_TREE}/.git";
  if [ -n "${GIT_CONFIG}" ]; then unset GIT_CONFIG; fi; # export GIT_CONFIG="${GIT_DIR}/config";

  # ------------------------------
  #
  # Setup git command(s), filepath(s), URI(s), etc.
  #

  GIT_SSH_OPTIONS="";

  GIT_HOST_DIR="${REPOS_TEMP_DIR}/${REMOTE_HOST}";
  if [ ! -d "${GIT_HOST_DIR}" ]; then
    mkdir -p "${GIT_HOST_DIR}" && chmod 0700 "${GIT_HOST_DIR}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_HOST_DIR}";
  fi;

  GIT_LOCAL_CEILING="${GIT_HOST_DIR}/${REMOTE_OWNER}";
  WINDOWS_GITHUB_LOCAL_CEILING="${HOME}/Documents/GitHub";
  if [ ! -d "${GIT_LOCAL_CEILING}" ]; then
    mkdir -p "${GIT_LOCAL_CEILING}" && chmod 0700 "${GIT_LOCAL_CEILING}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_LOCAL_CEILING}";
  fi;

  GIT_WORK_TREE="${GIT_LOCAL_CEILING}/${REMOTE_REPOSITORY}";
  WINDOWS_GITHUB_WORK_TREE="${WINDOWS_GITHUB_LOCAL_CEILING}/${REMOTE_REPOSITORY}";
  GIT_WORK_TREE_REL=".";
  if [ ! -d "${GIT_WORK_TREE}" ]; then
    mkdir -p "${GIT_WORK_TREE}" && chmod 0700 "${GIT_WORK_TREE}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_WORK_TREE}";
  fi;

  GIT_GITDIR="${GIT_WORK_TREE}/.git";
    GIT_GITDIR_REL="${GIT_WORK_TREE_REL}/.git";

  GIT_CLI_NOCONF="git";
  # GIT_CLI_NOCONF="${GIT_CLI_NOCONF} -C ${GIT_LOCAL_CEILING}";

  GIT_CLI="git";
  # GIT_CLI="${GIT_CLI} -C ${GIT_WORK_TREE}";
  GIT_CLI="${GIT_CLI} --work-tree=${GIT_WORK_TREE_REL// /\\ }";
  GIT_CLI="${GIT_CLI} --git-dir=${GIT_GITDIR_REL// /\\ }";

  # Determine commit user's username
  GIT_SSH_USERNAME=${GIT_SSH_USERNAME:-git};  # Intended to be used for Git SSH pushes using a specific push username ( e.g. "git@..." )

  # TARGET REPOSITORY
  if [ "${REMOTE_HOST}" == "ssh.dev.azure.com" ]; then
    ORIGIN_GIT="${GIT_SSH_USERNAME}@${REMOTE_HOST}:v3/${REMOTE_OWNER}/${REMOTE_REPOSITORY}"; # Azure Repos (no ".git" appended)
  elif [ "${REMOTE_HOST}" == "vs-ssh.visualstudio.com" ]; then
    ORIGIN_GIT="${GIT_SSH_USERNAME}@${REMOTE_HOST}:v3/${REMOTE_OWNER}/${REMOTE_REPOSITORY}"; # VSTS Repos (no ".git" appended)
    # GIT_SSH_OPTIONS+=" -o HostKeyAlgorithms=+ssh-dss";  # OpenSSH included in 16.04 disables ssh-dss - Re-enable it for deprecated server(s)
    # GIT_SSH_OPTIONS+=" -o KexAlgorithms=diffie-hellman-group14-sha1";
    # GIT_SSH_OPTIONS+=" -v";
  else
    ORIGIN_GIT="${GIT_SSH_USERNAME}@${REMOTE_HOST}:${REMOTE_OWNER}/${REMOTE_REPOSITORY}.git"; # Target Repository
  fi;

  # Override SSH runtime's default/current config settings (which is what Git connects through) to force RSA key usage
  GIT_SSH_OPTIONS+=" -o StrictHostKeyChecking=no";
  export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}'${GIT_SSH_OPTIONS} -F /dev/null";

  # Determine commit user's fullname
  LOCAL_GIT_FULLNAME=$(${GIT_CLI} config user.name);  # Config value specific to git directory
  HOMEDIR_GIT_FULLNAME=$(git config user.name);  # Config value specific to current user
  CURRENT_USERNAME=$(whoami);
  if [ "${COMMIT_USER_FULLNAME}" == "git" ]; then COMMIT_USER_FULLNAME=""; fi;
  if [ "${LOCAL_GIT_FULLNAME}" == "git" ]; then LOCAL_GIT_FULLNAME=""; fi;
  if [ "${HOMEDIR_GIT_FULLNAME}" == "git" ]; then HOMEDIR_GIT_FULLNAME=""; fi;
  if [ "${CURRENT_USERNAME}" == "git" ]; then CURRENT_USERNAME=""; fi;
  COMMIT_USER_FULLNAME="${COMMIT_USER_FULLNAME:-${LOCAL_GIT_FULLNAME:-${HOMEDIR_GIT_FULLNAME:-${CURRENT_USERNAME}}}}";

  # Determine commit user's email address
  LOCAL_GIT_USER_EMAIL=$(${GIT_CLI} config user.email);  # Config value specific to git directory
  HOMEDIR_GIT_USER_EMAIL=$(git config user.email);  # Config value specific to current user
  if [ "${COMMIT_USER_EMAIL}" == "git" ]; then COMMIT_USER_EMAIL=""; fi;
  if [ "${LOCAL_GIT_USER_EMAIL}" == "git" ]; then LOCAL_GIT_USER_EMAIL=""; fi;
  if [ "${HOMEDIR_GIT_USER_EMAIL}" == "git" ]; then HOMEDIR_GIT_USER_EMAIL=""; fi;
  COMMIT_USER_EMAIL="${COMMIT_USER_EMAIL:-${LOCAL_GIT_USER_EMAIL:-${HOMEDIR_GIT_USER_EMAIL}}}";

  # Store any pre-existing default branch config declaration (to make sure to rollback/restore to it later)
  PRE_EXISTING_INIT_DEFAULTBRANCH="$(git config --global "init.defaultbranch";)";

  # ------------------------------
  #
  # Final runtime values - echo them so that they're shown to the user & saved to the logfile (for possible future reference)
  #
  echo_log "${LINE_BREAK}";
  echo_log "";
  echo_log "Debug: Runtime Variables:";
  echo_log "";
  echo_log "COMMIT_USER_EMAIL=\"${COMMIT_USER_EMAIL}\"";
  echo_log "COMMIT_USER_FULLNAME=\"${COMMIT_USER_FULLNAME}\"";
  echo_log "";
  echo_log "REMOTE_HOST=\"${REMOTE_HOST}\"";
  echo_log "REMOTE_OWNER=\"${REMOTE_OWNER}\"";
  echo_log "REMOTE_REPOSITORY=\"${REMOTE_REPOSITORY}\"";
  echo_log "";
  echo_log "CHECKOUT_BRANCH=\"${CHECKOUT_BRANCH}\"";
  echo_log "REPO_BRANCH=\"${REPO_BRANCH}\"";
  echo_log "REMOTE_BRANCH=\"${REMOTE_BRANCH}\"";
  echo_log "BRANCH=\"${BRANCH}\"";
  echo_log "DEFAULT_BRANCH=\"${DEFAULT_BRANCH}\"";
  echo_log "";
  echo_log "PRE_EXISTING_INIT_DEFAULTBRANCH=\"${PRE_EXISTING_INIT_DEFAULTBRANCH}\"";
  echo_log "";
  echo_log "ORIGIN_GIT=\"${ORIGIN_GIT}\"";
  echo_log "";
  echo_log "GIT_CHOWN_UID=\"${GIT_CHOWN_UID}\"";
  echo_log "GIT_CHOWN_GID=\"${GIT_CHOWN_GID}\"";
  echo_log "GIT_CHOWN_USERNAME=\"${GIT_CHOWN_USERNAME}\"";
  echo_log "GIT_CHOWN_GROUPNAME=\"${GIT_CHOWN_GROUPNAME}\"";
  echo_log "";
  echo_log "GIT_CLI=\"${GIT_CLI}\"";
  echo_log "GIT_SSH_COMMAND=\"${GIT_SSH_COMMAND}\"";
  echo_log "GIT_WORK_TREE=\"${GIT_WORK_TREE}\"";
  echo_log "";
  echo_log "${LINE_BREAK}";

  # ------------------------------
  #
  #  ! ! !   BEGIN PROCESSING COMPILED VARIABLES/VALUES   ! ! !
  #

  # Create default-directory for SSH's configs
  USER_SSH_CONFIG="${HOME}/.ssh/config";
  if [ ! -d "$(dirname "${USER_SSH_CONFIG}";)" ]; then
    mkdir -p "$(dirname "${USER_SSH_CONFIG}";)"; chmod 0700 "$(dirname "${USER_SSH_CONFIG}";)";
  fi;
  if [ -f "${USER_SSH_CONFIG}" ]; then
    echo_log "---> Calling [ chmod 0600 \"${USER_SSH_CONFIG}\"; ]";
    chmod 0600 "${USER_SSH_CONFIG}"
  fi;
  # Gather SSH Public Keys for target Hostname
  # echo_log "---> Pulling public key(s) from host \"${REMOTE_HOST}\":";
  # ssh-keyscan "${REMOTE_HOST}" >> "${HOME}/.ssh/known_hosts"; # Enforce public-key checking

  # Disable StrictHostKeyChecking for target Hostname
  echo_log "---> Disabling StrictHostKeyChecking for SSH connections to host \"${REMOTE_HOST}\"...";
  SSH_CONFIG_APPEND="\n# git_init - Disable StrictHostKeyChecking for \"${REMOTE_HOST}\" (git repo provider)\nHost ${REMOTE_HOST}\n  StrictHostKeyChecking no";  # \n  UserKnownHostsFile /dev/null
  echo_log "---> Calling [ echo -e \"${SSH_CONFIG_APPEND}\" >> \"${USER_SSH_CONFIG}\"; ]";
  echo -e "${SSH_CONFIG_APPEND}" >> "${USER_SSH_CONFIG}";
  echo_log "---> Calling [ cat -n \"${USER_SSH_CONFIG}\"; ]";
  echo_log "$(cat -n "${USER_SSH_CONFIG}";)";
  echo_log "---> Calling [ chmod 0600 \"${USER_SSH_CONFIG}\"; ]";
  chmod 0600 "${USER_SSH_CONFIG}";
  echo_log "${LINE_BREAK}";

  # Prep the undo to the ssh config file
  SED_PATTERN_SSH_CONFIG_UNDO="s/${SSH_CONFIG_APPEND}//";

  # ------------------------------

  # Clone repo (if non existent)
  FIRST_CLONE_OF_REPO="0";
  if [ ! -d "${GIT_GITDIR}" ]; then
    FIRST_CLONE_OF_REPO="1";
  #   echo_log "---> ${GIT_CLI_NOCONF} clone ${ORIGIN_GIT}";
  #   cd "${GIT_LOCAL_CEILING}";
  #   export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no -F /dev/null";
  #   # export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}'";
  #   ${GIT_CLI_NOCONF} clone "${ORIGIN_GIT}";
  #   unset GIT_SSH_COMMAND;
  fi;

  echo_log "---> cd \"${GIT_WORK_TREE}\"";
  cd "${GIT_WORK_TREE}";

  # [config --global]  init.defaultbranch
  if [ -n "${DEFAULT_BRANCH}" ]; then # Set the default branch (before initialization of repo, which creates the repo w/ the default branch)
    echo_log "---> git config --global init.defaultbranch \"${DEFAULT_BRANCH//refs\/heads\//}\"";
    git config --global init.defaultbranch "${DEFAULT_BRANCH//refs\/heads\//}";
    # ${GIT_CLI} symbolic-ref HEAD "refs/heads/${DEFAULT_BRANCH//refs\/heads\//}";
  fi;

  echo_log "---> git init" "--force-echo";
  ${GIT_CLI} init;
  echo_log "${LINE_BREAK}" "--force-echo";

  # [config --global]  init.defaultbranch  (ROLLBACK)
  if [ -n "${DEFAULT_BRANCH}" ]; then  # Rollback the default branch (once repo is initialized with said default branch)
    if [ -n "${PRE_EXISTING_INIT_DEFAULTBRANCH}" ]; then
      echo_log "---> git config --global init.defaultbranch \"${PRE_EXISTING_INIT_DEFAULTBRANCH}\"" "--force-echo";
      git config --global init.defaultbranch "${PRE_EXISTING_INIT_DEFAULTBRANCH}";
    else
      echo_log "---> git config --global --unset init.defaultbranch" "--force-echo";
      git config --global --unset init.defaultbranch;
    fi;
    echo_log "${LINE_BREAK}" "--force-echo";
  fi;

  # [config] remote.origin.url
  LOCAL_CURRENT_ORIGINS=$(${GIT_CLI} remote);
  if [ -n "${LOCAL_CURRENT_ORIGINS}" ]; then # remote origin
    echo_log "---> git remote set-url origin \"${ORIGIN_GIT}\";" "--force-echo";
    ${GIT_CLI} remote set-url origin "${ORIGIN_GIT}";
  else
    echo_log "---> git remote add origin \"${ORIGIN_GIT}\"" "--force-echo";
    ${GIT_CLI} remote add origin "${ORIGIN_GIT}";
  fi;

  # [config]  core.sshcommand
  # ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no -F /dev/null";
  # ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no";
  # ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}'";
  ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}'${GIT_SSH_OPTIONS}";

  # [config]  core.compression  (UNSET)
  if [ -n "$(${GIT_CLI} config core.compression)" ]; then
    ${GIT_CLI} config --unset core.compression;
  fi;

  # [config]  user.name
  if [ -n "${COMMIT_USER_FULLNAME}" ]; then
    CURRENT_LOCAL_GIT_FULLNAME=$(${GIT_CLI} config user.name);
    echo_log "---> git config user.name \"${COMMIT_USER_FULLNAME}\"" "--force-echo";
    ${GIT_CLI} config user.name "${COMMIT_USER_FULLNAME}";
    if [ "${COMMIT_USER_FULLNAME}" != "${CURRENT_LOCAL_GIT_FULLNAME}" ]; then
      echo_log "      |--> Info:  Previous value = \"${CURRENT_LOCAL_GIT_FULLNAME}\"";
    fi;
  fi;

  # [config]  user.email
  if [ -n "${COMMIT_USER_EMAIL}" ]; then
    CURRENT_LOCAL_GIT_USER_EMAIL=$(${GIT_CLI} config user.email);
    echo_log "---> git config user.email \"${COMMIT_USER_EMAIL}\"" "--force-echo";
    ${GIT_CLI} config user.email "${COMMIT_USER_EMAIL}";
    if [ "${COMMIT_USER_EMAIL}" != "${CURRENT_LOCAL_GIT_USER_EMAIL}" ]; then
      echo_log "      |--> Info:  Previous value = \"${CURRENT_LOCAL_GIT_USER_EMAIL}\"";
    fi;
  fi;

  echo_log "${LINE_BREAK}" "--force-echo";

  # [config]  remote.origin.prune  +  auto-pruning (upon fetching / pulling)
  REPO_PRUNE_ACTIVE=$(${GIT_CLI} config remote.origin.prune);
  if [ "${REPO_PRUNE_ACTIVE}" != "true" ]; then
    echo_log "---> git config remote.origin.prune true";
    ${GIT_CLI} config remote.origin.prune true;
  fi;

  # fetch all
  echo_log "---> git fetch --all" "--force-echo";
  ${GIT_CLI} fetch --all;
  echo_log "${LINE_BREAK}" "--force-echo";

  # new clones - automatically checkout default branch, first
  BRANCH_CHECKED_OUT=0;
  if [ "${FIRST_CLONE_OF_REPO}" == "1" ]; then
    echo_log "---> FIRST_CLONE_OF_REPO == 1";
    # get default branch(es)
    if [ -n "${CHECKOUT_BRANCH}" ]; then
      TRY_BRANCH="${CHECKOUT_BRANCH}";
      echo_log "---> Info: Attempting to checkout branch \"${TRY_BRANCH}\" via [ git checkout --track \"origin/${TRY_BRANCH}\"; ]" "--force-echo";
      ${GIT_CLI} checkout --track "origin/${TRY_BRANCH}"; CHECKOUT_ERROR_CODE=$?;
      if [[ ${CHECKOUT_ERROR_CODE} -eq 0 ]]; then
        BRANCH_CHECKED_OUT=1;
        echo_log "---> Info: Successfully checked out branch \"${TRY_BRANCH}\"" "--force-echo";
      else
        echo_log "---> Error: Failed to check out branch \"${TRY_BRANCH}\"";
      fi;
      echo_log "${LINE_BREAK}" "--force-echo";
    fi;
    if [[ ${BRANCH_CHECKED_OUT} -eq 0 ]]; then
      TRY_BRANCH="main";
      echo_log "---> Info: Attempting to checkout branch \"${TRY_BRANCH}\" via [ git checkout --track \"origin/${TRY_BRANCH}\"; ]" "--force-echo";
      ${GIT_CLI} checkout --track "origin/${TRY_BRANCH}"; CHECKOUT_ERROR_CODE=$?;
      if [[ ${CHECKOUT_ERROR_CODE} -eq 0 ]]; then
        BRANCH_CHECKED_OUT=1;
        echo_log "---> Info: Successfully checked out branch \"${TRY_BRANCH}\"" "--force-echo";
        echo_log "---> Info: Setting variable \${CHECKOUT_BRANCH} to value \"${TRY_BRANCH}\"";
        CHECKOUT_BRANCH="${TRY_BRANCH}";
      else
        echo_log "---> Error: Failed to check out branch \"${TRY_BRANCH}\"";
      fi;
      echo_log "${LINE_BREAK}" "--force-echo";
    fi;
    if [[ ${BRANCH_CHECKED_OUT} -eq 0 ]]; then
      TRY_BRANCH="master";
      echo_log "---> Info: Attempting to checkout branch \"${TRY_BRANCH}\" via [ git checkout --track \"origin/${TRY_BRANCH}\"; ]";
      ${GIT_CLI} checkout --track "origin/${TRY_BRANCH}"; CHECKOUT_ERROR_CODE=$?;
      if [[ ${CHECKOUT_ERROR_CODE} -eq 0 ]]; then
        BRANCH_CHECKED_OUT=1;
        echo_log "---> Info: Successfully checked out branch \"${TRY_BRANCH}\"" "--force-echo";
        echo_log "---> Info: Setting variable \${CHECKOUT_BRANCH} to value \"${TRY_BRANCH}\"";
        CHECKOUT_BRANCH="${TRY_BRANCH}";
      else
        echo_log "---> Error: Failed to check out branch \"${TRY_BRANCH}\"";
      fi;
      echo_log "${LINE_BREAK}" "--force-echo";
    fi;
    echo_log "---> Info: Pulling branch \"${CHECKOUT_BRANCH}\"" "--force-echo";
    echo_log "      |---> git pull -v" "--force-echo";
    ${GIT_CLI} pull -v;
    echo_log "${LINE_BREAK}" "--force-echo";
  fi;

  # get current branch
  echo_log "---> git branch | grep '*' | awk '{print \$2}'  # (get current branch)";
  LOCAL_CURRENT_BRANCH=$(${GIT_CLI} branch | grep '*' | awk '{print $2}');
  echo_log "     LOCAL_CURRENT_BRANCH=\"${LOCAL_CURRENT_BRANCH}\"";
  if [ -n "${LOCAL_CURRENT_BRANCH}" ]; then
    REMOTE_BRANCH_EXISTS=$(${GIT_CLI} branch -a | awk '{print $1}' | grep -w remotes/origin/${CHECKOUT_BRANCH});
    if [ -n "${REMOTE_BRANCH_EXISTS}" ]; then
      # checkout specific branch if not already on it
      if [ "${CHECKOUT_BRANCH}" != "${LOCAL_CURRENT_BRANCH}" ]; then
        echo_log "---> git checkout --force ${CHECKOUT_BRANCH}" "--force-echo";
        ${GIT_CLI} checkout --force "${CHECKOUT_BRANCH}";
        echo_log "${LINE_BREAK}" "--force-echo";
      else
        echo_log "Info: SKIPPING CHECKOUT - Already on branch \"${CHECKOUT_BRANCH}\"" "--force-echo";
      fi;
      echo_log "---> git reset --hard \"origin/${CHECKOUT_BRANCH}\"" "--force-echo";
      ${GIT_CLI} reset --hard "origin/${CHECKOUT_BRANCH}";
      echo_log "${LINE_BREAK}" "--force-echo";
    else
      if [[ 0 -eq 1 ]]; then
        # Create the checkout branch locally - ERROR PRONE - STICK TO FETCHING & PULLING THE REMOTE BRANCH
        ${GIT_CLI} checkout -b "${CHECKOUT_BRANCH}";
      fi;
      echo_log "Error: Branch \"${CHECKOUT_BRANCH}\" not found on remote.";
      EXIT_CODE=$(( ${EXIT_CODE:-0} + 1 ));
    fi;
  else
    echo_log "---> git checkout --force ${CHECKOUT_BRANCH}" "--force-echo";
    ${GIT_CLI} checkout --force "${CHECKOUT_BRANCH}";
    echo_log "${LINE_BREAK}" "--force-echo";
  fi;

  # ------------------------------
  
  # If no errors were detected up until this point
  if [[ "${EXIT_CODE}" -eq 0 ]]; then

    # pull the desired branch
    echo_log "---> git pull -v" "--force-echo";
    ${GIT_CLI} pull -v;
    echo_log "${LINE_BREAK}" "--force-echo";

    # show final git config
    echo_log "---> git config --list --show-origin";
    echo_log "$(${GIT_CLI} config --list;)";
    echo_log "${LINE_BREAK}";

    # show final git status
    echo_log "---> git status";
    echo_log "$(${GIT_CLI} status;)";
    echo_log "${LINE_BREAK}";

    if [ -d "${WINDOWS_GITHUB_LOCAL_CEILING}" ]; then
      if [ ! -d "${WINDOWS_GITHUB_WORK_TREE}" ]; then
        echo_log "Info: Relocating the git repository's root directory...";
        echo_log "       |--> from \"${GIT_WORK_TREE}\"";
        echo_log "       |--> to \"${WINDOWS_GITHUB_WORK_TREE}\"";
        echo_log "---> mv \"${GIT_WORK_TREE}\" \"${WINDOWS_GITHUB_WORK_TREE}\"" "--force-echo";
        mv "${GIT_WORK_TREE}" "${WINDOWS_GITHUB_WORK_TREE}";
        GIT_WORK_TREE="${WINDOWS_GITHUB_WORK_TREE}";
        # Cleanup empty directories
        if [[ "$(find "${REPOS_TEMP_DIR}" -type "d" -empty -print 2>'/dev/null'| wc -l;)" -gt 0 ]]; then
          # Leave any directories that may be deleted
          if [[ -d "${INITIAL_PWD}" ]]; then cd "${INITIAL_PWD}"; else cd "${HOME}"; fi;
          find "${REPOS_TEMP_DIR}" -type "d" -empty -delete;
        fi;
      else
        echo_log "Error: Directory already exists (unable to relocate git work tree to):  \"${WINDOWS_GITHUB_WORK_TREE}\"";
      fi;
      echo_log "${LINE_BREAK}" "--force-echo";
    fi;

    # Set file/directory ownership over the git repo
    echo_log "---> Calling [ chown -R \"${GIT_CHOWN_UID}:${GIT_CHOWN_GID}\" \"${GIT_WORK_TREE}\"; ]";
    chown -R "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_WORK_TREE}";
    echo_log "---> Calling [ chmod -R 0700 \"${GIT_WORK_TREE}\"; ]";
    chmod -R 0700 "${GIT_WORK_TREE}";

    # fetch the latest commits from the repo in its final location
    echo_log "Calling [ cd \"${GIT_WORK_TREE}\" && git fetch --all; ]" "--force-echo";
    cd "${GIT_WORK_TREE}" && git fetch --all;
    echo_log "${LINE_BREAK}" "--force-echo";

  fi;

  # ------------------------------
  #
  # Remove undesired variables from the environment
  #
  if [ -n "${GIT_CONFIG}" ]; then unset GIT_CONFIG; fi; # export GIT_CONFIG="${GIT_DIR}/config"; fi;
  if [ -n "${GIT_CONFIG_NOSYSTEM}" ]; then unset GIT_CONFIG_NOSYSTEM; fi; # "${GIT_CONFIG_NOSYSTEM="1"; fi;
  if [ -n "${GIT_CEILING_DIRECTORIES}" ]; then unset GIT_CEILING_DIRECTORIES; fi; # export GIT_CEILING_DIRECTORIES="${GIT_LOCAL_CEILING}"; fi;
  if [ -n "${GIT_CURL_VERBOSE}" ]; then unset GIT_CURL_VERBOSE; fi; # export GIT_CURL_VERBOSE="1"; fi;
  if [ -n "${GIT_DIR}" ]; then unset GIT_DIR; fi; # export GIT_DIR="${GIT_WORK_TREE}/.git"; fi;
  if [ -n "${GIT_TERMINAL_PROMPT}" ]; then unset GIT_TERMINAL_PROMPT; fi; # export GIT_TERMINAL_PROMPT="0"; fi;

  if [ -n "${GIT_SSH_OPTIONS}" ]; then export GIT_SSH_OPTIONS="${GIT_SSH_OPTIONS}"; fi;
  if [ -n "${GIT_WORK_TREE}" ]; then export GIT_WORK_TREE="${GIT_WORK_TREE}"; fi;

fi;

# ------------------------------
#
# Revert temporary ssh configuration(s)
#
if [[ -n "${SED_PATTERN_SSH_CONFIG_UNDO}" ]] && [[ -n "${USER_SSH_CONFIG}" ]] && [[ -f "${USER_SSH_CONFIG}" ]]; then
  echo_log "---> Reverting temporary ssh configuration(s)";
  echo_log "---> Calling [ cat -n \"${USER_SSH_CONFIG}\"; ]";
  echo_log "$(cat -n "${USER_SSH_CONFIG}";)";
  echo_log "---> Calling [ sed -z \"${SED_PATTERN_SSH_CONFIG_UNDO}\" \"${USER_SSH_CONFIG}\" -i; ]";
  sed -z "${SED_PATTERN_SSH_CONFIG_UNDO}" "${USER_SSH_CONFIG}" -i;
  echo_log "---> Calling [ cat -n \"${USER_SSH_CONFIG}\"; ]";
  echo_log "$(cat -n "${USER_SSH_CONFIG}";)";
  echo_log "${LINE_BREAK}";
fi;

# ------------------------------
#
# Cleanup log files outside of the retention policy's max-age
#
LOGDIR="${LOGDIR:-/var/log/git_init}";
RETENTION_DAYS=60;
if [[ -d "${LOGDIR}" ]] && [[ "$(find "${LOGDIR}" -type f -mtime +${RETENTION_DAYS} | wc -l;)" -gt 0 ]]; then
  echo_log "";
  echo_log "Info:  Cleaning logs older than [ ${RETENTION_DAYS} days old ] from directory \"${LOGDIR}\"";
  find "${LOGDIR}" -type f -mtime +${RETENTION_DAYS} -exec rm -- '{}' \;;
fi;

# ------------------------------
#
# Exit Gracefully
#
if [[ "${EXIT_CODE}" -ne 0 ]]; then
  echo_log "Info: One or more errors occurred - Exiting after 20s...";
  sleep 20;
fi;
if [[ 0 -eq 1 ]]; then
  exit ${EXIT_CODE};
fi;

# ------------------------------------------------------------
#
# Citation(s)
#
#   git-scm.com  |  "Git - Environment Variables"  |  https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables
#
#   git-scm.com  |  "Git - git-config Documentation"  |  https://git-scm.com/docs/git-config#Documentation/git-config.txt-gcauto
#
#   stackoverflow.com  |  "web hosting - Unable to negotiate with XX.XXX.XX.XX: no matching host key type found. Their offer: ssh-dss - Stack Overflow"  |  https://stackoverflow.com/a/34209177
#
#   stackoverflow.com  |  "garbage collection - Understanding git gc --auto - Stack Overflow"  |  https://stackoverflow.com/a/16342938
#
#   unix.stackexchange.com  |  "linux - how can I recursively delete empty directories in my home directory? - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/46326
#
# ------------------------------------------------------------