#!/bin/bash
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

export FULLPATH_FULLCHAIN="fullchain.pem" FULLPATH_PRIVKEY="privkey.pem" FULLPATH_OUTPUT_DIR="${HOME}"; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/bin/openssl_convert_pem_to_pfx?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# DONT USE GIT BASH  - USE WSL INSTEAD
#

ECHO_EXAMPLE_CALL="";
ECHO_EXAMPLE_CALL+="\n";
ECHO_EXAMPLE_CALL+="Info:  Intended runtime syntax for this script:";
ECHO_EXAMPLE_CALL+="\n\n";
ECHO_EXAMPLE_CALL+="  env FULLPATH_FULLCHAIN=\"/path/to/fullchain.pem\" FULLPATH_PRIVKEY=\"/path/to/privkey.pem\" openssl_convert_pem_to_pfx";
ECHO_EXAMPLE_CALL+="\n";

if [ ! -v FULLPATH_FULLCHAIN ] || [ -z "${FULLPATH_FULLCHAIN}" ] || [ ! -e "${FULLPATH_FULLCHAIN}" ]; then
  # Full chain (Certificate + Chain (CABundle)) - Absolute (e.g. "Full") Filepath
  echo "";
  echo "Error:  Required variable \"FULLPATH_FULLCHAIN\" is either unset, empty, or filepath does not exist";
  echo "";
  echo -e "${ECHO_EXAMPLE_CALL}";
  echo "";
elif [ ! -v FULLPATH_PRIVKEY ] || [ -z "${FULLPATH_PRIVKEY}" ] || [ ! -e "${FULLPATH_PRIVKEY}" ]; then
  # Private Key - Absolute (e.g. "Full") Filepath
  echo "";
  echo "Error:  Required variable \"FULLPATH_PRIVKEY\" is either unset, empty, or filepath does not exist";
  echo "";
  echo -e "${ECHO_EXAMPLE_CALL}";
  echo "";
else
  # Output Filepath - Absolute (e.g. "Full") Filepath
  CERT_EXP_DATE="$(openssl x509 -in "${FULLPATH_FULLCHAIN}" -text -noout | sed -rne 's/^\s*[Nn]ot\s*[Aa]fter\s*(:|=)\s*(.+)$/\2/pi' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//';)";
  CERT_EXP_DATE_FILENAME="$(date --utc --date="${CERT_EXP_DATE}" +'%Y-%m-%dT%H-%M-%SZ';)";
  BASENAME_OUTPUT_CERT="certificate.expires-${CERT_EXP_DATE_FILENAME}.pfx";
  # Output Directory - Determine dynamically
  if [ -v FULLPATH_OUTPUT_DIR ] && [ -n "${FULLPATH_OUTPUT_DIR}" ] && [ -d "${FULLPATH_OUTPUT_DIR}" ] && [ -w "${FULLPATH_OUTPUT_DIR}" ]; then
    FULLPATH_OUTPUT_CERT="${FULLPATH_OUTPUT_DIR}/${BASENAME_OUTPUT_CERT}";
  elif [ -w "$(pwd;)" ]; then
    FULLPATH_OUTPUT_CERT="$(pwd;)/${BASENAME_OUTPUT_CERT}";
  else
    FULLPATH_OUTPUT_CERT="${HOME}/${BASENAME_OUTPUT_CERT}";
  fi;
  # Show variable status
  echo "";
  echo "FULLPATH_PRIVKEY = [ ${FULLPATH_PRIVKEY} ]";
  echo "FULLPATH_FULLCHAIN = [ ${FULLPATH_FULLCHAIN} ]";
  echo "";
  echo "BASENAME_OUTPUT_CERT = [ ${BASENAME_OUTPUT_CERT} ]";
  echo "FULLPATH_OUTPUT_CERT = [ ${FULLPATH_OUTPUT_CERT} ]";
  # Convert from [ Privacy-Enhanced Mail (PEM) certificate format ] to [ PFX (pkcs12) certificate format ]
  echo "";
  echo "Calling [ openssl pkcs12 -export -in \"${FULLPATH_FULLCHAIN}\" -inkey \"${FULLPATH_PRIVKEY}\" -out \"${FULLPATH_OUTPUT_CERT}\" ]";
  openssl pkcs12 -export -in "${FULLPATH_FULLCHAIN}" -inkey "${FULLPATH_PRIVKEY}" -out "${FULLPATH_OUTPUT_CERT}";
fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   superuser.com  |  "linux - How to use password argument in via command line to openssl for decryption - Super User"  |  https://superuser.com/a/724987
#
#   unix.stackexchange.com  |  "openssl - How to export CA certificate chain from PFX in PEM format without bag attributes - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/393484
#
# ------------------------------------------------------------