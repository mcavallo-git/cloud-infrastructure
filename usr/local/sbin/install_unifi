#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_unifi" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_unifi?t=$(date +'%s.%N')" | bash;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Instantiate runtime variables

	echo "";
	READ_TIMEOUT=60; read -p "Install Unifi service, now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
	echo "";
	if [ ${RETURN_CODE_READ} -gt 128 ]; then
		echo "Response timed out after ${READ_TIMEOUT}s";
	elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then

		# Install pre-requisite package(s)
		echo "";
		echo "Info:  Calling  [ apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install apt-transport-https ca-certificates wget; ]...";
		apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install apt-transport-https ca-certificates wget;

		# Optionally, force an install of Java version-8
		# echo "";
		# echo "Info:  Calling  [ apt-get -y update; apt-get -y openjdk-8-jre-headless; ]...";
		# apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y openjdk-8-jre-headless;

		# Add the Unifi package repository
		echo "";
		echo "Info:  Calling  [ echo 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | tee \"/etc/apt/sources.list.d/100-ubnt-unifi.list\"; ]...";
		echo 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | tee "/etc/apt/sources.list.d/100-ubnt-unifi.list";

		# Import Unifi's official GPG Key
		echo "";
		echo "Info:  Calling  [ wget -O \"/etc/apt/trusted.gpg.d/unifi-repo.gpg\" \"https://dl.ui.com/unifi/unifi-repo.gpg\"; ]...";
		wget -O "/etc/apt/trusted.gpg.d/unifi-repo.gpg" "https://dl.ui.com/unifi/unifi-repo.gpg";

		# Install Unifi for Debian, Ubuntu, etc.
		echo "";
		echo "Info:  Calling  [ apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install unifi; ]...";
		apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install unifi;

		### Get LAN-Local IPv4(s) - One per NIC
		THIS_LAN_NIC=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\2/p");
		THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.' 2>'/dev/null';);
		if [ -z "${THIS_LAN_IPV4}" ]; then
			THIS_LAN_IPV4=$(hostname -i | awk '{print $1}' 2>'/dev/null';);
		fi;

		# Point the user to the Unifi Controller's URL to continue installation
		echo "";
		echo "Info:  To continue installation, please open the Unifi Controller in-browser via any of the following URLs:";
		echo "";
		echo "            https://$(hostname):8443";
		echo "";
		echo "            https://${THIS_LAN_IPV4}:8443";
		echo "";

	else
		echo "";
		echo "Denied - Skipping command";
	fi;

fi;

# ------------------------------------------------------------
# Citation(s)
#
#   help.ubnt.com  |  "UniFi - How to Install and Update via APT on Debian or Ubuntu"  |  https://help.ubnt.com/hc/en-us/articles/220066768-UniFi-How-to-Install-and-Update-via-APT-on-Debian-or-Ubuntu
#
# ------------------------------------------------------------