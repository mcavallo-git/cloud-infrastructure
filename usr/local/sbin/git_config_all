#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/git_config_all" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec 2>&1 1> "${LOGFILE}";
# exec > >(tee -a "${LOGFILE}" );
# exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "${OSTYPE}" == "linux-gnu"* || "$(uname -s)" == "Linux" ]] && [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------

	ROLLBACK_IFS="${IFS}";
	IFS=$'\n'; # Set the global for-loop delimiter to newlines (ignore spaces)

	ALL_GIT_EXE_PATHS="${USERPROFILE}/_git_exe_paths.txt";
	ALL_SYSTEM_CONFIGS="${USERPROFILE}/_git_configs.system.txt";
	ALL_GLOBAL_CONFIGS="${USERPROFILE}/_git_configs.globals.txt";

	SEARCH_DIRECTORIES=();
	SEARCH_DIRECTORIES+=("${LOCALAPPDATA}/");
	SEARCH_DIRECTORIES+=("${PROGRAMFILES}/");
	SEARCH_DIRECTORIES+=("${PROGRAMFILES} (x86)/");

	echo -n "" > "${ALL_GIT_EXE_PATHS}";
	echo -n "" > "${ALL_SYSTEM_CONFIGS}";
	echo -n "" > "${ALL_GLOBAL_CONFIGS}";

	# git contains a hidden config-file on Windows-instances which may be found within the ProgramData directory
	HIDDEN_CONFIG_WIN32=$(realpath "${PROGRAMDATA:-${ALLUSERSPROFILE}}/Git/config");
	HIDDEN_CONFIG_LINUX=""; MM="${HIDDEN_CONFIG_WIN32/C:/\/c}"; MM="${MM//\\/\/}"; HIDDEN_CONFIG_LINUX=$(realpath "${MM}");
	if [ -f "${HIDDEN_CONFIG_LINUX}" ]; then
		echo "${HIDDEN_CONFIG_LINUX}" >> "${ALL_GLOBAL_CONFIGS}";
	fi;

	for EACH_DIRECTORY in "${SEARCH_DIRECTORIES[@]}"; do

		EACH_DIR_REALPATH=$(realpath "${EACH_DIRECTORY}");

		find "${EACH_DIR_REALPATH}" \
		-name 'git.exe' \
		-print0 \
		2>"/dev/null" \
		| while IFS= read -r -d $'\0' EACH_GIT_EXE; do

			EACH_GIT_WIN32=$(realpath "${EACH_GIT_EXE}");
			EACH_GIT_LINUX=""; MM="${EACH_GIT_WIN32/C:/\/c}"; MM="${MM//\\/\/}"; EACH_GIT_LINUX=$(realpath "${MM}");
			GIT_EXE_ALREADY_NOTED=$(cat "${ALL_GIT_EXE_PATHS}" | grep "${EACH_GIT_LINUX}");
			if [ ! -n "${GIT_EXE_ALREADY_NOTED}" ]; then
				echo "${EACH_GIT_LINUX}" >> "${ALL_GIT_EXE_PATHS}";
			fi;

			SYSTEM_CONF_PATH=$("${EACH_GIT_LINUX}" config --system --list --show-origin | head -n 1 | sed --regexp-extended --quiet --expression='s/^file\:(.+)\s+(.+)=(.+)$/\1/p');
			SYSTEM_CONF_LINUX=""; MM="${SYSTEM_CONF_PATH/C:/\/c}"; MM="${MM//\\/\/}"; SYSTEM_CONF_LINUX=$(realpath "${MM}");
			SYSTEM_ALREADY_NOTED=$(cat "${ALL_SYSTEM_CONFIGS}" | grep "${SYSTEM_CONF_LINUX}");
			if [ ! -n "${SYSTEM_ALREADY_NOTED}" ]; then
				echo "${SYSTEM_CONF_LINUX}" >> "${ALL_SYSTEM_CONFIGS}";
			fi;

			GLOBAL_CONF_PATH=$("${EACH_GIT_LINUX}" config --global --list --show-origin | head -n 1 | sed --regexp-extended --quiet --expression='s/^file\:(.+)\s+(.+)=(.+)$/\1/p');
			GLOBAL_CONF_LINUX=""; MM="${GLOBAL_CONF_PATH/C:/\/c}"; MM="${MM//\\/\/}"; GLOBAL_CONF_LINUX=$(realpath "${MM}");
			GLOBAL_ALREADY_NOTED=$(cat "${ALL_GLOBAL_CONFIGS}" | grep "${GLOBAL_CONF_LINUX}");
			if [ ! -n "${GLOBAL_ALREADY_NOTED}" ]; then
				echo "${GLOBAL_CONF_LINUX}" >> "${ALL_GLOBAL_CONFIGS}";
			fi;

		done;
	done;
	# ------------------------------------------------------------

	# Show all EXE files-found
	# echo "";
	# echo "[EXECUTABLE] git.exe file(s) found:";
	# for EACH_EXE in $(cat "${ALL_GIT_EXE_PATHS}"); do
	# 	echo "  |";
	# 	echo "  |--> ${EACH_EXE}";
	# done;

	# Show all GLOBAL configuration files-found
	# echo "";
	# echo "[GLOBAL] git config file(s) found:";
	# for EACH_CONFIG in $(cat "${ALL_GLOBAL_CONFIGS}"); do
	# 	echo "  |";
	# 	echo "  |--> ${EACH_CONFIG}";
	# done;

	# Show all SYSTEM configuration files-found
	# echo "";
	# echo "[SYSTEM] git config file(s) found:";
	# for EACH_CONFIG in $(cat "${ALL_SYSTEM_CONFIGS}"); do
	# 	echo "  |";
	# 	echo "  |--> ${EACH_CONFIG}";
	# done;

	# ------------------------------------------------------------

	# Apply a specific [ git config ] value to each file found, call this script with inline-params $1 and $2 as follows:
	if [ -n "$1" ] && [ -n "$2" ]; then

		# ------------------------------------------------------------
		# [GLOBAL] SHOW & UPDATE EACH CONFIG-FILE

		echo "";
		echo "[GLOBAL] - Show & Update Git Config-Value(s)";
		echo "  |";
		echo "  |--> Key: [$1]";
		for EACH_CONFIG in $(cat "${ALL_GLOBAL_CONFIGS}"); do
			# Show git config-value (BEFORE update)
			GIT_CONFIG_VALUE=$(git config --file "${EACH_CONFIG}" "$1");
			if [ "$?" != "0" ]; then GIT_CONFIG_VALUE="--unset"; fi;
			echo "  |";
			echo "  |----> File: \"${EACH_CONFIG}\"";
			echo "  |------> Current-Val: [${GIT_CONFIG_VALUE}]";
			if [ "${GIT_CONFIG_VALUE}" == "$2" ]; then
				# Config-value is already up-to-date
				echo "  |------> ✓ Already up-to-date";
			else
				# Perform update on git config-value
				if [ "$2" == "--unset" ]; then
          git config --file "${EACH_CONFIG}" --unset "$1";
				else
          git config --file "${EACH_CONFIG}" --replace-all "$1" "$2";
				fi;
				# Show git config-value (AFTER update)
				GIT_CONFIG_VALUE=$(git config --file "${EACH_CONFIG}" "$1");
				if [ "$?" != "0" ]; then GIT_CONFIG_VALUE="--unset"; fi;
				echo "  |------> Updated Val: [${GIT_CONFIG_VALUE}]";
			fi;
		done;

		# ------------------------------------------------------------
		# [SYSTEM] SHOW & UPDATE EACH CONFIG-FILE

		echo "";
		echo "[SYSTEM] - Show & Update Git Config-Value(s)";
		echo "  |";
		echo "  |--> Key: [$1]";
		for EACH_CONFIG in $(cat "${ALL_SYSTEM_CONFIGS}"); do
			# Show git config-value (BEFORE update)
			GIT_CONFIG_VALUE=$(git config --file "${EACH_CONFIG}" "$1");
			if [ "$?" != "0" ]; then GIT_CONFIG_VALUE="--unset"; fi;
			echo "  |";
			echo "  |----> File: \"${EACH_CONFIG}\"";
			echo "  |------> Current-Val: [${GIT_CONFIG_VALUE}]";
			if [ "${GIT_CONFIG_VALUE}" == "$2" ]; then
				# Config-value is already up-to-date
				echo "  |------> ✓ Already up-to-date";
			else
				# Perform update on git config-value
				if [ "$2" == "--unset" ]; then
          git config --file "${EACH_CONFIG}" --unset "$1";
				else
          git config --file "${EACH_CONFIG}" --replace-all "$1" "$2";
				fi;
				# Show git config-value (AFTER update)
				GIT_CONFIG_VALUE=$(git config --file "${EACH_CONFIG}" "$1");
				if [ "$?" != "0" ]; then GIT_CONFIG_VALUE="--unset"; fi;
				echo "  |------> Updated Val: [${GIT_CONFIG_VALUE}]";
			fi;
		done;

		# ------------------------------------------------------------

	else

		echo "";
		echo "Call with inline params \$1 and \$2 to apply a config-value to every config-file found";
		echo "Example:";
		echo "    > \"$0\" core.autocrlf input";

	fi;

	# ------------------------------------------------------------

	echo "";

	IFS="${ROLLBACK_IFS}"; # Restore the global for-loop delimiter to whatever the value was at the start of this script's runtime

	# ------------------------------------------------------------

fi;

exec &>"/dev/tty";

cat "${LOGFILE}";


# ------------------------------------------------------------
# Citation(s)
#
#   unix.stackexchange.com  |  "Why does process substitution result in a file called /dev/fd/63 which is a pipe?"  |  https://unix.stackexchange.com/a/156088
#
# ------------------------------------------------------------