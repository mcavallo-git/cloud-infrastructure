#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/git_init" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
#
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT:

# Download & run this script
#   Note: Requires 'Git Bash' required for Windows devices ( download from https://git-scm.com/download/win )
LOCAL_BIN="/usr/local/bin/git_init"; curl -H 'Cache-Control: no-cache' -o "${LOCAL_BIN}" -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/git_init?t=$(date +'%s.%N')"; chmod 0755 "${LOCAL_BIN}"; "${LOCAL_BIN}";

# Example Call - Pull an Azure DevOps repository
env REMOTE_HOST="ssh.dev.azure.com" REMOTE_OWNER="ORGANIZATION_NAME/PROJECT_NAME" REMOTE_REPOSITORY="REPOSITORY_NAME" REMOTE_PRIVATE_KEY="PATH_TO_PIVATE_KEY_ON_LOCAL_WORKSTATION" git_init;

# Example Call - Pull a BitBucket repository
env REMOTE_HOST="bitbucket.org" REMOTE_OWNER="GITHUB_REPO_OWNER" REMOTE_REPOSITORY="GITHUB_REPO_NAME" REMOTE_PRIVATE_KEY="PATH_TO_PIVATE_KEY_ON_LOCAL_WORKSTATION" git_init;

# Example Call - Pull a GitHub repository
env REMOTE_HOST="github.com" REMOTE_OWNER="GITHUB_REPO_OWNER" REMOTE_REPOSITORY="GITHUB_REPO_NAME" REMOTE_PRIVATE_KEY="PATH_TO_PIVATE_KEY_ON_LOCAL_WORKSTATION" git_init;

fi;

# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;

# ------------------------------------------------------------

if [ -n "${1}" ] && [ -f "${1}" ]; then
	source "${1}"; # First inline parameter ( $1 ) is the path to another shell script which sets/instantiates all required config variables
fi;

# ------------------------------------------------------------
#
# Ensure that runtime variables are set
#
FAIL_MSG="";

# If acting as the "root" user and the "git" module is not installed, then attempt to install git
if [ -z "$(which git 2>'/dev/null';)" ] && [ "$(id -un)" == "root" ]; then
	if [ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]; then
		# Ubuntu
		echo -e "$(date '+%Y-%m-%d %H:%M:%S') | Git not installed (Ubuntu Linux) - Attempting to install via:";
		echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ---> apt -y update && apt -y install --ignore-missing git;";
		apt -qq -y update && apt -qq -y install --ignore-missing git;
	else
		if [ $(cat /etc/*release | grep -i debian | wc -l) -gt 0 ]; then
			# Debian
			echo -e "$(date '+%Y-%m-%d %H:%M:%S') | Git not installed (Debian Linux) - Attempting to install via:";
			echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ---> apt -y update && apt -y install --ignore-missing git;";
			apt -qq -y update && apt -qq -y install --ignore-missing git;
		else
			if [ $(cat /etc/*release | grep -i centos | wc -l) -gt 0 ]; then
				# CentOS
				echo -e "$(date '+%Y-%m-%d %H:%M:%S') | Git not installed (CentOS Linux) - Attempting to install via:";
				echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ---> yum -y update && yum -y install --skip-broken git;";
				yum -y update && yum -y install --skip-broken git;
			else
				if [ $(cat /etc/*release | grep -i alpine | wc -l) -gt 0 ]; then
					# Alpine
					echo -e "$(date '+%Y-%m-%d %H:%M:%S') | Git not installed (Alpine Linux) - Attempting to install via:";
					echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ---> apk update && apk add git;";
					apk update && apk add git;
				fi;
			fi;
		fi;
	fi;
fi;

echo "";
echo "------------------------------------------------------------";
echo "";

# Fail-out if git is not installed & could not be installed
which git > /dev/null 2>&1; ERROR_CODE=$?;
if [ ${ERROR_CODE} -ne 0 ]; then 
	FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: Git runtime not installed.\n";
fi;

# Verify Repo Host
if [ -z "${REMOTE_HOST}" ]; then
	read -p "  Remote Host/IPv4?  (e.g. github.com)  :  " -t 60 -r;
	REMOTE_HOST="${REPLY}";
	if [ -z "${REMOTE_HOST}" ]; then
		FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: Required variable \$REMOTE_HOST is empty.\n";
	fi;
fi;

# Verify Repo Owner
if [ -z "${REMOTE_OWNER}" ]; then
	read -p "  Remote Repo's Owner? (username/company-name which owns repo)  :  " -t 60 -r;
	REMOTE_OWNER="${REPLY}";
	if [ -z "${REMOTE_OWNER}" ]; then
		FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: Required variable \$REMOTE_OWNER is empty.\n";
	fi;
fi;

# Verify Repo Basename
if [ -z "${REMOTE_REPOSITORY}" ]; then
	read -p "  Remote Repo's Basename? (e.g. name of the repository)  :  " -t 60 -r;
	REMOTE_REPOSITORY="${REPLY}";
	if [ -z "${REMOTE_REPOSITORY}" ]; then
		FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: Required variable \$REMOTE_REPOSITORY is empty.\n";
	fi;
fi;

# Verify Repo SSH Private-Keys
REMOTE_PRIVATE_KEY="${REMOTE_PRIVATE_KEY:-${REMOTE_SSH_KEY}}";
if [ -z "${REMOTE_PRIVATE_KEY}" ]; then
	read -p "  Private-Key for Remote Repo? (e.g. fullpath to RSA key)  :  " -t 60 -r;
	REMOTE_PRIVATE_KEY="${REPLY}";
	if [ -z "${REMOTE_PRIVATE_KEY}" ]; then
		FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: Required variable \$REMOTE_PRIVATE_KEY is empty.\n"; 
	elif [ ! -f "${REMOTE_PRIVATE_KEY}" ]; then
		FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Error: File not found: \$REMOTE_PRIVATE_KEY=\"${REMOTE_PRIVATE_KEY}\".\n";
	fi;
fi;

# Fail-out if any startup errors were found
if [ -n "${FAIL_MSG}" ]; then
	FAIL_MSG="${FAIL_MSG}$(date '+%Y-%m-%d %H:%M:%S') | Exiting after 20s...";
	echo -e "${FAIL_MSG}";
	sleep 20;
	exit 1;
fi;

# Welcome the User
LINE_BREAK="------------------------------------------------------------";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ${LINE_BREAK}";
echo "$(date '+%Y-%m-%d %H:%M:%S') | Git Setup/Config";

# Set default git repos dir
if [ "$(id -un)" != "root" ]; then
	ALL_REPOS_DIR="${HOME}/git";
else
	ALL_REPOS_DIR="/var/lib/git";
fi;

# Ensure that the git repos dir exists
if [ ! -d "${ALL_REPOS_DIR}" ]; then
 	echo "$(date '+%Y-%m-%d %H:%M:%S') | Creating default Git directory \"${ALL_REPOS_DIR}\"";
	mkdir -p "${ALL_REPOS_DIR}";
fi;

# Set default privileges (user:group) for git-repo dirs
MATCH_CHOWN=$(dirname "${ALL_REPOS_DIR}");
GIT_CHOWN_UID=$(ls -ldn $(realpath "${MATCH_CHOWN}") | awk '{print $3}');
GIT_CHOWN_USERNAME=$(getent passwd "${GIT_CHOWN_UID}" | cut -d: -f1); # calling [ id --name 0 ] is invalid
GIT_CHOWN_GID=$(ls -ldn $(realpath "${MATCH_CHOWN}") | awk '{print $4}');
GIT_CHOWN_GROUPNAME=$(id --group --name "${GIT_CHOWN_GID}");

# Set the target checkout branch
CHECKOUT_BRANCH="${CHECKOUT_BRANCH:-${REPO_BRANCH:-${REMOTE_BRANCH:-${BRANCH:-master}}}}";

# Default git username to 'git' (if none is set)
REMOTE_USER_NAME="${REMOTE_USER_NAME:-git}";

# Verify that the git repos-dir has correct ownership & access-privileges set
if [ -n "${GIT_CHOWN_USERNAME}" ] && [ -d "${ALL_REPOS_DIR}" ]; then
 	echo "$(date '+%Y-%m-%d %H:%M:%S') | Setting Git parent directory's file permissions to \"0700\"";
	chmod 0700 "${ALL_REPOS_DIR}";
 	echo "$(date '+%Y-%m-%d %H:%M:%S') | Setting Git parent directory's file ownership to \"${GIT_CHOWN_UID}:${GIT_CHOWN_GID}\"";
	chown -R "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${ALL_REPOS_DIR}";
fi;

# Remove undesired variables from the environment
if [ -n "$(git config --global http.sslCAInfo)" ]; then git config --global --unset http.sslCAInfo; fi; # [global-config]  http.sslCAInfo  (UNSET)
if [ -n "$(git config --global http.sslKey)" ]; then git config --global --unset http.sslKey; fi; # [global-config]  http.sslKey  (UNSET)
if [ -n "$(git config --global http.sslVerify)" ]; then git config --global --unset http.sslVerify; fi; # [global-config]  http.sslVerify  (UNSET)
if [ -n "${GIT_CONFIG_NOSYSTEM}" ]; then unset GIT_CONFIG_NOSYSTEM; fi; # "${GIT_CONFIG_NOSYSTEM="1";
if [ -n "${GIT_CURL_VERBOSE}" ]; then unset GIT_CURL_VERBOSE; fi; # export GIT_CURL_VERBOSE="1";
if [ -n "${GIT_TERMINAL_PROMPT}" ]; then unset GIT_TERMINAL_PROMPT; fi; # export GIT_TERMINAL_PROMPT="0";
if [ -n "${GIT_CEILING_DIRECTORIES}" ]; then unset GIT_CEILING_DIRECTORIES; fi; # export GIT_CEILING_DIRECTORIES="${GIT_LOCAL_CEILING}";
if [ -n "${GIT_WORK_TREE}" ]; then unset GIT_WORK_TREE; fi; # export GIT_WORK_TREE="${GIT_LOCAL_CEILING}/${REMOTE_REPOSITORY}";
if [ -n "${GIT_DIR}" ]; then unset GIT_DIR; fi; # export GIT_DIR="${GIT_WORK_TREE}/.git";
if [ -n "${GIT_CONFIG}" ]; then unset GIT_CONFIG; fi; # export GIT_CONFIG="${GIT_DIR}/config";

# ------------------------------------------------------------
#
# Setup git command(s), filepath(s), URI(s), etc.
#
GIT_HOST_DIR="${ALL_REPOS_DIR}/${REMOTE_HOST}";
if [ ! -d "${GIT_HOST_DIR}" ]; then
	mkdir -p "${GIT_HOST_DIR}" && chmod 700 "${GIT_HOST_DIR}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_HOST_DIR}";
fi;

GIT_LOCAL_CEILING="${GIT_HOST_DIR}/${REMOTE_OWNER}";
if [ ! -d "${GIT_LOCAL_CEILING}" ]; then
	mkdir -p "${GIT_LOCAL_CEILING}" && chmod 700 "${GIT_LOCAL_CEILING}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_LOCAL_CEILING}";
fi;

GIT_WORK_TREE="${GIT_LOCAL_CEILING}/${REMOTE_REPOSITORY}";
GIT_WORK_TREE_REL=".";
if [ ! -d "${GIT_WORK_TREE}" ]; then
	mkdir -p "${GIT_WORK_TREE}" && chmod 700 "${GIT_WORK_TREE}" && chown "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_WORK_TREE}";
fi;

GIT_GITDIR="${GIT_WORK_TREE}/.git";
	GIT_GITDIR_REL="${GIT_WORK_TREE_REL}/.git";

GIT_CLI_NOCONF="git";
# GIT_CLI_NOCONF="${GIT_CLI_NOCONF} -C ${GIT_LOCAL_CEILING}";

GIT_CLI="git";
# GIT_CLI="${GIT_CLI} -C ${GIT_WORK_TREE}";
GIT_CLI="${GIT_CLI} --work-tree=${GIT_WORK_TREE_REL}";
GIT_CLI="${GIT_CLI} --git-dir=${GIT_GITDIR_REL}";

# TARGET REPOSITORY
if [ "${REMOTE_HOST}" == "ssh.dev.azure.com" ]; then
	ORIGIN_GIT="git@${REMOTE_HOST}:v3/${REMOTE_OWNER}/${REMOTE_REPOSITORY}"; # Azure Repos (No ".git" appended)
else
	ORIGIN_GIT="git@${REMOTE_HOST}:${REMOTE_OWNER}/${REMOTE_REPOSITORY}.git"; # Target Repository
fi;

# ORIGIN_HTTPS="https://${REMOTE_USER_NAME}@${REMOTE_HOST}/${REMOTE_OWNER}/${REMOTE_REPOSITORY}.git";
# ORIGIN_HTTPS="https://${REMOTE_HOST}/${REMOTE_OWNER}/${REMOTE_REPOSITORY}.git";

# Override SSH runtime's default/current config settings (which is what Git connects through) to force RSA key usage
export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no -F /dev/null";

# ------------------------------------------------------------
#
# Final runtime values - echo them so that they're shown to the user & saved to the logfile (for possible future reference)
#
echo "$(date '+%Y-%m-%d %H:%M:%S') | ------------------------------------------------------------";
echo "$(date '+%Y-%m-%d %H:%M:%S') |";
echo "$(date '+%Y-%m-%d %H:%M:%S') | Runtime Variables:";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  REMOTE_HOST=\"${REMOTE_HOST}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  REMOTE_OWNER=\"${REMOTE_OWNER}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  REMOTE_REPOSITORY=\"${REMOTE_REPOSITORY}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  CHECKOUT_BRANCH=\"${CHECKOUT_BRANCH}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  ORIGIN_GIT=\"${ORIGIN_GIT}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_CHOWN_UID=\"${GIT_CHOWN_UID}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_CHOWN_USERNAME=\"${GIT_CHOWN_USERNAME}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_CHOWN_GID=\"${GIT_CHOWN_GID}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_CHOWN_GROUPNAME=\"${GIT_CHOWN_GROUPNAME}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_CLI=\"${GIT_CLI}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_SSH_COMMAND=\"${GIT_SSH_COMMAND}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |  GIT_WORK_TREE=\"${GIT_WORK_TREE}\"";
echo "$(date '+%Y-%m-%d %H:%M:%S') |";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ------------------------------------------------------------";

# ------------------------------------------------------------
#
#  ! ! !   BEGIN PROCESSING COMPILED VARIABLES/VALUES   ! ! !
#

# Create default-directory for SSH's configs
if [ ! -d "${HOME}/.ssh" ]; then
	mkdir -p "${HOME}/.ssh"; chmod 700 "${HOME}/.ssh";
fi;

# Gather SSH Public Keys for target Hostname
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> Pulling public key(s) from host \"${REMOTE_HOST}\":";
# ssh-keyscan "${REMOTE_HOST}" >> "${HOME}/.ssh/known_hosts"; # Enforce public-key checking
ssh -o StrictHostKeyChecking=no -T "${ORIGIN_GIT}"; # Skip checking public-keys

# Clone repo (if non existent)
FIRST_CLONE_OF_REPO="0";
if [ ! -d "${GIT_GITDIR}" ]; then
	FIRST_CLONE_OF_REPO="1";
# 	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI_NOCONF} clone ${ORIGIN_GIT}";
# 	cd "${GIT_LOCAL_CEILING}";
# 	export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no -F /dev/null";
# 	# export GIT_SSH_COMMAND="ssh -4 -i '${REMOTE_PRIVATE_KEY}'";
# 	${GIT_CLI_NOCONF} clone "${ORIGIN_GIT}";
# 	unset GIT_SSH_COMMAND;
fi;

cd "${GIT_WORK_TREE}";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git init";
${GIT_CLI} init;

# [config] remote.origin.url
LOCAL_CURRENT_ORIGINS=$(${GIT_CLI} remote);
if [ -n "${LOCAL_CURRENT_ORIGINS}" ]; then # remote origin
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git remote set-url origin \"${ORIGIN_GIT}\"";
	${GIT_CLI} remote set-url origin "${ORIGIN_GIT}";
else
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git remote add origin \"${ORIGIN_GIT}\"";
	${GIT_CLI} remote add origin "${ORIGIN_GIT}";
fi;

# [config]  core.sshcommand
# ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no -F /dev/null";
${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}' -o StrictHostKeyChecking=no";
# ${GIT_CLI} config core.sshcommand "ssh -4 -i '${REMOTE_PRIVATE_KEY}'";

# [config]  core.compression  (UNSET)
if [ -n "$(${GIT_CLI} config core.compression)" ]; then
	${GIT_CLI} config --unset core.compression;
fi;

# [config]  user.name
if [ -n "${REMOTE_USER_NAME}" ]; then
	LOCAL_CURRENT_USER_NAME=$(${GIT_CLI} config user.name);
	if [ "${REMOTE_USER_NAME}" != "${LOCAL_CURRENT_USER_NAME}" ]; then
		# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} config user.name ${REMOTE_USER_NAME}";
		echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git config user.name ${REMOTE_USER_NAME}";
		${GIT_CLI} config user.name "${REMOTE_USER_NAME}";
	fi;
fi;

# [config]  user.email
if [ -n "${REMOTE_USER_EMAIL}" ]; then
	LOCAL_CURRENT_USER_EMAIL=$(${GIT_CLI} config user.email);
	if [ "${LOCAL_CURRENT_USER_EMAIL}" != "${REMOTE_USER_EMAIL}" ]; then
		# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} config user.email ${REMOTE_USER_EMAIL}";
		echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git config user.email ${REMOTE_USER_EMAIL}";
		${GIT_CLI} config user.email "${REMOTE_USER_EMAIL}";
	fi;
fi;

# [config]  remote.origin.prune  +  auto-pruning (upon fetching / pulling)
REPO_PRUNE_ACTIVE=$(${GIT_CLI} config remote.origin.prune);
if [ "${REPO_PRUNE_ACTIVE}" != "true" ]; then
	# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} config remote.origin.prune true";
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git config remote.origin.prune true";
	${GIT_CLI} config remote.origin.prune true;
fi;

# fetch all
# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} fetch --all";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git fetch --all";
${GIT_CLI} fetch --all;

# new clones - automatically checkout master first
if [ "${FIRST_CLONE_OF_REPO}" == "1" ]; then
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> FIRST_CLONE_OF_REPO == 1, PULLING MASTER FIRST";
	# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} checkout -f master";
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git checkout -f master";
	${GIT_CLI} checkout -f master;
	# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} pull -v";
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git pull -v";
	${GIT_CLI} pull -v;
fi;

# get current branch
# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} branch | grep '*' | awk '{print \$2}'  # (get current branch)";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git branch | grep '*' | awk '{print \$2}'  # (get current branch)";
LOCAL_CURRENT_BRANCH=$(${GIT_CLI} branch | grep '*' | awk '{print $2}');
echo "${LOCAL_CURRENT_BRANCH}";
if [ -n "${LOCAL_CURRENT_BRANCH}" ]; then
	REMOTE_BRANCH_EXISTS=$(${GIT_CLI} branch -a | awk '{print $1}' | grep -w remotes/origin/${CHECKOUT_BRANCH});
	if [ -n "${REMOTE_BRANCH_EXISTS}" ]; then
		# checkout specific branch if not already on it
		if [ "${CHECKOUT_BRANCH}" != "${LOCAL_CURRENT_BRANCH}" ]; then
			# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} checkout -f ${CHECKOUT_BRANCH}";
			echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git checkout -f ${CHECKOUT_BRANCH}";
			${GIT_CLI} checkout -f "${CHECKOUT_BRANCH}";
		else
			echo "SKIPPING CHECKOUT: Already on branch \"${CHECKOUT_BRANCH}\"";
		fi;
		# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} reset --hard \"origin/${CHECKOUT_BRANCH}\"";
		echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git reset --hard \"origin/${CHECKOUT_BRANCH}\"";
		${GIT_CLI} reset --hard "origin/${CHECKOUT_BRANCH}";
	else
		echo "$(date '+%Y-%m-%d %H:%M:%S') | Error: Branch \"${CHECKOUT_BRANCH}\" not found on remote.";
		echo "$(date '+%Y-%m-%d %H:%M:%S') | Exiting after 20s...";
		# ${GIT_CLI} checkout -b "${CHECKOUT_BRANCH}"; <-- CREATES BRANCH
		sleep 20;
		exit 1;
	fi;
else
	# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} checkout -f ${CHECKOUT_BRANCH}";
	echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git checkout -f ${CHECKOUT_BRANCH}";
	${GIT_CLI} checkout -f "${CHECKOUT_BRANCH}";
fi;

# pull the desired branch
# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} pull -v";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git pull -v";
${GIT_CLI} pull -v;

# show final config
# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git config --list --show-origin";
# ${GIT_CLI} config --list --show-origin;
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git config --list";
${GIT_CLI} config --list;

# echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> ${GIT_CLI} status";
echo "$(date '+%Y-%m-%d %H:%M:%S') | ---> git status";
${GIT_CLI} status;
echo "$(date '+%Y-%m-%d %H:%M:%S') | ${LINE_BREAK}";

chown -R "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${GIT_WORK_TREE}";
chmod -R 0700 "${GIT_WORK_TREE}";
# chown -R "${GIT_CHOWN_UID}:${GIT_CHOWN_GID}" "${ALL_REPOS_DIR}";
# chmod -R 0700 "${ALL_REPOS_DIR}";

# ------------------------------------------------------------
#
# Remove undesired variables from the environment
if [ -n "${GIT_CONFIG_NOSYSTEM}" ]; then unset GIT_CONFIG_NOSYSTEM; fi; # "${GIT_CONFIG_NOSYSTEM="1"; fi;
if [ -n "${GIT_CURL_VERBOSE}" ]; then unset GIT_CURL_VERBOSE; fi; # export GIT_CURL_VERBOSE="1"; fi;
if [ -n "${GIT_TERMINAL_PROMPT}" ]; then unset GIT_TERMINAL_PROMPT; fi; # export GIT_TERMINAL_PROMPT="0"; fi;
if [ -n "${GIT_CEILING_DIRECTORIES}" ]; then unset GIT_CEILING_DIRECTORIES; fi; # export GIT_CEILING_DIRECTORIES="${GIT_LOCAL_CEILING}"; fi;
if [ -n "${GIT_WORK_TREE}" ]; then export GIT_WORK_TREE="${GIT_WORK_TREE}"; fi;
if [ -n "${GIT_DIR}" ]; then unset GIT_DIR; fi; # export GIT_DIR="${GIT_WORK_TREE}/.git"; fi;
if [ -n "${GIT_CONFIG}" ]; then unset GIT_CONFIG; fi; # export GIT_CONFIG="${GIT_DIR}/config"; fi;

# ------------------------------------------------------------
#
# Exit Gracefully
#
# exit 0;
#
#
# ------------------------------------------------------------
#
# Citation(s)
#
#   git-scm.com  |  "Git - Environment Variables"  |  https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables
#
# ------------------------------------------------------------