#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/set_hostname" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	echo "";

	# ------------------------------------------------------------
	#
	# This script modifies a Linux instance's host & domain name(s)
	#
	#	Instantiate this command-line utility:
	#	>		vi "/usr/local/sbin/set_hostname"; chmod 0755 "/usr/local/sbin/set_hostname";
	#
	### Run using "DRY-RUN" mode:
	#	>		set_hostname "localhost.localdomain" --dry-run "1";
	#
	### Run using "LIVE" mode:
	#	>		set_hostname "localhost.localdomain" --dry-run "0";
	#
	#
	# ------------------------------------------------------------
	# Parse inline arguments (passed to current script)
	#

	ARGS=("$@");
	COUNT_ARGS=${#ARGS[@]};
	ARGS_HOSTNAME_DEFINED=0;
	ADD_WAN_IPV4=0;
	DRY_RUN=1;
	# Walk through any inline-arguments passed to this function
	for (( i=0;i<$COUNT_ARGS;i++ )); do

		EACH_ARG=${ARGS[${i}]};
		# BASH_ARG_NUMBER=$((${i}+1)); # Bash arg-number is one greater than the ARGS arg-number -> this is due-to bash's ${0} arg, which contains the base-command

		# Check if this is the last inline-argument or if there are more to follow
		if [ $((${i}+1)) -eq ${COUNT_ARGS} ]; then # if this is the last argument
			NEXT_ARG="";
		else
			NEXT_ARG=${ARGS[$((${i}+1))]};
			if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
				NEXT_ARG="";
			fi;
		fi;

		if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

			# Parse inline hostname
			if [ ${i} -eq 0 ] && [ -n "${EACH_ARG}" ] && [[ "${EACH_ARG}" != "-"* ]]; then # Allow the first argument to be the hostname (without needing --hostname before it)
				NEXT_ARG="${EACH_ARG}";
				EACH_ARG="--hostname";
			fi;

			if [ "${EACH_ARG}" == "--name" ] || [ "${EACH_ARG}" == "--hostname" ]; then
				if [ "${ARGS_HOSTNAME_DEFINED}" == "1" ]; then
					echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Inline parameters contain more than one value for hostname. Please call again using one, single value";
					exit 1;
				else
					ARGS_HOSTNAME_DEFINED=1;
					SET_HOSTNAME="${NEXT_ARG}";
					SET_FQDN="${SET_HOSTNAME}.${SET_DOMAIN}";
				fi;
			fi;

			if [ "${EACH_ARG}" == "--wan" ]; then # --force
				ADD_WAN_IPV4=1;
			fi;

			# Parse dry-run / non-dry-run calls
			if [ "${EACH_ARG}" == "--force" ]; then # --force
				DRY_RUN="0";
			elif [ "${EACH_ARG}" == "--dry-run" ] && [ -n "${NEXT_ARG}" ] && [ "${NEXT_ARG}" == "0" ]; then # --dry-run 0
				DRY_RUN="0";
			elif [ "${EACH_ARG}" == "--dry-run" ] && [ -n "${NEXT_ARG}" ] && [ "${NEXT_ARG}" == "false" ]; then # --dry-run false
				DRY_RUN="0";
			fi;

		fi;
	done;

	# ------------------------------------------------------------

	# if [ -n "${1}" ] && [ -z "${SET_HOSTNAME}" ]; then
	# 	SET_HOSTNAME="${1}";
	# fi;

	if [ -z "${SET_HOSTNAME}" ]; then

		# Required variable empty: SET_HOSTNAME
		echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Command \"$(realpath ${0};)\" called with empty hostname:  \"\" - Please call again using:  --hostname VALID-HOSTNAME";
		exit 1;

	elif [ "${SET_HOSTNAME}" != "$(echo ${SET_HOSTNAME} | grep --extended-regexp '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$';)" ]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Command \"$(realpath ${0};)\" called with invalid hostname:  \"${SET_HOSTNAME}\" - Please call again using:  --hostname VALID-HOSTNAME";
		exit 1;
	
	else

		SET_FQDN="${SET_HOSTNAME}";

		SUBSTRING_ONLY_PERIODS="${SET_FQDN//[^.]}";
		FQDN_COUNT_PERIODS="${#SUBSTRING_ONLY_PERIODS}";
		if [ "${FQDN_COUNT_PERIODS}" == "0" ]; then
			SET_HOSTNAME="${SET_FQDN}";
			SET_DOMAIN="localdomain";
		else
			SET_HOSTNAME=$(echo "${SET_FQDN}" | cut --delimiter="." --fields=1 --only-delimited);
			SET_DOMAIN=$(echo "${SET_FQDN}" | cut --delimiter="." --fields=1 --complement --only-delimited);
		fi;

		SET_FQDN="${SET_HOSTNAME}.${SET_DOMAIN}";

		echo "";
		echo "$(date +'%Y-%m-%d %H:%M:%S') Info: SET_HOSTNAME:   \"${SET_HOSTNAME}\"";
		echo "$(date +'%Y-%m-%d %H:%M:%S') Info: SET_DOMAIN:   \"${SET_DOMAIN}\"";
		echo "$(date +'%Y-%m-%d %H:%M:%S') Info: SET_FQDN:   \"${SET_FQDN}\"";

		# ------------------------------------------------------------
		# Determine Linux distro
		#

		IS_CENTOS=$(if [[ $(cat /etc/*release | grep -i centos | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
		IS_UBUNTU=$(if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
		IS_ALPINE=$(if [[ $(cat /etc/*release | grep -i alpine | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
		IS_DEBIAN=$(if [[ $(cat /etc/*release | grep -i debian | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
		THIS_LINUX_DISTRO="$(if [[ ${IS_CENTOS} -gt 0 ]]; then echo CENTOS; elif [[ ${IS_UBUNTU} -gt 0 ]]; then echo UBUNTU; elif [[ ${IS_ALPINE} -gt 0 ]]; then echo ALPINE; elif [[ ${IS_DEBIAN} -gt 0 ]]; then echo DEBIAN; else echo UNKNOWN; fi; )";

		# ------------------------------------------------------------
		# 
		#

		LAN_IPV4="$(hostname -i | awk '{print $1}')";
		

		# ------------------------------------------------------------
		# External server(s) to resolve WAN-IP through
		#
		RESOLVER_1="https://icanhazip.com";
		RESOLVER_2="https://ipecho.net/plain";
		RESOLVER_3="https://ident.me";
		RESOLVER_4="https://bot.whatismyipaddress.com";

		### Get WAN-Outgoing IPv4
		if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_1}"); fi; RESOLVER_USED="${RESOLVER_1}";
		if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_2}"); fi; RESOLVER_USED="${RESOLVER_2}";
		if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_3}"); fi; RESOLVER_USED="${RESOLVER_3}";
		if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_4}"); fi; RESOLVER_USED="${RESOLVER_4}";

		### Get LAN-Local's Gateway IPv4
		GATEWAY_LAN_IPV4=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\1/p");

		### Get LAN-Local IPv4(s) - One per NIC
		THIS_LAN_NIC=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\2/p");

		### Get LAN-Local IPv4, as well as LAN-Local IPv6 (if exists)
		THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.');
		THIS_LAN_IPV6=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\:');

		echo "";

		### Show Resolved WAN IPv4
		if [ -n "${THIS_WAN_IPV4}" ]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Info: WAN Outgoing IPv4 resolved to \"${THIS_WAN_IPV4}\"";
		else 
			echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Unable to resolve outgoing WAN IPv4 Address - If you wish to manually set it, please set \${THIS_WAN_IPV4} to your desired value and re-run this script.";
			exit 1;
		fi;

		### Show Resolved Gateway IPv4
		if [ -n "${GATEWAY_LAN_IPV4}" ]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Info: LAN Gateway IPv4 resolved to \"${GATEWAY_LAN_IPV4}\"";
		else 
			echo "$(date +'%Y-%m-%d %H:%M:%S') Warning: Unable to resolve LAN's Gateway-IPv4.";
		fi;

		### Show Resolved LAN IPv4
		if [ -n "${THIS_LAN_IPV4}" ]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Info: LAN Local IPv4 resolved to \"${THIS_LAN_IPV4}\"";
		else 
			echo "$(date +'%Y-%m-%d %H:%M:%S') Error: Unable to resolve LAN Local IPv4 Address  - If you wish to manually set it, please set \${THIS_LAN_IPV4} to your desired value, then re-run this script";
			exit 1;
		fi;

		### Show Resolved LAN IPv6
		if [ -n "${THIS_LAN_IPV6}" ]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Info: LAN Local IPv6 resolved to \"${THIS_LAN_IPV6}\"";
		else 
			echo "$(date +'%Y-%m-%d %H:%M:%S') Warning: Unable to resolve LAN Local IPv6 Address";
		fi;

		# ------------------------------------------------------------
		#	If Dry-Run mode is off, require user to confirm changes
		#

		if [[ "${DRY_RUN}" == "0" ]]; then
			echo "";
			read -p "  --> Apply aforementioned edits to hostname/domain, now? (y/n)  " -n 1 -t 60 -r; # Await single keypress
			if [[ $REPLY =~ ^[Yy]$ ]]; then
				echo "$(date +'%Y-%m-%d %H:%M:%S') Info: - Confirmed by user - Proceeding with changes to hostname & domain-name...";
			else
				echo "$(date +'%Y-%m-%d %H:%M:%S') Info: - Cancelled by user - Exiting after 60s...";
				sleep 60;
				exit 1;
			fi;
		fi;
		echo "";

		# ------------------------------------------------------------
		# /etc/hostname
		#
		HOSTNAME_FILE="/etc/hostname";
		if [[ -f "${HOSTNAME_FILE}" ]]; then
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				echo "${SET_HOSTNAME}" > "${HOSTNAME_FILE}";
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY HOSTNAME VIA [ ${HOSTNAME_FILE} ]";
			fi;
		fi;

		# ------------------------------------------------------------
		# /etc/hosts
		#
		HOSTS_FILE="/etc/hosts";
		if [[ -f "${HOSTS_FILE}" ]]; then

			# Alert user they're NOT including WAN IPv4
			if [ ${ADD_WAN_IPV4} -eq 0 ]; then
				echo "";
				echo "$(date +'%Y-%m-%d %H:%M:%S') Info:  Excluding WAN IPv4 hostname declaration";
				echo "                    To resolve hostname \"${SET_HOSTNAME}.${SET_DOMAIN}\" to the current WAN IPv4 \"${THIS_WAN_IPV4}\", call using the \"--wan\" argument";
				echo "                    (Intended for cloud-based servers, where a given IPv4 address is associated with only one, unique instance of linux)";
			fi;

			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				echo ""; echo "HOSTS FILE (BEFORE-EDITS)" && cat "${HOSTS_FILE}";
				TEMP_HOSTS="${HOSTS_FILE}_TEMP";
				cp -f "${HOSTS_FILE}" "${TEMP_HOSTS}";

				# Remove existing local-hostname declarations
				sed_1_remove_LAN="/^${THIS_LAN_IPV4}/c\ ";
				sed -ie "${sed_1_remove_LAN}" "${TEMP_HOSTS}"; # Remove LAN (which are NOT the loopback IPv4 Address, e.g. leave 127.0.0.1 unaffected)
				sed_2_remove_WAN="/^${THIS_WAN_IPV4}/c\ ";
				sed -ie "${sed_2_remove_WAN}" "${TEMP_HOSTS}"; # Remove WAN

				# Add new local-hostname declarations
				if [ ${ADD_WAN_IPV4} -eq 1 ]; then

					# Add LAN & WAN IPv4 hostname declaration
					sed --in-place -e "/^127.0.0.1/ {
						a\ ${THIS_LAN_IPV4} ${SET_HOSTNAME} ${SET_HOSTNAME}.${SET_DOMAIN}
						a\ ${THIS_WAN_IPV4} ${SET_HOSTNAME} ${SET_HOSTNAME}.${SET_DOMAIN}
						c\ 127.0.0.1 localhost localhost.localdomain
					}" "${TEMP_HOSTS}";

				else

					# Add LAN IPv4 hostname declaration (do NOT add WAN declaration)
					sed --in-place -e "/^127.0.0.1/ {
						a\ ${THIS_LAN_IPV4} ${SET_HOSTNAME} ${SET_HOSTNAME}.${SET_DOMAIN}
						c\ 127.0.0.1 localhost localhost.localdomain
					}" "${TEMP_HOSTS}";

				fi;

				# Remove empty (or whitespace-only) lines
				sed_4_remove_whitespace_lines='/^\s*$/d';
				sed --in-place -e "${sed_4_remove_whitespace_lines}" "${TEMP_HOSTS}";

				# Trim spaces/tabs off the start of each line
				sed_5_left_trim_whitespace='s/^\s*//g';
				sed --in-place -e "${sed_5_left_trim_whitespace}" "${TEMP_HOSTS}";
				#
				cp -f "${TEMP_HOSTS}" "${HOSTS_FILE}" && rm -f "${TEMP_HOSTS}";
				echo "";
				echo "HOSTS FILE (AFTER-EDITS)" && cat "${HOSTS_FILE}";
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY HOSTNAME VIA [ ${HOSTS_FILE} ]";
			fi;
		fi;

		# ------------------------------------------------------------
		# centos 6
		#
		if [[ -f "/etc/sysconfig/network" ]]; then
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				sed --in-place -e "/^HOSTNAME=/c\HOSTNAME=${SET_HOSTNAME}.${SET_DOMAIN}" "/etc/sysconfig/network";
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY HOSTNAME VIA [ /etc/sysconfig/network ]";
			fi;
		fi;

		# ------------------------------------------------------------
		# debian 7 / slackware / ubuntu 14.04
		#
		if [[ -f "/etc/init.d/hostname.sh" ]]; then
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				/etc/init.d/hostname.sh;
			else # dry-run
				echo "";
				echo "APPLY HOSTNAME VIA [ /etc/init.d/hostname.sh ]";
			fi;
		fi;

		# ------------------------------------------------------------
		# arch / centos 7 / debian 8 / fedora / ubuntu 16.04 and above
		#
		if [[ $(hostnamectl | wc -l) -gt 0 ]]; then
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				hostnamectl set-hostname "${SET_HOSTNAME}";
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY HOSTNAME VIA [ hostnamectl ]";
			fi;
		fi;

		if [ ${DRY_RUN} -eq 1 ]; then
			echo "";
			echo "$(date +'%Y-%m-%d %H:%M:%S') Info:  Dry run mode is ON  (network settings, \"/etc/hosts\", & associated configs will not be affected)";
			echo "                    To disable dry run mode, call this script again using argument the \"--dry-run 0\" or \"--force\"";
		fi;

		# ------------------------------------------------------------
		# Apply Changes
		#
		if [[ -f "/etc/init.d/network" ]]; then # CentOS-RHEL distros
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				echo "";
				echo "Network Manager must be restarted to apply changes ( required command [ /etc/init.d/network restart ] )";
				read -p "   |--> Restart Network Manager, now? (y/n)  " -n 1 -t 60 -r; # Await single keypress
				echo "";
				if [[ $REPLY =~ ^[Yy]$ ]]; then
					echo "";
					echo "Restarting Network Manager via command [ /etc/init.d/network ]";
					/etc/init.d/network restart;
				else
					echo "";
					echo "Postponing Network Manager restart";
					exit 1;
				fi;
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY CHANGES VIA [ /etc/init.d/network restart ]";
			fi;
		else # [other] distros
			if [[ "${DRY_RUN}" == "0" ]]; then # NOT a dry-run
				echo "";
				echo "Reboot Required to apply changes to hostname";
				read -p "   |--> Reboot this workstation/server, now? (y/n)  " -n 1 -t 60 -r; # Await single keypress
				echo "";
				if [[ $REPLY =~ ^[Yy]$ ]]; then
					echo "";
					echo "Rebooting...";
					shutdown -r now;
				else
					echo "";
					echo "Postponing Reboot";
					exit 1;
				fi;
			# else # dry-run
			# 	echo "";
			# 	echo "APPLY CHANGES VIA [ shutdown -r now ]";
			fi;
		fi;
		echo "";

	fi;

fi;

sleep 1;

# ------------------------------------------------------------
#
#	Citation(s)
#
#		www.linode.com  |  "Getting Started with Linode"  |  https://www.linode.com/docs/getting-started/#setting-the-hostname
#
#		support.rackspace.com  |  "Change a server's hostname in CentOS"  |  https://support.rackspace.com/how-to/centos-hostname-change/
#
#		stackoverflow.com  |  "Count occurrences of a char in a string using Bash"  |  https://stackoverflow.com/a/16679640
#
#		computerhope.com  |  "Linux test command"  |  https://www.computerhope.com/unix/test.htm
#
#		jblevins.org  |  "Linux Hostname Configuration"  |  https://jblevins.org/log/hostname
#
# ------------------------------------------------------------