#!/bin/bash
#
# LOCAL_SBIN="/usr/local/bin/docker_sniper" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT REMOTELY:

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/docker_sniper?t=$(date +'%s.%N')" | bash;

# Snipe a specific docker
DOCKER_NAME="pihole"; curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/docker_sniper?t=$(date +'%s.%N')" | bash -s -- "${DOCKER_NAME}";


fi;
# ------------------------------------------------------------
#
#    Docker Snipe   -   by Cavalol
#       Requires a single argument ($1): The name of the docker to snipe
#         1.  Stops Instances similar to '$1'
#         2.  Removes Containers similar to '$1'
#         3.  Removes Images similar to '$1'
#         4.  Removes Networks
#         5.  Performs [docker system prune]

THIS_SCRIPT="docker_sniper";

# Header
echo -e "\nStarting ${THIS_SCRIPT} at [ $(date +'%Y-%m-%dT%H:%M:%S%z')] "

if [ "$#" -ne 1 ]; then
  # Program was called with anything other than a single parameter
  printf "\n   Error: '${THIS_SCRIPT}' Requires [1] Parameter (Docker-Substring-Target), Received [${#}] Parameters\n";
else 

  # Correct # of parameters (just $1) - holds the name of dockers to stop
  DOCKER_NAME="${DOCKER_NAME:-${1}}";
  printf "\nDocker Snipe - \"${DOCKER_NAME}\"\n"
  
  docker_ps_count=$(docker ps | grep ${DOCKER_NAME} | awk '{print $1}' | wc -l);
  docker_ps_all_count=$(docker ps --all | grep ${DOCKER_NAME} | awk '{print $1}' | wc -l);
  docker_networks_all_count=$(docker network ls --format='{{.ID}}  {{.Name}}' | grep ${DOCKER_NAME} | awk '{print $1}' | wc -l);
  docker_images_all_count=$(docker images --all | grep ${DOCKER_NAME} | awk '{print $3}' | wc -l);
  docker_images_skipOS_count=$(docker images --all | grep ${DOCKER_NAME} | grep -v 'centos' | grep -v 'node' | awk '{print $3}' | wc -l);
  
  HEAD_TEXT="matching \"${DOCKER_NAME}\" stored locally - ";
  
  # Dockers Instances - Stop all running-Instances whichmatch the given Search-String
  printf "[ ${docker_ps_count} ] Instances ${HEAD_TEXT}";
  if [ $docker_ps_count -gt 0 ]; then
    printf "STOPPING via \"docker stop ...\":\n";
    docker ps | grep ${DOCKER_NAME};
    docker stop $(docker ps | grep ${DOCKER_NAME} | awk '{print $1}')
    printf "\n";
  else
    printf "No Action Necessary\n";
  fi;
  
  # Docker Containers - Remove all Containers which match the given Search-String
  printf "[ ${docker_ps_all_count} ] Containers ${HEAD_TEXT}";
  if [ $docker_ps_all_count -gt 0 ]; then
    printf "FORCE-REMOVING via \"docker rm --force ...\":\n";
    docker ps --all | grep ${DOCKER_NAME};
    docker rm --force $(docker ps --all | grep ${DOCKER_NAME} | awk '{print $1}');
    printf "\n";
  else
    printf "No Action Necessary\n";
  fi;
  
  # Kill Images
  printf "[ ${docker_images_all_count} ] Images ${HEAD_TEXT}";
  if [ $docker_images_all_count -gt 0 ]; then
    printf "FORCE-REMOVING via \"docker rmi --force ...\":\n";
    docker images --all | grep ${DOCKER_NAME};
    # docker rmi --force $(docker images --all | grep ${DOCKER_NAME} | grep -v 'centos' | grep -v 'node' | awk '{print $3}');
    docker rmi --force $(docker images --all | grep ${DOCKER_NAME} | awk '{print $3}');
    printf "\n";
  else
    printf "No Action Necessary\n";
  fi;
  
  # Kill Networks
  printf "[ ${docker_networks_all_count} ] Networks ${HEAD_TEXT}";
  if [ $docker_networks_all_count -gt 0 ]; then
    printf "FORCE-REMOVING via \"docker network rm ...\":\n";
    docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none' | grep ${DOCKER_NAME};
    docker network rm $(docker network ls --format='{{.ID}}  {{.Name}}' | grep -v 'bridge' | grep -v 'host' | grep -v 'none' | grep ${DOCKER_NAME} | awk '{print $1}');
    printf "\n";
  else
    printf "No Action Necessary\n";
  fi;
  
  # Prune System
  printf "[ - ] Clean up - Running generic sweep \"docker system prune --filter 'label=\"${DOCKER_NAME}\"' --force\":\n";
  docker system prune --force --filter 'label="'${DOCKER_NAME}'"' --force;
  
fi;
  
# Footer
echo -e "\nFinished ${THIS_SCRIPT} at [ $(date +'%Y-%m-%dT%H:%M:%S%z')]"
echo "";
exit 0;