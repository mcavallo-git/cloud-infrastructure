#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/sudoer_status" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sudoer_status?t=$(date +'%s.%N')" | bash;

# Set the current sudoer (sudo user behind the 'root' user) as a sudoer & do not require their password when using the 'sudo' command
test -n "${SUDO_USER}" && curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sudoer_status?t=$(date +'%s.%N')" | bash -s -- --user "${SUDO_USER}" --allow --nopass;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/sudoer_status_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/sudoer_status"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  # Parse inline arguments (passed to current script)
  ARGS=("$@");
  COUNT_ARGS=${#ARGS[@]};
  
  EDIT_ACTION="";
  TARGET_USER="";
  SUDO_REQUIRES_USERPASS="1";
  EXAMPLE_VALID_CALL="Info --> Please specify a valid local user via:  >  sudoer_status --user \"\${SUDO_USER}\" --allow --nopass;""\n";

  # Walk through any inline arguments passed to this function
  for (( i=0;i<$COUNT_ARGS;i++ )); do

    EACH_ARG=${ARGS[${i}]};

    # Check if this is the last inline argument or if there are more to follow
    if [ $((${i}+1)) -eq ${COUNT_ARGS} ]; then # if this is the last argument
      NEXT_ARG="";
    else
      NEXT_ARG=${ARGS[$((${i}+1))]};
      if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline arguments starting with "--..." to use the next bash argument as an associated value if it, also, starts with "--..."
        NEXT_ARG="";
      fi;
    fi;

    if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

      # ------------------------------------------------------------
      if [ "${EACH_ARG}" == "--allow" ] || [ "${EACH_ARG}" == "--grant" ] || [ "${EACH_ARG}" == "--add" ] || [ "${EACH_ARG}" == "--deny" ] || [ "${EACH_ARG}" == "--revoke" ] || [ "${EACH_ARG}" == "--remove" ]; then
        if [ -n "${EDIT_ACTION}" ]; then
          # Error: Multiple add/remove actions defined
          echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error --> Invalid inline-argument(s) detected:   Must not call function with more than one argument out of:  [ \"--allow\"  \"--add\"  \"--revoke\"  \"--remove\" ]"; exit 1;
        elif [ "${EACH_ARG}" == "--allow" ] || [ "${EACH_ARG}" == "--grant" ]  || [ "${EACH_ARG}" == "--add" ]; then
          # Add user as a sudoer
          EDIT_ACTION="ALLOW";
        elif [ "${EACH_ARG}" == "--deny" ]  || [ "${EACH_ARG}" == "--revoke" ] || [ "${EACH_ARG}" == "--remove" ]; then
          # Remove user from sudoers
          EDIT_ACTION="REVOKE";
        else
          # Show user's sudoer-status
          EDIT_ACTION="";
        fi;
      fi;

      # ------------------------------------------------------------
      if [ "${EACH_ARG}" == "--user" ] && [ -n "${NEXT_ARG}" ]; then
        if [ -n "${TARGET_USER}" ]; then
          # Error: Multiple users defined
          echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error --> Must define one, single user to modify (called with multiple usernames:  \"${NEXT_ARG}\" & \"${NEXT_USER}\")"; exit 1;

        elif [ $(id -u ${NEXT_ARG} > /dev/null 2>&1; echo $?) -eq 1 ]; then
          # Error: Nonexistent target user
          echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error --> User not found as a local user: \"${NEXT_ARG}\"";
          echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ${EXAMPLE_VALID_CALL}"; exit 1;

        else
          TARGET_USER="${NEXT_ARG}";
        fi;
      fi;

      # ------------------------------------------------------------
      # Skip requiring user pass when they call the 'sudo' command
      if [ "${EACH_ARG}" == "--nopass" ]; then
        SUDO_REQUIRES_USERPASS="0";
      fi;

      # ------------------------------------------------------------

    fi;

  done;


  # Verify validity of argument(s) passed to script
  if [ -z "${TARGET_USER}" ]; then 

    # Error: Empty/Unset target user
    echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error --> Target user empty / unset";
    echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ${EXAMPLE_VALID_CALL}"; exit 1;

  elif [ $(id -u ${TARGET_USER} > /dev/null 2>&1; echo $?) -eq 1 ]; then

    # Error: User not found
    echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error --> User not found: \"${TARGET_USER}\"";
    echo -e "\n$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ${EXAMPLE_VALID_CALL}"; exit 1;

  else

    SUDOERS_D="";
    if [ -d "/etc/sudoers.d" ]; then
      SUDOERS_D="/etc/sudoers.d";
    elif [ -d "/etc/local/sudoers.d" ]; then
      SUDOERS_D="/etc/local/sudoers.d";
    fi;

    if [ -z "${SUDOERS_D}" ]; then
      echo "";
      echo "Error:  No sudoers.d directory found amongst \"/etc/sudoers.d/\" and \"/etc/local/sudoers.d\"";

    else
      
      # ------------------------------------------------------------
      if [ "${EDIT_ACTION}" == "ALLOW" ]; then 
        # Allow user to masquerade as the root user (via the 'sudo' command)

        SUDOER_FILE_CONTENTS="";
        if [[ "${SUDO_REQUIRES_USERPASS}" == "1" ]]; then
          SUDOER_FILE_CONTENTS="${TARGET_USER} ALL=(ALL) ALL";
        else
          SUDOER_FILE_CONTENTS="${TARGET_USER} ALL=(ALL) NOPASSWD:ALL";
        fi;

        # Add the user-specific 'sudo' config file
        SUDOER_FILE_FULLPATH="${SUDOERS_D}/${TARGET_USER}";
        echo "${SUDOER_FILE_CONTENTS}" > "${SUDOER_FILE_FULLPATH}" && \
        chmod 400 "${SUDOER_FILE_FULLPATH}" && \
        chown "root:root" "${SUDOER_FILE_FULLPATH}";

        GROUP_SUDOERS="sudo";
        # Create the group 'sudo' (if it doesn't already exist)
        if [ -z "$(getent group sudo)" ]; then
          groupadd "${GROUP_SUDOERS}";
        fi;

        # Add the user to the group 'sudo'
        usermod -aG "${GROUP_SUDOERS}" "${TARGET_USER}";

      # ------------------------------------------------------------
      elif [ "${EDIT_ACTION}" == "REVOKE" ]; then
        # Deny user from masquerading as the root user (via the 'sudo' command)

        # Remove the user-specific 'sudo' config file
        SUDOER_FILE_FULLPATH="${SUDOERS_D}/${TARGET_USER}";
        if [ -f "${SUDOER_FILE_FULLPATH}" ]; then
          rm -f "${SUDOER_FILE_FULLPATH}";
        fi;

        # Remove the user from the group 'sudo'
        GROUP_SUDOERS="sudo";
        gpasswd -d "${TARGET_USER}" "${GROUP_SUDOERS}";

      else
        # Check whether or not a user can masquerade as the root user (via the 'sudo' command)
        echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Info --> To grant sudoer privileges, call with: >  sudoer_status --user ${TARGET_USER} --grant";
        echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Info --> To revoke sudoer privileges, call with: >  sudoer_status --user ${TARGET_USER} --revoke";

      fi;

    # ------------------------------------------------------------
    # Show sudoer status for target user
    sudo -l -U "${TARGET_USER}";

    fi;


    # ------------------------------------------------------------
  fi;

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   stackoverflow.com  |  "Check Whether a User Exists"  |  https://stackoverflow.com/a/14811915
#
# ------------------------------------------------------------