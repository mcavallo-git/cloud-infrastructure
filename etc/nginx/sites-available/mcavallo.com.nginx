# ------------------------------------------------------------
#
#==--  Determine if request will need to be redirected
#
# 
# map "$hostname:$request_uri" $map_uri_type {
#   default 0;
#   "~*mcavallo.com:meta$" meta;  # ~* [regex match, case-insensitive]
# }
# 
# 
# ------------------------------------------------------------
#
#==--  mcavallo.com
#==--  *.mcavallo.com
#
server {
  listen 80;
  listen 443 ssl http2 default_server;
  listen [::]:80;
  listen [::]:443 ssl http2 default_server;
  server_name mcavallo.com;
  # server_name ~^(?<subdomain>.+\.)?mcavallo\.com$;
  include "/etc/nginx/nginx_error_locations.conf";
  access_log "/var/log/nginx/access_mcavallo.com.log" excessive;
  if ($scheme != "https") {
    return 301 https://$host$request_uri; # Force request-upgrade from HTTP(80) to HTTPS(443)
  }
  ssl_certificate "/etc/letsencrypt/live/mcavallo.com/fullchain.pem";
  ssl_certificate_key "/etc/letsencrypt/live/mcavallo.com/privkey.pem";
  ssl_trusted_certificate "/etc/letsencrypt/live/mcavallo.com/chain.pem";

  # ------------------------------------------------------------
  #                      ~* [regex match, case-insensitive]
  if ($map_subdomain_uri ~* "^(cash|cashapp){1,2}$") {
    return 302 "https://cash.me/mcavallo";
  }
  if ($map_subdomain_uri ~* "^(cloud-infrastructure){1,2}$") {
    return 302 "https://github.com/mcavallo-git/cloud-infrastructure";
  }
  if ($map_subdomain_uri ~* "^(cv|linkedin|resume){1,2}$") {
    return 302 "https://linkedin.com/in/matt-cavallo";
  }
  if ($map_subdomain_uri ~* "^(git|repos){1,2}$") {
    return 302 "https://github.com/mcavallo-git?tab=repositories";
  }
  if ($map_subdomain_uri ~* "^(good-credit){1,2}$") {
    return 302 "https://raw.githubusercontent.com/mcavallo-git/Coding/main/images/archive/credit-score-factors.jpg";
  }
  if ($map_subdomain_uri ~* "^(meta){1,2}$") {
    return 200 "udm.mcavallo.net\nusg.mcavallo.net\nlt.mcavallo.work\nws.mcavallo.work";
  }
  if ($map_subdomain_uri ~* "^(linux){1,2}$") {
    return 302 "https://github.com/mcavallo-git/cloud-infrastructure#cloud-infrastructure";
  }
  if ($map_subdomain_uri ~* "^(pay|paypal){1,2}$") {
    return 302 "https://www.paypal.me/cavalol"; # Note: Use [ https://paypal.me/cavalol/X ] to request $X
  }
  if ($map_subdomain_uri ~* "^(pc|pcpartpicker){1,2}$") {
    return 302 "https://pcpartpicker.com/b/bH7TwP";
  }
  if ($map_subdomain_uri ~* "^(ps|sync-ps){1,2}$") {
    return 302 "https://raw.githubusercontent.com/mcavallo-git/Coding/main/sync.ps1?t=$msec";
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}$") {
    return 302 "https://open.spotify.com/user/italianbasegard";  #  Spotify Profile
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}/1$") {
    return 302 "https://open.spotify.com/playlist/3SfJ6rFJsjcPuHeFKpBGPu?si=yIz9vG9KT-ucNEL6fu3JHQ";  #  Spotify Playlist [ Driving ]
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}/2$") {
    return 302 "https://open.spotify.com/playlist/7rnogAsAA7QO7RErbd0XM6?si=b4e007d3490e435a";  #  Spotify Playlist [ Shindig, ya dig ]
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}/3$") {
    return 302 "https://open.spotify.com/playlist/0f6ikyxba7qXRDxmv6pLvH?si=4e94462a954b4626";  #  Spotify Playlist [ Electronica - Chill ]
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}/4$") {
    return 302 "https://open.spotify.com/playlist/7HeDI1N5X1FuB5joKnk2Fm?si=5f73c987a59746b4";  #  Spotify Playlist [ Electronica - Hype ]
  }
  if ($map_subdomain_uri ~* "^(spotify){1,2}/5$") {
    return 302 "https://open.spotify.com/playlist/20OcRbSy40B1qTVI3mVs4A?si=3eb7033e12314b0a";  #  Spotify Playlist [ Electronica - Retro ]
  }
  if ($map_subdomain_uri ~* "^(venmo){1,2}$") {
    return 302 "https://venmo.com/cavalol";
  }
  if ($map_subdomain_uri ~* "^(youtube){1,2}$") {
    return 302 "https://youtu.be/1CJIw-Rxleo";
  }

  # ------------------------------------------------------------
  # Shellscript Requests (commonly Linux-based bash scripts)
  #
  #   curl -sL https://mcavallo.com/sh | bash -s -- --all;
  #
  #                 ~ [regex match, case-sensitive]
  if ($map_uri_type ~ "^((shellscript)|(shellscript-bin)|(shellscript-sbin)|(shellscript-sync))$") {
    return 302 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main${map_uri_sh}?t=$msec";
  }

  # ------------------------------------------------------------
  # Fallthrough Request Handler
  #  - Is overridden by any matched nginx directive which either [ occurrs earlier in the current nginx server {...} directive's block ] or [ is a location block which has the longest 'matched' length ]
  #
  location / {
    #                    ~* [regex match, case-insensitive]
    if ($http_user_agent ~* "^curl") {
      return 302 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/main/usr/local/sbin/sync_cloud_infrastructure?t=$msec";
    }
    #                    !~* [inversed regex, case-insensitive]
    if ($http_user_agent !~* "^curl") {
      return 302 "https://github.com/mcavallo-git/Coding/blob/main/README.md#readme";
    }
  }


  # ------------------------------------------------------------
  #                ~* [regex match, case-insensitive]
  # if ($map_subdomain ~* "^cv$") {
  #   root /var/www/html/wordpress; # webroot
  #   index index.php;
  #   location / {
  #     try_files $uri $uri/ /index.php?$args;
  #   }
  #            ~* [regex match, case-insensitive]
  #   location ~* \.php$ {  #  *.php requests
  #     try_files $uri $uri/ /index.php?$args;
  #     fastcgi_read_timeout 120;
  #     fastcgi_index   index.php;
  #     include         fastcgi_params;
  #     fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
  #     fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
  #     fastcgi_pass    unix:/run/php/php7.2-fpm.sock;
  #   }
  # }

}


# ------------------------------------------------------------
### Enable NGINX Host
#
# DN="mcavallo.com"; NG="/etc/nginx/sites-available/${DN}.nginx"; echo "" > ${NG}; vi ${NG}; ln -sf ${NG} /etc/nginx/sites-enabled/${DN}; reload_nginx;
#
#
# ------------------------------------------------------------
### Create/Renew SSL Certificate (Wildcard, Let's Encrypt using [ _acme-challenge ] TXT records)
#
# DN="mcavallo.com"; certbot certonly --no-eff-email --manual --manual-public-ip-logging-ok --server https://acme-v02.api.letsencrypt.org/directory --preferred-challenges dns-01 -d "${DN}" -d "*.${DN}"; certbot certificates -d "${DN}"; test -x "/usr/local/sbin/reload_nginx" && /usr/local/sbin/reload_nginx;
#
#
# ------------------------------------------------------------
### Check SSL Certificate Expiration Date
#
### Check ALL sites' expiration dates:
#
#   echo ""; for DN in amyrazavi.com cavalol.com cava.lol cava.sh centos.sh curl.rest mcavallo.com mcavallo.work rhel.sh; do echo -n "DN=[ $(printf '%-15s' "${DN}";) ]   "; echo | openssl s_client -servername "${DN}" -connect "${DN}:443" 2>'/dev/null' | openssl x509 -noout -dates | grep 'notAfter'; done; echo "";
#
### Check SINGLE site's expiration date:
#
# DN="mcavallo.com"; echo | openssl s_client -servername "${DN}" -connect "${DN}:443" 2>'/dev/null' | openssl x509 -noout -dates | grep 'notAfter';
#
#
# ------------------------------------------------------------
### Remove Domain(s) & Revoke Certificate(s)
###   |--> Deletes NGINX Files & Symlinks
###   |--> Deletes LetsEncrypt Files
###   |--> Revokes Certificate thru LetsEncrypt (Invalidates the certificate on the Certificate-Authority's end)
#
# DN="mcavallo.com"; certbot certificates; certbot revoke --cert-path "/etc/letsencrypt/live/${DN}/fullchain.pem"; certbot delete --cert-name "${DN}"; find "/etc/letsencrypt/" -name "*${DN}*"; unlink "/etc/nginx/sites-enabled/${DN}"; rm "/etc/nginx/sites-available/${DN}".nginx; certbot certificates;
#
#
# ------------------------------------------------------------
#
# Citation(s)
#
#   nginx.org  |  "Alphabetical index of variables"  |  https://nginx.org/en/docs/varindex.html
#
#   nginx.org  |  "NGINX - Core Module Variables"  |  https://nginx.org/en/docs/http/ngx_http_core_module.html#variables
#
#   serverfault.com  |  "How to get substring of a string with nginx - Server Fault"  |  https://serverfault.com/a/1056548
#
#   serverfault.com  |  "Nginx redirect non-existant files on https to http with try_files - Server Fault"  |  https://serverfault.com/a/411955
#
#   serverfault.com  |  "Reply with 200 from Nginx config without serving a file"  |  https://serverfault.com/a/491817
#
#   serversforhackers.com  |  "Mapping Headers in Nginx"  |  https://serversforhackers.com/c/nginx-mapping-headers
#
#   stackoverflow.com  |  "nginx reverse proxy disable cache"  |  https://stackoverflow.com/a/56257749
#
#   stackoverflow.com  |  "Disable nginx cache for JavaScript files"  |  https://stackoverflow.com/a/45285696
#
#   www.digitalocean.com  |  "conditional within an "if" in Nginx | DigitalOcean"  |  https://www.digitalocean.com/community/questions/conditional-within-an-if-in-nginx?answer=42998
#
# ------------------------------------------------------------