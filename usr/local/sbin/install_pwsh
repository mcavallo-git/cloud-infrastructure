#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_pwsh" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_pwsh?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# LOCAL_SBIN="/usr/local/sbin/install_pwsh" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_pwsh_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/install_pwsh"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  
  if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then
    #
    # UBUNTU Environment
    #
    OS_VERSION_MAJOR=$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\1/p');
    OS_VERSION_MINOR=$(cat /etc/*release | grep -i VERSION_ID | sed --regexp-extended --quiet --expression='s/^VERSION_ID="([0-9]+)\.([0-9]+)"$/\2/p');

    if [ "${OS_VERSION_MAJOR}" == "20" ] && [ "${OS_VERSION_MINOR}" == "04" ]; then
      # UBUNTU 20.04
      sudo apt-get update -y;
      sudo apt-get install -y wget apt-transport-https software-properties-common;
      wget -q "https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb";
      sudo dpkg -i "packages-microsoft-prod.deb";
      sudo apt-get update -y;
      sudo apt-get install -y "powershell";

    elif [[ ${OS_VERSION_MAJOR} -ge 19 ]]; then
      # UBUNTU 19.x
      sudo snap install powershell --classic; # "PowerShell Core, for Linux, is published to the Snap store for easy installation (and updates). This is the preferred method.

    elif [[ ${OS_VERSION_MAJOR} -ge 18 ]]; then
      # UBUNTU 18.x
      DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb";
      wget -q "${DOWNLOAD_URL}" -O $(basename "${DOWNLOAD_URL}"); # Download the Microsoft repository GPG keys
      sudo dpkg -i $(basename "${DOWNLOAD_URL}"); # Register the Microsoft repository GPG keys
      sudo apt-get update -y; # Update the list of products
      sudo add-apt-repository "universe"; # Enable the "universe" repositories
      sudo apt-get install -y "powershell"; # Install PowerShell

    elif [[ ${OS_VERSION_MAJOR} -lt 18 ]] && [[ ${OS_VERSION_MAJOR} -ge 16 ]]; then
      # UBUNTU 16.x
      DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb";
      wget -q "${DOWNLOAD_URL}" -O $(basename "${DOWNLOAD_URL}"); # Download the Microsoft repository GPG keys
      sudo dpkg -i $(basename "${DOWNLOAD_URL}"); # Register the Microsoft repository GPG keys
      sudo apt-get update -y; # Update the list of products
      sudo apt-get install -y "powershell"; # Install PowerShell
      sudo ln -sf $(readlink -f $(which pwsh 2>'/dev/null')) "/usr/bin/powershell"; # Redirect "powershell" to use "pwsh" command

    elif [[ ${OS_VERSION_MAJOR} -lt 16 ]] && [[ ${OS_VERSION_MAJOR} -ge 14 ]]; then
      # UBUNTU 14.x
      DOWNLOAD_URL="https://packages.microsoft.com/config/ubuntu/14.04/packages-microsoft-prod.deb";
      wget -q "${DOWNLOAD_URL}" -O $(basename "${DOWNLOAD_URL}"); # Download the Microsoft repository GPG keys
      sudo dpkg -i $(basename "${DOWNLOAD_URL}"); # Register the Microsoft repository GPG keys
      sudo apt-get update -y; # Update the list of products
      sudo apt-get install -y "powershell"; # Install PowerShell

    fi;

  fi;


  if [ "$(which pwsh 2>'/dev/null')" == "" ]; then
    # UNKNOWN/UNHANDLED OPERATING SYSTEM
    echo "";
    echo "Unhandled version of Linux:";
    echo "------------------------------------------------------------";
    cat /etc/*release;
    echo "------------------------------------------------------------";
    echo "";
    echo "Please see Microsoft's tutorial page for installing PowerShell Core @:";
    echo " |    ";
    echo " |--> https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux";
  else
    echo "";
    echo "Testing PowerShell Core by calling [ pwsh -Command \"get-childitem env:\" ]...";
    echo "------------------------------------------------------------";
    pwsh -Command "get-childitem env:"
    echo "------------------------------------------------------------";
    echo "";
  fi;

  echo "";
  echo "Calling [ pwsh --version; ]...";
  pwsh --version;
  echo "";
  
  # pwsh; # Start PowerShell

fi;


# -------------------------------------------------------------
#
# Citation(s)
#
#   docs.microsoft.com  |  "Installing PowerShell Core on Linux"  |  https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux
#
#   docs.microsoft.com  |  "Installing PowerShell on Ubuntu - PowerShell | Microsoft Docs"  |  https://docs.microsoft.com/en-us/powershell/scripting/install/install-ubuntu
#
# ------------------------------------------------------------