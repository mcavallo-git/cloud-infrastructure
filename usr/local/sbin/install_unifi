#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_unifi" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_unifi?t=$(date +'%s.%N')" | bash;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Instantiate runtime variables

	echo "";
	READ_TIMEOUT=60; read -p "Install Unifi service, now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
	echo "";
	if [ ${RETURN_CODE_READ} -gt 128 ]; then
    echo "Response timed out after ${READ_TIMEOUT}s";
	elif [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then

    if [ -n "${1}" ]; then
      #
      # Allow user to pass a single argument ($1) being a specific version of the UniFi Controller to attempt to install
      #  |
      #  |--> Ex)  install_unifi 5.10.23
      #  |
      #  |--> Uses bash convenience scripts from glennr.nl --> view available scripts & compatible versions @ https://glennr.nl/s/unifi-network-controller
      #
      SOURCE_URL="https://get.glennr.nl/unifi/install/unifi-${1}.sh";
      echo "";
      echo "Info:  Testing URL for validity:  [ ${SOURCE_URL} ]";
      # check whether URL returns an HTTP code of 200 (e.g. if the website exists and responds 'normally')
      if [ "$(curl -Is ${SOURCE_URL} | head -n 1 | awk '{print $2}')" == "200" ]; then
        # VALID URL
        # Install [ specific-revision'ed ] Unifi Controller via Bash convenience script
        TMP_FILE="/tmp/unifi-install.sh";
        echo "";
        echo "Info:  Calling  [ mkdir -p \"/tmp\"; if [ -f \"${TMP_FILE}\" ]; then rm -f \"${TMP_FILE}\"; fi; wget -O \"${TMP_FILE}\" \"${SOURCE_URL}\"; chmod 0700 \"${TMP_FILE}\"; bash \"${TMP_FILE}\"; ]...";
        mkdir -p "/tmp"; if [ -f "${TMP_FILE}" ]; then rm -f "${TMP_FILE}"; fi; wget -O "${TMP_FILE}" "${SOURCE_URL}"; chmod 0700 "${TMP_FILE}"; bash "${TMP_FILE}";

      else
        # INVALID URL
        echo "";
        echo "Error:  Invalid URL - Failed to return an HTTP code of 200";
        echo "";
        echo "Info:  Browse to the following URL to view available bash convenience scripts for installing specific versions of the UniFi Controller";
        echo "  |";
        echo "  |-->   https://glennr.nl/s/unifi-network-controller";
        echo "";
        echo "Info:  Once you have your desired version of the UniFi controller to install, call this script again with the version as the first inline argument (\$1)";
        echo "  |";
        echo "  |-->  Ex) install_unifi 5.10.23";
        echo "";
        exit 1;
      fi;

    else
    
      USE_DOCKER_CONTAINER=0;
      if [ $(which docker 2>'/dev/null' | wc -l;) -gt 0 ]; then
        if [ $(which docker-compose 2>'/dev/null' | wc -l;) -gt 0 ]; then
          # If docker & docker-compose are both already installed, offer to install the service as a docker container
          echo "";
          READ_TIMEOUT=60; read -p "Install/run UniFi from a Docker container? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
          if [ ${RETURN_CODE_READ} -le 128 ] && [ -n "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
            USE_DOCKER_CONTAINER=1;
          fi;
        fi;
      fi;
      
      if [ "${USE_DOCKER_CONTAINER}" == "1" ]; then
        # Install/run service as a Docker container

        echo "";
        echo "Info:  Calling  [ mkdir -p \"/var/lib/docker-compose/unifi\"; ]...";
        mkdir -p "/var/lib/docker-compose/unifi";

        echo "";
        echo "Info:  Calling  [ curl -ssL \"https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/var/lib/docker-compose/unifi/docker-compose.yml\" -o \"/var/lib/docker-compose/unifi/docker-compose.yml\"; ]...";
        curl -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/var/lib/docker-compose/unifi/docker-compose.yml" -o "/var/lib/docker-compose/unifi/docker-compose.yml";

        echo "";
        echo "Info:  Calling  [ docker-compose -f \"/var/lib/docker-compose/unifi/docker-compose.yml\" up -d; ]...";
        docker-compose -f "/var/lib/docker-compose/unifi/docker-compose.yml" up -d;

      else
        # Install/run service from Host OS (non-containerized)

        if [ 1 -eq 1 ]; then

          # Install [ latest-version'ed ] Unifi Controller via Bash convenience script
          SOURCE_URL="https://get.glennr.nl/unifi/install/install_latest/unifi-latest.sh";
          FALLBACK_URL="https://raw.githubusercontent.com/mcavallo-git/Coding/master/ubiquiti/convenience-scripts/unifi-controller/ubuntu-18.04/unifi-5.10.23.sh";
          SOURCE_URL="${FALLBACK_URL}";
          TMP_FILE="/tmp/unifi-install.sh";
          echo "";
          echo "Info:  Calling  [ mkdir -p \"/tmp\"; if [ -f \"${TMP_FILE}\" ]; then rm -f \"${TMP_FILE}\"; fi; wget -O \"${TMP_FILE}\" \"${SOURCE_URL}\"; bash \"${TMP_FILE}\"; ]...";
          mkdir -p "/tmp"; if [ -f "${TMP_FILE}" ]; then rm -f "${TMP_FILE}"; fi; wget -O "${TMP_FILE}" "${SOURCE_URL}"; bash "${TMP_FILE}";

        else

          # Install pre-requisite package(s)
          echo "";
          echo "Info:  Calling  [ apt-get -y update; apt-get -y install apt-transport-https ca-certificates openjdk-8-jre-headless wget; ]...";
          apt-get -y update; apt-get -y install apt-transport-https ca-certificates openjdk-8-jre-headless wget;

          # Import MongoDB's official GPG Key
          echo "";
          echo "Info:  Calling  [ wget -qO - \"https://www.mongodb.org/static/pgp/server-3.4.asc\" | apt-key add -; ]...";
          wget -qO - "https://www.mongodb.org/static/pgp/server-3.4.asc" | apt-key add -;

          # Add the MongoDB package repository
          echo "";
          echo "Info:  Calling  [ echo \"deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list; ]...";
          echo "deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list;

          # Install MongoDB for Debian-based Linux distros
          echo "";
          echo "Info:  Calling  [ apt-get -y update; apt-get -y install mongodb-org; ]...";
          apt-get -y update; apt-get -y install mongodb-org;

          # Import Unifi's official GPG Key
          echo "";
          echo "Info:  Calling  [ wget -O /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ui.com/unifi/unifi-repo.gpg; apt-key adv --keyserver keyserver.ubuntu.com --recv 06E85760C0A52C50; ]...";
          wget -O /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ui.com/unifi/unifi-repo.gpg; apt-key adv --keyserver keyserver.ubuntu.com --recv 06E85760C0A52C50;

          # Add the Unifi package repository
          echo "";
          echo "Info:  Calling  [ echo 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | tee /etc/apt/sources.list.d/100-ubnt-unifi.list; ]...";
          echo 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | tee /etc/apt/sources.list.d/100-ubnt-unifi.list;

          # Install Unifi for Debian-based Linux distros
          echo "";
          echo "Info:  Calling  [ apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install unifi; ]...";
          apt-get -y update; apt-mark hold openjdk-11-*; apt-get -y install unifi;
        
        fi;

      fi;

    fi;

    # Get LAN-Local IPv4
    THIS_LAN_NIC=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\2/p");
    THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.' 2>'/dev/null';);
    if [ -z "${THIS_LAN_IPV4}" ]; then
      THIS_LAN_IPV4=$(hostname -i | awk '{print $1}' 2>'/dev/null';);
    fi;

    # Point the user to the Unifi Controller's URL to continue installation
    echo "------------------------------------------------------------";
    echo "";
    echo "Info:  Support/Help Guides:";
    echo "";
    echo "          https://community.ui.com/questions/UniFi-Installation-Scripts-or-UniFi-Easy-Update-Script-or-UniFi-Lets-Encrypt-or-Ubuntu-16-04-18-04-/ccbc7530-dd61-40a7-82ec-22b17f027776";
    echo "";
    echo "          https://help.ui.com/hc/en-us/articles/220066768-UniFi-How-to-Install-Update-via-APT-on-Debian-or-Ubuntu";
    echo "";
    echo "------------------------------------------------------------";
    echo "";
    echo "Info:  Browse to:";
    echo "";
    echo "         UniFi Controller (Hostname):   https://$(hostname):8443";
    echo "";
    echo "         UniFi Controller (LAN-IPv4):   https://${THIS_LAN_IPV4}:8443";
    echo "";
    echo "------------------------------------------------------------";

	else
    echo "";
    echo "Denied - Skipping command";
	fi;

fi;

# ------------------------------------------------------------
# Citation(s)
#
#   glennr.nl  |  "Glenn R. - UNIFI NETWORK CONTROLLER SCRIPTS"  |  https://glennr.nl/s/unifi-network-controller
#
#   help.ui.com  |  "UniFi - How to Install and Update via APT on Debian or Ubuntu â€“ Ubiquiti Networks Support and Help Center"  |  https://help.ui.com/hc/en-us/articles/220066768-UniFi-How-to-Install-Update-via-APT-on-Debian-or-Ubuntu
#
#   help.ui.com  |  "UniFi - How to Set Up a UniFi Network Controller â€“ Ubiquiti Networks Support and Help Center"  |  https://help.ui.com/hc/en-us/articles/360012282453-UniFi-How-to-Set-Up-a-UniFi-Network-Controller
#
#   hub.docker.com  |  "linuxserver/unifi-controller | Docker Hub"  |  https://hub.docker.com/r/linuxserver/unifi-controller
#
#   sysinfo.io  |  "unifi-controller - sysinfo.io > scripts > linux > unifi-controller"  |  https://sysinfo.io/scripts/linux/unifi-controller/
#
#   unix.stackexchange.com  |  "monitoring - Health check of web page using curl - Unix & Linux Stack Exchange"  |  https://unix.stackexchange.com/a/84820
#
#   www.ui.com  |  "Ubiquiti - Downloads"  |  https://www.ui.com/download/?q=UniFi%20Network%20Controller
#
# ------------------------------------------------------------