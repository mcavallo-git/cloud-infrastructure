#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_nginx" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_nginx?t=$(date +'%s.%N')" | bash;

fi;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  # Install NGINX Web Server
  SERVICE_NAME="nginx";

  if [ $(which apt-get 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then  # Distros: Debian, Ubuntu, etc.
    apt-get -y update; apt-get -y install "dpkg-dev";
    add-apt-repository "ppa:nginx/stable";
    apt-get -y update; apt-get -y install "nginx-full";
  elif [ $(which yum 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then  # Distros: Fedora, Oracle Linux, Red Hat Enterprise Linux, CentOS, etc.
    yum -y check-update; yum -y install "epel-release";
    yum -y check-update; yum -y install "nginx";
  fi;


  # ------------------------------------------------------------
  # Autostart the service on bootup (as well as right now)
  #
  if \
    [ "$(systemctl is-enabled ${SERVICE_NAME}.service 2>'/dev/null';)" != "enabled" ] || \
    [ "$(systemctl is-active ${SERVICE_NAME}.service 2>'/dev/null';)" != "active" ] || \
    [ $(systemctl is-enabled ${SERVICE_NAME}.service 1>'/dev/null' 2>&1; echo $?;) -ne 0 ] || \
    [ $(systemctl is-active ${SERVICE_NAME}.service 1>'/dev/null' 2>&1; echo $?;) -ne 0 ]; \
  then
    echo "Info:  Service \"${SERVICE_NAME}\" is not both \"enabled\" and \"active\", currently";
    echo "Info:  Calling  [ systemctl enable \"${SERVICE_NAME}.service\" --now; ]  ...";
    systemctl enable "${SERVICE_NAME}.service" --now; # "enable --now" autostarts service at bootup && starts service immediately
  fi;


  # ------------------------------------------------------------
  # Setup NGINX
  SERVICE_RET_CODE=$(/bin/systemctl list-unit-files --no-legend --no-pager --full "${SERVICE_NAME}.service" | grep "^${SERVICE_NAME}.service" 1>'/dev/null' 2>&1; echo $?;);
  if [ ${SERVICE_RET_CODE} -eq 0 ]; then

    # ------------------------------------------------------------
    # Check the NGINX service's status
    nginx -v;
    /usr/sbin/service "${SERVICE_NAME}" status;

    # ------------------------------------------------------------
    # Update Diffie-Hellman Parameter
    if [ ! -f "/etc/ssl/certs/dhparam.pem" ]; then
      DH_KEY_SIZE_BITS=2048;
      echo "Creating Diffie-Hellman parameter with key size of [ ${DH_KEY_SIZE_BITS}-bit ] @ filepath \"/etc/ssl/certs/dhparam.pem\"...";
      openssl dhparam -out "/etc/ssl/certs/dhparam.pem" ${DH_KEY_SIZE_BITS};
    fi;

    # ------------------------------------------------------------
    # Configure the Firewall as-needed
    FIREWALL_SERVICE="firewalld";
    SERVICE_RET_CODE=$(/usr/sbin/service "${FIREWALL_SERVICE}" status --no-pager --full 1>'/dev/null' 2>&1; echo $?;);
    if [ ${SERVICE_RET_CODE} -eq 0 ]; then
      # Open necessary firewall port(s)
      SERVICE_ENABLED_GREP=$(/usr/sbin/service "${FIREWALL_SERVICE}" status --no-pager --full | grep '; enabled');
      if [ -n "${SERVICE_ENABLED_GREP}" ]; then
        echo "";
        echo "------------------------------------------------------------";
        firewall-cmd --info-service={http,https};
        echo "------------------------------------------------------------";
        echo -e "\n""Info:  Opening ports for \"{http,https}\" service(s) in \"${FIREWALL_SERVICE}\" service...\n";
        firewall-cmd --set-default-zone=public && \
        firewall-cmd --permanent --zone=public --add-service={http,https} && \
        firewall-cmd --reload && \
        firewall-cmd --list-all;
      fi;
    fi;


    # Configure SELinux as-needed
    if [ $(which selinuxenabled 1>'/dev/null' 2>&1; echo $?;) -eq 0 ] && [ $(which getsebool 1>'/dev/null' 2>&1; echo $?;) -eq 0 ] && [ $(which setsebool 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then
      if [ $(selinuxenabled; echo $?;) -eq 0 ]; then
        # SELinux is currently enabled
        SELINUX_BOOL_WEBSERVER="httpd_can_network_connect";
        if [ $(getsebool ${SELINUX_BOOL_WEBSERVER} | grep 'on$' | wc -l;) -eq 0 ]; then 
          # SELinux Web-Server boolean is currently disabled --> enable it
          echo -e "\n""Info:  Setting SELinux boolean parameter \"${SELINUX_BOOL_WEBSERVER}\" to \"on\"\n";
          setsebool -P ${SELINUX_BOOL_WEBSERVER} "on";
        fi;
      else
        # SELinux already enabled
        echo -e "\n""Info: Skipped SELinux web-server configuration (SELinux is currently disabled)";
      fi;
    fi;


    # ------------------------------------------------------------
    # (SKIPPED/DISABLED) - Install NGINX's Geo-IP Module
    if [ 0 -eq 1 ]; then
      if [ $(which apt-get 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then  # Distros: Debian, Ubuntu, etc.
        add-apt-repository "ppa:maxmind/ppa";
        apt -y update;
        apt -y install geoip-database geoip-database-extra php-geoip;
        apt -y install geoipupdate;
        # Locate the geoip database(s)
        dpkg -L geoip-database | grep '\.dat'; dpkg -L geoip-database-extra  | grep '\.dat';
      fi;
    fi;

  fi;

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   nginx.org  |  "Module ngx_http_geoip_module"  |  https://nginx.org/en/docs/http/ngx_http_geoip_module.html
#
#   nginx.org  |  "Module ngx_stream_geoip_module"  |  https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html
#
#   www.digitalocean.com  |  "How To Install Nginx on Ubuntu 16.04 | DigitalOcean"  |  https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04
#
#   www.digitalocean.com  |  "How To Install Nginx on CentOS 7 | DigitalOcean"  |  https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7
#
# ------------------------------------------------------------