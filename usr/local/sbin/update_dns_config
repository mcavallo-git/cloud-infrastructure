#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/update_dns_config" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then
# Example Call(s)

/usr/local/sbin/update_dns_config --static-ip "10.0.0.10"; # Set IPv4 as static to 10.0.0.10


fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/update_dns_config_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/update_dns_config"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo -e "\n""$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else

  # ------------------------------------------------------------
  # Parse inline arguments (passed to current script)
  #

  ARGS=("$@");
  COUNT_ARGS=${#ARGS[@]};
  ARGS_HOSTNAME_DEFINED=0;
  USE_WAN_IPV4=0;
  USE_SEARCH_DOMAIN=0;
  USE_STATIC_IPV4=0;
  DRY_RUN=1;

  #
  # DNS "SEARCH": TAKES A SET OF ONE OR MORE DOMAINS AND TRIES CONCATENATING EACH OF THEM WITH THE LOCAL ENVIRONMENT'S HOSTNAME (to try and resolve dns query) BEFORE REVERTING TO GOING EXTERNAL FOR RESOLUTION OF THE DNS QUERY IN_QUESTION
  #
  # MAX IS 6 DOMAINS TOTALING 256 OR LESS CHARACTERS)
  #
  DNS_SEARCH_DOMAIN="";

  # Walk through any inline-arguments passed to this function
  for (( i=0;i<$COUNT_ARGS;i++ )); do

    EACH_ARG=${ARGS[${i}]};
    # BASH_ARG_NUMBER=$((${i}+1)); # Bash arg-number is one greater than the ARGS arg-number -> this is due-to bash's ${0} arg, which contains the base-command

    # Check if this is the last inline-argument or if there are more to follow
    if [ $((${i}+1)) -eq ${COUNT_ARGS} ]; then # if this is the last argument
      NEXT_ARG="";
    else
      NEXT_ARG=${ARGS[$((${i}+1))]};
      if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
        NEXT_ARG="";
      fi;
    fi;

    if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

      # Parse inline hostname
      if [ ${i} -eq 0 ] && [ -n "${EACH_ARG}" ] && [[ "${EACH_ARG}" != "-"* ]]; then # Allow the first argument to be the hostname (without needing --hostname before it)
        NEXT_ARG="${EACH_ARG}";
        EACH_ARG="--hostname";
      fi;

      if [ "${EACH_ARG}" == "--wan" ]; then # --force
        USE_WAN_IPV4=1;
      fi;

      # Static-IP
      if [ "${EACH_ARG}" == "--static-ip" ]; then
        USE_STATIC_IPV4=1;
        if [ -n "${NEXT_ARG}" ]; then
          SET_STATIC_IPV4="${NEXT_ARG}";
        fi;
      fi;

      # Domain Name
      if [ "${EACH_ARG}" == "--domain" ]; then
        USE_SEARCH_DOMAIN=1;
        if [ -n "${NEXT_ARG}" ]; then
          DNS_SEARCH_DOMAIN="${NEXT_ARG}";
        else
          echo "Error:  Must specify domain-name to set after argument --domain, e.g. use syntax [ --domain DOMAIN.TLD ]";
          exit 1;
        fi;
      fi;

      # Primary DNS Server (#1)
      if [ "${EACH_ARG}" == "--dns1" ]; then
        if [ -n "${NEXT_ARG}" ]; then
          USER_DNS_1="${NEXT_ARG}";
        else
          echo "Error:  Must specify dns hostname / IPv4 --dns1, e.g. use syntax [ --dns1 I.P.V.4 ]";
          exit 1;
        fi;
      fi;

      # Secondary DNS Server (#2)
      if [ "${EACH_ARG}" == "--dns2" ]; then
        if [ -n "${NEXT_ARG}" ]; then
          USER_DNS_2="${NEXT_ARG}";
        else
          echo "Error:  Must specify dns hostname / IPv4 --dns2, e.g. use syntax [ --dns2 I.P.V.4 ]";
          exit 1;
        fi;
      fi;

      # Tertiary DNS Server (#3)
      if [ "${EACH_ARG}" == "--dns3" ]; then
        if [ -n "${NEXT_ARG}" ]; then
          USER_DNS_3="${NEXT_ARG}";
        else
          echo "Error:  Must specify dns hostname / IPv4 --dns3, e.g. use syntax [ --dns3 I.P.V.4 ]";
          exit 1;
        fi;
      fi;

    fi;
  done;

  # ------------------------------------------------------------

  if [ $(which nmcli 2>'/dev/null' | wc -l;) -gt 0 ]; then
    #
    # Prioritize DHCP DNS Nameservers from nmcli (NetworkManager), where available
    #
    DNSV4_SERVERS=$(nmcli device show | grep 'IP4.DNS' | awk '{print $2}');
    if [ -n "${DNSV4_SERVERS}" ]; then
      for EACH_DNSV4_SERVER in ${DNSV4_SERVERS}; do
        if [ -z "${DHCP_NAMESRVR_1}" ]; then
          DHCP_NAMESRVR_1="${EACH_DNSV4_SERVER}"; # Set primary DNS Server
        elif [ -z "${DHCP_NAMESRVR_2}" ]; then
          DHCP_NAMESRVR_2="${EACH_DNSV4_SERVER}"; # Set secondary DNS Server
        elif [ -z "${DHCP_NAMESRVR_3}" ]; then
          DHCP_NAMESRVR_3="${EACH_DNSV4_SERVER}"; # Set tertiary DNS Server
        fi;
      done;
    fi;
  fi;


  # ------------------------------------------------------------
  #
  #   DNS SERVER OPTIONS
  #

  GOOGLE_DNS_1="8.8.8.8";       # https://developers.google.com/speed/public-dns/docs/using
  GOOGLE_DNS_2="8.8.4.4";       # https://developers.google.com/speed/public-dns/docs/using

  GOOGLE_DNSv6_1="2001:4860:4860::8888";       # https://developers.google.com/speed/public-dns/docs/using
  GOOGLE_DNSv6_2="2001:4860:4860::8844";       # https://developers.google.com/speed/public-dns/docs/using

  CLOUDFARE_DNS_1="1.1.1.1";    # https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/
  CLOUDFARE_DNS_2="1.0.0.1";    # https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/

  CLOUDFARE_DNSv6_1="2606:4700:4700::1111";       # https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/
  CLOUDFARE_DNSv6_2="2606:4700:4700::1001";       # https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/

  OPEN_DNS_1="208.67.222.222";  # https://use.opendns.com
  OPEN_DNS_2="208.67.220.220";  # https://use.opendns.com

  OPEN_DNSv6_1="2620:119:35::35";  # https://www.opendns.com/about/innovations/ipv6
  OPEN_DNSv6_2="2620:119:53::53";  # https://www.opendns.com/about/innovations/ipv6

  VERISIGN_DNS_1="64.6.64.6";   # https://www.verisign.com/en_US/security-services/public-dns/index.xhtml
  VERISIGN_DNS_2="64.6.65.6";   # https://www.verisign.com/en_US/security-services/public-dns/index.xhtml

  VERISIGN_DNSv6_1="2620:74:1b::1:1";   # https://publicdnsforum.verisign.com/discussion/13/verisign-public-dns-set-up-configuration-instructions
  VERISIGN_DNSv6_2="2620:74:1c::2:2";   # https://publicdnsforum.verisign.com/discussion/13/verisign-public-dns-set-up-configuration-instructions

  # ------------------------------------------------------------
  #
  #   SELECTED DNS SERVERS (HOSTS/IPS TO TARGET AS DNS NAMESERVERS)

  DNS_NAMESRVR_1="${USER_DNS_1:-${DHCP_NAMESRVR_1:-${GOOGLE_DNS_1}}}";
  DNS_NAMESRVR_2="${USER_DNS_2:-${DHCP_NAMESRVR_2:-${GOOGLE_DNS_2}}}";
  DNS_NAMESRVR_3="${USER_DNS_3:-${DHCP_NAMESRVR_3:-${CLOUDFARE_DNS_1}}}";
  DNS_FALLBACK_1="${OPEN_DNS_1}";
  DNS_FALLBACK_2="${CLOUDFARE_DNS_2}";
  DNS_FALLBACK_3="${VERISIGN_DNS_1}";

  # ------------------------------------------------------------

  # Dingbats, intuitive logging chars/info
  BOX_CHECK="☑";
  BOX_XMARK="☒":
  DASHES="-----------------------------------------------------------------------";
  START_TIMESTAMP="$(date +'%Y%m%d_%H%M%S')";

  # Detect current IP Config
  THIS_LAN_SUBNET=$(ip route | grep -v '169.254.0.0/16' | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ([a-zA-Z0-9]+) [a-zA-Z0-9 ]* (((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))( [a-zA-Z0-9 ]*)?$/\2/p" | head -n 1;);
  THIS_LAN_BROADCAST=$(ip route | grep -v '169.254.0.0/16' | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ([a-zA-Z0-9]+) [a-zA-Z0-9 ]* (((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))( [a-zA-Z0-9 ]*)?$/\3/p" | head -n 1;);
  THIS_LAN_PREFIX=$(ip route | grep -v '169.254.0.0/16' | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ([a-zA-Z0-9]+) [a-zA-Z0-9 ]* (((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))( [a-zA-Z0-9 ]*)?$/\7/p" | head -n 1;);
  THIS_LAN_IPV4=$(ip route | grep -v '169.254.0.0/16' | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ([a-zA-Z0-9]+) [a-zA-Z0-9 ]* (((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))( [a-zA-Z0-9 ]*)?$/\9/p" | head -n 1;);
  THIS_GATEWAY_IPV4=$(ip route | grep 'default via '| sed -rne "s/^([a-zA-Z0-9]* )*default +via +([0-9a-fA-F\:\.]+) +[a-zA-Z0-9]+ +([a-zA-Z0-9]+).+$/\2/p" | head -n 1;);
  THIS_LAN_NIC=$(ip route | grep 'default via '| sed -rne "s/^([a-zA-Z0-9]* )*default +via +([0-9a-fA-F\:\.]+) +[a-zA-Z0-9]+ +([a-zA-Z0-9]+).+$/\3/p" | head -n 1;);
  test -z "${THIS_LAN_IPV4}" && THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.' | head -n 1 2>'/dev/null';);
  test -z "${THIS_LAN_PREFIX}" && THIS_LAN_PREFIX=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/^.*\///' | head -n 1 2>'/dev/null';);
  test -z "${THIS_LAN_SUBNET}" && THIS_LAN_SUBNET=$(ip route | grep "$(echo ${THIS_LAN_IPV4} | cut -d. -f1-2)" | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ${THIS_LAN_NIC}.*$/\2/p" | head -n 1;);
  test -z "${THIS_LAN_BROADCAST}" && THIS_LAN_BROADCAST=$(ip route | grep "$(echo ${THIS_LAN_IPV4} | cut -d. -f1-2)" | sed -rne "s/^([a-zA-Z0-9]* )*((((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/([0-9]+)) dev ${THIS_LAN_NIC}.*$/\3/p" | head -n 1;);
  test -z "${THIS_LAN_NETMASK}" && THIS_LAN_NETMASK=$(M=$(( 0xffffffff ^ ((1 << (32-${THIS_LAN_PREFIX})) -1) )) 2>'/dev/null'; echo "$(( (M>>24) & 0xff )).$(( (M>>16) & 0xff )).$(( (M>>8) & 0xff )).$(( M & 0xff ))" 2>'/dev/null';);


  # Kernel-Info
  IS_LINUX=$(if [[ $(uname -s | grep Linux | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
  IS_WINDOWS_WSL=$(if [[ "$(< /proc/version)" == *@(Microsoft|WSL)* ]]; then echo 1; else echo 0; fi; );
  if [ "${IS_LINUX}" != "1" ]; then
    echo -e "\n""Error:  Must run in a Linux-based environment";
    exit 1;

  elif [ "${IS_WINDOWS_WSL}" != "1" ]; then
    if [[ -n "$(command -v apt 2>'/dev/null';)" ]]; then  # Distros: Debian, Ubuntu, etc.

      #
      # Required package:
      #   resolvconf
      #
      # Method(s) used:
      #   > resolvconf   ### manage nameserver information
      #
      REQUIRED_PACKAGE_NAME="resolvconf";
      REQUIRED_METHOD_NAME="resolvconf";
      if [ -n "$(which ${REQUIRED_METHOD_NAME} 2>'/dev/null')" ]; then
        echo -e "\n""Info:  Resolved package \"${REQUIRED_METHOD_NAME}\" to path \"$(which ${REQUIRED_METHOD_NAME})\"";
      else
        echo -e "\n""Error:  Package \"${REQUIRED_METHOD_NAME}\" not found locally";
        echo -e "\n""Info:  Please install required package via:";
        echo "  |--> apt-get -y update; apt-get -y install \"${REQUIRED_PACKAGE_NAME}\"; reboot;";
        echo ""; exit 1;
      fi;

      #
      # Required package:
      #   ifupdown
      #
      # Method(s) used:
      #   > ifup        ### bring a network interface up
      #   > ifdown      ### take a network interface down
      #
      REQUIRED_PACKAGE_NAME="ifupdown";
      REQUIRED_METHOD_NAME="ifup";
      if [ -z "$(which ${REQUIRED_METHOD_NAME} 2>'/dev/null')" ]; then
        echo -e "\n""Error:  Package \"${REQUIRED_METHOD_NAME}\" not found locally";
        echo -e "\n""Info:  Please install required package via:";
        echo "  |--> apt-get -y update; apt-get -y install \"${REQUIRED_PACKAGE_NAME}\"; reboot;";
        echo ""; exit 1;
      fi;
      REQUIRED_PACKAGE_NAME="ifupdown";
      REQUIRED_METHOD_NAME="ifdown";
      if [ -z "$(which ${REQUIRED_METHOD_NAME} 2>'/dev/null')" ]; then
        echo -e "\n""Error:  Package \"${REQUIRED_METHOD_NAME}\" not found locally";
        echo -e "\n""Info:  Please install required package via:";
        echo "  |--> apt-get -y update; apt-get -y install \"${REQUIRED_PACKAGE_NAME}\"; reboot;";
        echo ""; exit 1;
      fi;

    else
      echo "Error:  Linux kernel/distro not supported";
      exit 1;
    fi;
  fi;

  # Network config filepaths
  ETC_DHCPCD_CONF="/etc/dhcpcd.conf"; # DHCPCD Service Config-File
  DEBIAN_NETWORK_CONF="/etc/network/interfaces.d/999-update_dns_config.cfg";
  NMCLI_CONF=$(find '/etc/sysconfig/network-scripts/' -name "ifcfg-${THIS_LAN_NIC}" | head -n 1 2>'/dev/null';);
  NETWORK_SYSCONF="/etc/sysconfig/network";
  ETC_RESOLVCONF="/etc/resolv.conf"; # Final output which is-built-from/pulls-from from multiple sources

  # Rename/Remove old network config filepath
  OLD_DEBIAN_CONF="/etc/network/interfaces.d/50-cloud-init.cfg"; if [ -f "${OLD_DEBIAN_CONF}" ]; then if [ -f "${DEBIAN_NETWORK_CONF}"]; then rm -f "${OLD_DEBIAN_CONF}"; else mv -f "${OLD_DEBIAN_CONF}" "${DEBIAN_NETWORK_CONF}"; fi; fi;

  if [ -n "${NMCLI_CONF}" ]; then

    # NetworkManager Device Configuration

    if [ ! -f "${NMCLI_CONF}" ]; then 

      echo "ERROR: DNS Config-File not found @ path \"${NMCLI_CONF}\" - exiting...";
      exit 1;

    else

      if [ ${USE_STATIC_IPV4} -eq 1 ]; then

        if [ -z "${SET_STATIC_IPV4}" ]; then
          SET_STATIC_IPV4="${THIS_LAN_IPV4}";
        fi;

        echo -e "\n";
        echo "Info: Current LAN IPv4 is \"${THIS_LAN_IPV4}\" on NIC \"${THIS_LAN_NIC}\"";
        echo "Info: Request to set LAN IPv4 as STATIC w/ value \"${SET_STATIC_IPV4}\"";
        read -p "  |--> Set STATIC IPv4 to \"${SET_STATIC_IPV4}\", now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # ------------------------------------------------------------

          # Set Local LAN IPv4 Address
          if [ $(cat "${NMCLI_CONF}" | grep 'IPADDR=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^IPADDR=/c\IPADDR=\"${SET_STATIC_IPV4}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "IPADDR=\"${SET_STATIC_IPV4}\"" >> "${NMCLI_CONF}";
          fi;

          # Set Gateway LAN IPv4 Address
          if [ $(cat "${NMCLI_CONF}" | grep 'GATEWAY=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^GATEWAY=/c\GATEWAY=\"${THIS_GATEWAY_IPV4}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "GATEWAY=\"${THIS_GATEWAY_IPV4}\"" >> "${NMCLI_CONF}";
          fi;

          # Set LAN Prefix (2-digit representation of Netmask)
          if [ $(cat "${NMCLI_CONF}" | grep 'PREFIX=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^PREFIX=/c\PREFIX=\"${THIS_LAN_PREFIX}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "PREFIX=\"${THIS_LAN_PREFIX}\"" >> "${NMCLI_CONF}";
          fi;

          # Set Boot Protocol
          if [ $(cat "${NMCLI_CONF}" | grep 'BOOTPROTO=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^BOOTPROTO=/c\BOOTPROTO=\"none\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "BOOTPROTO=\"none\"" >> "${NMCLI_CONF}";
          fi;

          # Set PEERDNS
          if [ $(cat "${NMCLI_CONF}" | grep 'PEERDNS=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^PEERDNS=/c\PEERDNS=\"no\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "PEERDNS=\"no\"" >> "${NMCLI_CONF}";
          fi;

          # Prep Hostname
          if [ -n "${DNS_SEARCH_DOMAIN}" ]; then
            SET_HOSTNAME="$(hostname).${DNS_SEARCH_DOMAIN}";
          else
            SET_HOSTNAME="$(hostname)";
          fi;

          # Set Hostname in NIC config
          if [ $(cat "${NMCLI_CONF}" | grep 'HOSTNAME=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^HOSTNAME=/c\HOSTNAME=\"${SET_HOSTNAME}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "HOSTNAME=\"${SET_HOSTNAME}\"" >> "${NMCLI_CONF}";
          fi;

          # Set Hostname in SYSTEM config
          if [ $(cat "${NETWORK_SYSCONF}" | grep 'HOSTNAME=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^HOSTNAME=/c\HOSTNAME=\"${SET_HOSTNAME}\"" "${NETWORK_SYSCONF}";
          else
            echo "";
            echo "HOSTNAME=\"${SET_HOSTNAME}\"" >> "${NETWORK_SYSCONF}";
          fi;

          # Set Domainname in NIC config
          if [ $(cat "${NMCLI_CONF}" | grep 'DOMAIN=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^DOMAIN=/c\DOMAIN=\"${DNS_SEARCH_DOMAIN}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "DOMAIN=\"${DNS_SEARCH_DOMAIN}\"" >> "${NMCLI_CONF}";
          fi;

          # Set Domainname in SYSTEM config
          if [ $(cat "${NETWORK_SYSCONF}" | grep 'DOMAIN=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^DOMAIN=/c\DOMAIN=\"${DNS_SEARCH_DOMAIN}\"" "${NETWORK_SYSCONF}";
          else
            echo "";
            echo "DOMAIN=\"${DNS_SEARCH_DOMAIN}\"" >> "${NETWORK_SYSCONF}";
          fi;

          # ------------------------------------------------------------
        fi;
      fi;


      # Set DNS Nameserver(s)
      if [ -v SET_STATIC_IPV4 ] && [ -n "${SET_STATIC_IPV4}" ]; then
        echo -e "\n";
        echo "Info: Request to set DNS NameServers to \"${DNS_NAMESRVR_1}\" (Primary) & \"${DNS_NAMESRVR_2}\" (Secondary)";
        read -p "  |--> Set DNS Nameservers, now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # ------------------------------------------------------------

          # DNS Nameserver #1 -> Device Config
          if [ $(cat "${NMCLI_CONF}" | grep 'DNS1=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^DNS1=/c\DNS1=\"${DNS_NAMESRVR_1}\"" "${NMCLI_CONF}";
          else
            echo "";
            echo "DNS1=\"${DNS_NAMESRVR_1}\"" >> "${NMCLI_CONF}";
          fi;
          # DNS Nameserver #2 -> Device Config
          if [ $(cat "${NMCLI_CONF}" | grep 'DNS2=' | wc -l;) -gt 0 ]; then
            sed -i -e "/^DNS2=/c\DNS2=\"${DNS_NAMESRVR_2}\"" "${NMCLI_CONF}";
            echo "";
          else
            echo "";
            echo "DNS2=\"${DNS_NAMESRVR_2}\"" >> "${NMCLI_CONF}";
          fi;

          # ------------------------------------------------------------

          # DNS Nameserver #1 -> System Config
          if [ $(cat "${NETWORK_SYSCONF}" | grep 'DNS1=' | wc -l;) -gt 0 ]; then
            echo "";
            sed -i -e "/^DNS1=/c\DNS1=\"${DNS_NAMESRVR_1}\"" "${NETWORK_SYSCONF}";
          else
            echo "";
            echo "DNS1=\"${DNS_NAMESRVR_1}\"" >> "${NETWORK_SYSCONF}";
          fi;
          # DNS Nameserver #2 -> System Config
          if [ $(cat "${NETWORK_SYSCONF}" | grep 'DNS2=' | wc -l;) -gt 0 ]; then
            sed -i -e "/^DNS2=/c\DNS2=\"${DNS_NAMESRVR_2}\"" "${NETWORK_SYSCONF}";
            echo "";
          else
            echo "";
            echo "DNS2=\"${DNS_NAMESRVR_2}\"" >> "${NETWORK_SYSCONF}";
          fi;

          # ------------------------------------------------------------
        fi;
      fi;

      echo -e "\n""NetworkManager must be restarted to apply changes ( required command [ nmcli connection reload; /etc/init.d/network restart; ] )";
      read -p "  |--> Restart NetworkManager, now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; echo ""; # Await single keypress
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "\n""Info:  Restarting NetworkManager via command [ nmcli connection reload; /etc/init.d/network restart; ]";
        nmcli connection reload;
        /etc/init.d/network restart;
        # service NetworkManager restart;
      else
        echo -e "\n""Info:  Postponing NetworkManager restart";
        exit 1;
      fi;

    fi;

  else # ------------------------------------------------------------

    /usr/bin/networkctl status;

    # Resolv.conf

    FILE_DNS_BUILDER_BASE="/etc/resolvconf/resolv.conf.d/base";
    FILE_DNS_BUILDER_TAIL="/etc/resolvconf/resolv.conf.d/base";
    FILE_NETWORK_RESOLVER="${FILE_DNS_BUILDER_BASE}";
    FILE_NETWORK_RESOLVER="${FILE_DNS_BUILDER_TAIL}";
    if [ "${IS_WINDOWS_WSL}" == "1" ]; then
      FILE_NETWORK_RESOLVER="${ETC_RESOLVCONF}"; # Windows subsystem for linux - wipe all of resolver (for testing-only as it is rebuilt on WSL-close, or 'shut down' from its perspective)
    fi;

    # Backup-filepaths
    BACKUP_CONFIGS_DIR="/root/backup/update_dns_config";
    OLD_BACKUP_CONFIGS_DIR="/root/backup_network_configs";
    if [ -d "${OLD_BACKUP_CONFIGS_DIR}" ]; then
      mkdir -p $(dirname "${BACKUP_CONFIGS_DIR}");
      mv "${OLD_BACKUP_CONFIGS_DIR}" "${BACKUP_CONFIGS_DIR}";
    else
      mkdir -p "${BACKUP_CONFIGS_DIR}";
    fi;
    chmod 700 "${BACKUP_CONFIGS_DIR}"; chown "root:root" "${BACKUP_CONFIGS_DIR}";

    # Backup necesarry config file(s), if-existent
    FILE_TO_BACKUP="${ETC_RESOLVCONF}";
    if [ -f "${FILE_TO_BACKUP}" ]; then
      BASENAME_TO_BACKUP=$(basename "${FILE_TO_BACKUP}");
      echo -e "\n""Info:  Calling [ cp -f \"${FILE_TO_BACKUP}\" \"${BACKUP_CONFIGS_DIR}/${START_TIMESTAMP}_${BASENAME_TO_BACKUP}.bak\"; ]...";
      cp -f "${FILE_TO_BACKUP}" "${BACKUP_CONFIGS_DIR}/${START_TIMESTAMP}_${BASENAME_TO_BACKUP}.bak";
    fi;
    FILE_TO_BACKUP="${DEBIAN_NETWORK_CONF}";
    if [ -f "${FILE_TO_BACKUP}" ]; then
      BASENAME_TO_BACKUP=$(basename "${FILE_TO_BACKUP}");
      echo -e "\n""Info:  Calling [ cp -f \"${FILE_TO_BACKUP}\" \"${BACKUP_CONFIGS_DIR}/${START_TIMESTAMP}_${BASENAME_TO_BACKUP}.bak\"; ]...";
      cp -f "${FILE_TO_BACKUP}" "${BACKUP_CONFIGS_DIR}/${START_TIMESTAMP}_${BASENAME_TO_BACKUP}.bak";
    fi;

    # Setup the nameserver info to make it (eventually) into resolv.conf
    echo "" > "${FILE_NETWORK_RESOLVER}";
    if [ -n "${DNS_NAMESRVR_1}" ]; then echo "nameserver ${DNS_NAMESRVR_1}" >> "${FILE_NETWORK_RESOLVER}"; fi;
    if [ -n "${DNS_NAMESRVR_2}" ]; then echo "nameserver ${DNS_NAMESRVR_2}" >> "${FILE_NETWORK_RESOLVER}"; fi;
    if [ -n "${DNS_NAMESRVR_3}" ]; then echo "nameserver ${DNS_NAMESRVR_3}" >> "${FILE_NETWORK_RESOLVER}"; fi;
    if [ -n "${DNS_SEARCH_DOMAIN}" ]; then echo "search ${DNS_SEARCH_DOMAIN}" >> "${FILE_NETWORK_RESOLVER}"; fi;
    echo "" >> "${FILE_NETWORK_RESOLVER}";

    if [ "${IS_WINDOWS_WSL}" != "1" ]; then

      # show "${ETC_RESOLVCONF}" file (configuration before-start)
      echo -e "\n""Info:  Calling [cat \"${ETC_RESOLVCONF}\"]";
      echo "${DASHES}"; cat "${ETC_RESOLVCONF}"; echo "${DASHES}";

      # show DNS_NAMESRVR_1,2,3 & Domain-search vars
      echo -e "\n""Info:  Attempting to configure $(hostname) to use the following DNS Next-Hops:";
      echo "${DASHES}";
      echo "DNS_NAMESRVR_1 = \"${DNS_NAMESRVR_1}\"";
      echo "DNS_NAMESRVR_2 = \"${DNS_NAMESRVR_2}\"";
      echo "DNS_NAMESRVR_3 = \"${DNS_NAMESRVR_3}\"";
      echo "DNS_SEARCH_DOMAIN = \"${DNS_SEARCH_DOMAIN}\"";
      echo "${DASHES}";

      # Create the eth0 config file (if it is a valid filepath yet doesnt exist)
      if [ -n "${DEBIAN_NETWORK_CONF}" ] && [ ! -f "${DEBIAN_NETWORK_CONF}" ]; then
        echo -e "\n""Info:  Calling [echo \"\" > \"${DEBIAN_NETWORK_CONF}\";]...";
        echo "" > "${DEBIAN_NETWORK_CONF}";
      fi;

      THIS_HYPERVISOR="/sys/hypervisor/uuid";
      AWS_HV_STARTS_WITH="ec2";
      if [ ! -v DNS_SEARCH_DOMAIN ] && [ -f "${THIS_HYPERVISOR}" ]; then
        if [[ "$(cat ${THIS_HYPERVISOR})" == "${AWS_HV_STARTS_WITH}"* ]] && [ -n "${DOMAIN}" ]; then
          DNS_SEARCH_DOMAIN="${DOMAIN}";
        fi;
      fi;

      DNS_LOOKUP_1=$(cat ${DEBIAN_NETWORK_CONF} | grep ${DNS_NAMESRVR_1});
      DNS_LOOKUP_2=$(cat ${DEBIAN_NETWORK_CONF} | grep ${DNS_NAMESRVR_2});
      DNS_LOOKUP_3=$(cat ${DEBIAN_NETWORK_CONF} | grep ${DNS_NAMESRVR_3});

      REFRESH_DNS_FILE="0";

      ACTION_DOMAIN_RESOLUTION="";
      DOMAIN_RESOLUTION_CONFIGURED="$(cat ${DEBIAN_NETWORK_CONF} | grep 'search ')";
      if [ -n "${DNS_SEARCH_DOMAIN}" ]; then
        DOMAIN_RESOLUTION_CONFIGURED="$(echo ${DOMAIN_RESOLUTION_CONFIGURED} | grep ${DNS_SEARCH_DOMAIN};)";
        if [ ! -n "${DOMAIN_RESOLUTION_CONFIGURED}" ]; then
          ACTION_DOMAIN_RESOLUTION="SET"; # Need to configure local domain-name resolution
        fi;
      fi;

      if [ ${USE_STATIC_IPV4} -eq 1 ]; then
        if [ -z "${SET_STATIC_IPV4}" ]; then
          SET_STATIC_IPV4="${THIS_LAN_IPV4}";
        fi;
        echo -e "\n";
        echo "Info: Current LAN IPv4 is \"${THIS_LAN_IPV4}\" on NIC \"${THIS_LAN_NIC}\"";
        echo "Info: Request to set LAN IPv4 as STATIC w/ value \"${SET_STATIC_IPV4}\"";
        read -p "  |--> Set STATIC IPv4 to \"${SET_STATIC_IPV4}\", now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # ------------------------------------------------------------
          echo "" > "${DEBIAN_NETWORK_CONF}";
          # Loopback Address
          echo "# The loopback network interface" >> "${DEBIAN_NETWORK_CONF}";
          echo "auto lo" >> "${DEBIAN_NETWORK_CONF}";
          echo "iface lo inet loopback" >> "${DEBIAN_NETWORK_CONF}";
          echo "" >> "${DEBIAN_NETWORK_CONF}";
          # LAN Address
          echo "# The primary network interface" >> "${DEBIAN_NETWORK_CONF}";
          echo "allow-hotplug eth0" >> "${DEBIAN_NETWORK_CONF}";
          echo "iface ${THIS_LAN_NIC} inet static" >> "${DEBIAN_NETWORK_CONF}";
          echo "      address ${SET_STATIC_IPV4}" >> "${DEBIAN_NETWORK_CONF}";
          echo "      netmask ${THIS_LAN_NETMASK}" >> "${DEBIAN_NETWORK_CONF}";
          echo "      gateway ${THIS_GATEWAY_IPV4}" >> "${DEBIAN_NETWORK_CONF}";
          echo "" >> "${DEBIAN_NETWORK_CONF}";
          # ------------------------------------------------------------
          # Set /etc/dhcpcd.conf
          if [ -f "${ETC_DHCPCD_CONF}" ]; then
            sed_remove_whitespace_lines='/^\s*$/d';
            sed -i".$(date +'%Y%m%d_%H%M%S').bak" -e "/^# static IP configuration/d" "${ETC_DHCPCD_CONF}";
            sed -i".$(date +'%Y%m%d_%H%M%S').bak" -e "/^interface ${THIS_LAN_NIC}/d" "${ETC_DHCPCD_CONF}";
            sed -i".$(date +'%Y%m%d_%H%M%S').bak" -e "/^static ip_address=/d" "${ETC_DHCPCD_CONF}";
            sed -i".$(date +'%Y%m%d_%H%M%S').bak" -e "/^static routers=/d" "${ETC_DHCPCD_CONF}";
            sed -i".$(date +'%Y%m%d_%H%M%S').bak" -e "/^static domain_name_servers=/d" "${ETC_DHCPCD_CONF}";
            echo "# static IP configuration" >> "${ETC_DHCPCD_CONF}";
            echo "interface ${THIS_LAN_NIC}" >> "${ETC_DHCPCD_CONF}";
            echo "static ip_address=${SET_STATIC_IPV4}" >> "${ETC_DHCPCD_CONF}";
            echo "static routers=${THIS_GATEWAY_IPV4}" >> "${ETC_DHCPCD_CONF}";
            echo "static domain_name_servers=${DNS_NAMESRVR_1}" >> "${ETC_DHCPCD_CONF}";
          fi;
        fi;
      fi;

      if [ -n "${DNS_LOOKUP_1}" ] && [ -n "${DNS_LOOKUP_2}" ] && [ -n "${DNS_LOOKUP_3}" ] && [ -n "${ACTION_DOMAIN_RESOLUTION}" ]; then # all variables are not null

        echo -e "\n""Info:  \"${DEBIAN_NETWORK_CONF}\"'s DNS settings are up-to-date";
        
      else # at least one DNS-IP/Hostname is missing

        echo -e "\n""Info:  Updating DNS Servers which build out of file \"${DEBIAN_NETWORK_CONF}\"";
        
        # "dns-search"
        if [ -n "${DNS_SEARCH_DOMAIN}" ] && [ "${ACTION_DOMAIN_RESOLUTION}" == "SET" ]; then
          #    verify if any line already contains the "dns-search" directive
          DNS_SEARCH_LINES_FOUND=$(cat "${DEBIAN_NETWORK_CONF}" | grep 'dns-search ' | wc -l);
          DOMAIN_BIND_TO_ETH0="${DNS_SEARCH_DOMAIN}";
          if [ "${DNS_SEARCH_LINES_FOUND}" == "0" ]; then
            # add the "dns-search" line
            echo "dns-search ${DOMAIN_BIND_TO_ETH0}" >>  "${DEBIAN_NETWORK_CONF}";
          else
            # modify the "dns-search" line
            SED_DNS_SEARCH="/^dns-search/c\dns-search ${DOMAIN_BIND_TO_ETH0}";
            sed --in-place --expression="${SED_DNS_SEARCH}" "${DEBIAN_NETWORK_CONF}";
          fi;

        else
          echo -e "\n""Info:  Skipping update for resolvconf's local domain-name resolution (\$DNS_SEARCH_DOMAIN is undefined/empty)";

        fi;
        
        
        # "dns-nameservers"
        #    verify if any line already contains the "dns-nameservers" directive
        if [ $(cat "${DEBIAN_NETWORK_CONF}" | grep 'dns-nameservers' | wc -l;) -gt 0 ]; then
          # modify the "dns-nameservers" line
          SED_DNS_NAMESERVERS="/^dns-nameservers/c\dns-nameservers ${DNS_NAMESRVR_1} ${DNS_NAMESRVR_2} ${DNS_NAMESRVR_3}";
          sed --in-place --expression="${SED_DNS_NAMESERVERS}" "${DEBIAN_NETWORK_CONF}";
        else
          # add the "dns-nameservers" line
          echo "dns-nameservers ${DNS_NAMESRVR_1} ${DNS_NAMESRVR_2} ${DNS_NAMESRVR_3}" >> "${DEBIAN_NETWORK_CONF}";
        fi;
        
        REFRESH_DNS_FILE="1";

      fi;

      SystemResolveConf="/etc/systemd/resolved.conf";
      SystemNetworkConfDir="/etc/systemd/network";

      if [ -f "${SystemResolveConf}" ]; then

        echo "Updating Hostname-Resolving Service \"systemd-resolve\" via associated config-file \"${SystemResolveConf}\" ...";
        CAN_USE_SYSRESOLVE_STATUS="$(systemd-resolve --help | grep status)";
        
        echo -e "\n""Info:  Calling [cat \"${SystemResolveConf}\";] (BEFORE EDITS)";
        echo "${DASHES}"; cat "${SystemResolveConf}"; echo "${DASHES}";

        if [ -n "${CAN_USE_SYSRESOLVE_STATUS}" ]; then
          # Show "systemd-resolve --status" command's output BEFORE-EDITS (shows live DNS setup)
          echo -e "\n""Info:  Calling [systemd-resolve --status] (BEFORE EDITS)";
          echo "${DASHES}"; echo "$(systemd-resolve --status)"; echo "${DASHES}"; ## Must use echo "$(systemd-resolve --status)" to avoid scroll-lock (which holds up entire program)
        fi;

        sed_001="/^DNS=/c\DNS=${DNS_NAMESRVR_1} ${DNS_NAMESRVR_2} ${DNS_NAMESRVR_3}";
        sed_002="/^#DNS=/c\DNS=${DNS_NAMESRVR_1} ${DNS_NAMESRVR_2} ${DNS_NAMESRVR_3}";
        sed_003="/^FallbackDNS=/c\FallbackDNS=${DNS_FALLBACK_1} ${DNS_FALLBACK_2} ${DNS_FALLBACK_3}";
        sed_004="/^#FallbackDNS=/c\FallbackDNS=${DNS_FALLBACK_1} ${DNS_FALLBACK_2} ${DNS_FALLBACK_3}";

        sed --in-place --expression="${sed_001}" --expression="${sed_002}" --expression="${sed_003}" --expression="${sed_004}" "${SystemResolveConf}";
        if [ -d "${SystemNetworkConfDir}" ]; then
          echo -e "\n""Info:  Searching \"${SystemNetworkConfDir}\" for DNS config-files...";
          for EachNetworkFile in ${SystemNetworkConfDir}/*; do
            if [ -f "${EachNetworkFile}" ]; then
              echo "Applying DNS Configuration to Network File: \"${EachNetworkFile}\"";
              sed --in-place --expression="${sed_001}" --expression="${sed_002}" --expression="${sed_003}" --expression="${sed_004}" "${EachNetworkFile}";
            else
              echo "Skipping item with invalid filetype: \"${EachNetworkFile}\"";
            fi;
          done;
        fi;
        REFRESH_DNS_FILE="1";
      fi;


      if [ "${REFRESH_DNS_FILE}" == "1" ]; then
        # Take down the main network interface & bring it back up (in one statement)
        echo -e "\n""Info:  Calling [ ifdown -a && ifup -a; ] (takes down the main network interface & bring it back up, in one statement)...";
        echo "${DASHES}"; ifdown -a && ifup -a; echo "${DASHES}";

        # Allow the networking service ample time to refresh
        sleep 2;

        # Restart the networking service
        echo -e "\n""Info:  Calling [ /bin/systemctl restart $(/bin/systemctl list-unit-files | grep -i '^network' | grep -v '\-' | grep '.service' | awk '{print $1}' | sed -e 's/.service//' | head -n 1;); ]...";
        echo "${DASHES}";
        /bin/systemctl restart $(/bin/systemctl list-unit-files | grep -i '^network' | grep -v '\-' | grep '.service' | awk '{print $1}' | sed -e 's/.service//' | head -n 1;);
        echo "${DASHES}"; 

        # Allow the networking service ample time to refresh
        sleep 2;

        # Reload the configuration into resolvconf's DNS file
        echo -e "\n""Info:  Calling [ resolvconf -u ]...";
        echo "${DASHES}"; resolvconf -u; echo "${DASHES}";
        echo "";

        if [ -f "${SystemResolveConf}" ]; then
          # Show "systemd-resolve --status" command's output AFTER-EDITS (shows live DNS setup)
          echo -e "\n""Info:  Restarting local DNS resolution-service via [service systemd-resolved restart;]";
          echo "${DASHES}"; service systemd-resolved restart; echo "${DASHES}";
          
          echo -e "\n""Info:  Calling [cat \"${SystemResolveConf}\";]";
          echo "${DASHES}"; cat "${SystemResolveConf}"; echo "${DASHES}";

          if [ -n "${CAN_USE_SYSRESOLVE_STATUS}" ]; then
            # Show "systemd-resolve --status" command's output AFTER-EDITS (shows live DNS setup)
            echo -e "\n""Info:  Calling [systemd-resolve --status]";
            echo "${DASHES}"; echo "$(systemd-resolve --status)"; echo "${DASHES}"; ## Must use echo "$(systemd-resolve --status)" to avoid scroll-lock (which holds up entire program)
          fi;
        fi;
      fi;

    fi;
  
  fi;

  # ------------------------------------------------------------
  #
  # Show the final network configuration
  #

  # verify the configuration tied to eth0
  # echo "";
  # echo "Calling [ifconfig eth0]...";
  # echo "${DASHES}"; ifconfig eth0; echo "${DASHES}";

  sleep 2;

  if [ -f "${DEBIAN_NETWORK_CONF}" ]; then
    echo -e "\n""Info:  Calling [cat \"${DEBIAN_NETWORK_CONF}\"]";
    echo "${DASHES}"; cat "${DEBIAN_NETWORK_CONF}"; echo "${DASHES}";
  elif [ -f "${NMCLI_CONF}" ]; then
    echo -e "\n""Info:  Calling [cat \"${NMCLI_CONF}\"]";
    echo "${DASHES}"; cat "${NMCLI_CONF}"; echo "${DASHES}";
  fi;

  if [ -f "${ETC_RESOLVCONF}" ]; then
    echo -e "\n""Info:  Calling [cat \"${ETC_RESOLVCONF}\"]";
    echo "${DASHES}"; cat "${ETC_RESOLVCONF}"; echo "${DASHES}";
  fi;

fi;

# ------------------------------------------------------------
# Citation(s)
#
#   linuxconfig.org  |  "How to setup a Static IP address on Debian Linux"  |  https://linuxconfig.org/how-to-setup-a-static-ip-address-on-debian-linux
#
#   reddit.com  |  "What DNS servers to use?"  |  https://www.reddit.com/r/privacy/comments/8mx6pe/what_dns_servers_to_use/
#
#   reddit.com  |  "sysctl(8) - Linux man page"  |  https://linux.die.net/man/8/sysctl
#
# ------------------------------------------------------------