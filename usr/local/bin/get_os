#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/get_os" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # Run this script on-the-fly:

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/get_os?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Attempt to determine os-type, etc. using (ideally) distro-agnostic commands
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile

if [ -n "$1" ] && [[ "$1" == *"log"* ]]; then # log this script's output

LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;

fi;

# ------------------------------------------------------------
# Runtime Variable(s)
#

if [ -n "${DEBUG_MODE}" ] && [[ "${DEBUG_MODE}" =~ ^-?[0-9]+$ ]] && (("${DEBUG_MODE}" >= "1")); then
	VERBOSE=1;
elif [ -n "${VERBOSITY}" ] && [[ "${VERBOSITY}" =~ ^-?[0-9]+$ ]] && (("${VERBOSITY}" >= "1")); then
	VERBOSE=1;
elif [ -n "${VERBOSE}" ] && [[ "${VERBOSE}" =~ ^-?[0-9]+$ ]] && (("${VERBOSE}" >= "1")); then
	VERBOSE=1;
elif [ -n "$@" ] && [ -n "$(echo $@ | grep 'verbose';)" ]; then
	VERBOSE=1;
else
	VERBOSE=0;
fi;

VERBOSE="0";
if [ -n "$1" ]; then
	if [ "$1" == "-v" ] || [ "$1" == "--verbose" ]; then
		VERBOSE="1";
	fi;
fi;

RETURNED_OS="Unknown";


# ------------------------------------------------------------
#
# OS (Operating System) Details
#
if [[ "${OSTYPE}" == "linux-gnu"* || "$(uname -s)" == "Linux" ]]; then
	if [ $(uname -a | grep -i 'Microsoft' | wc -l) -ge 1 ]; then
		THIS_OS_TYPE='WSL (Microsoft Windows Subsystem for Linux)';
	else
		THIS_OS_TYPE='Linux';
	fi;
elif [[ "${OSTYPE}" == "darwin"* ]]; then
	THIS_OS_TYPE='Macintosh';
else
	THIS_OS_TYPE='Windows';
fi;
RETURNED_OS="${THIS_OS_TYPE}";


# ------------------------------------------------------------
#
# Linux Distro (Distribution) Details
#
DISTRO_ID=$(sed -rne 's/^NAME="(.+)"$/\1/p' "/etc/os-release");


if [ -n "$(which lsb_release 2>'/dev/null')" ]; then
	DISTRO_ID="$(lsb_release --short --id | tr '[:lower:]' '[:upper:]';)";
	DISTRO_RELEASE="$(lsb_release --short --release | tr '[:lower:]' '[:upper:]';)";
	DISTRO_CODENAME="$(lsb_release --short --codename | tr '[:lower:]' '[:upper:]';)";
	DISTRO_DESCRIPTION="$(lsb_release --short --description | tr '[:lower:]' '[:upper:]';)";

else
	DISTRO_ID=""
	DISTRO_RELEASE="";
	DISTRO_CODENAME="";
	DISTRO_DESCRIPTION="";

fi;


# ------------------------------------------------------------
#
# Kernel Info
#
THIS_KERNEL="$(uname -a;)";
THIS_KERNEL_NAME="$(uname -s;)";

IS_WINDOWS=$(if [ "${THIS_OS_TYPE}" == "Windows" ]; then echo 1; else echo 0; fi;);
IS_LINUX=$(if [ "${THIS_OS_TYPE}" == "Linux" ]; then echo 1; else echo 0; fi;);
IS_MAC=$(if [ "${THIS_OS_TYPE}" == "Macintosh" ]; then echo 1; else echo 0; fi;);
IS_WSL=$(if [ "${THIS_OS_TYPE}" == "WSL (Microsoft Windows Subsystem for Linux)" ]; then echo 1; else echo 0; fi;);

IS_CYGWIN=$(if [[ $(uname -s | grep -i CYGWIN | wc -l) -gt 0 ]] || [ "${OSTYPE}" == "cygwin" ]; then echo 1; else echo 0; fi;);
IS_MINGW=$(if [[ $(uname -s | grep -i MINGW | wc -l) -gt 0 ]] || [ "${OSTYPE}" == "msys" ]; then echo 1; else echo 0; fi;);

if [ -n "${DISTRO_ID}" ]; then
	# Directly-compare the current OS' Distro-ID against known values runtime
	IS_ALPINE=$(if [ "${DISTRO_ID}" == "ALPINE" ]; then echo 1; else echo 0; fi;);
	IS_CENTOS=$(if [ "${DISTRO_ID}" == "CENTOS" ]; then echo 1; else echo 0; fi;);
	IS_DEBIAN=$(if [ "${DISTRO_ID}" == "DEBIAN" ]; then echo 1; else echo 0; fi;);
	IS_RASPBIAN=$(if [ "${DISTRO_ID}" == "RASPBIAN" ]; then echo 1; else echo 0; fi;);
	IS_UBUNTU=$(if [ "${DISTRO_ID}" == "UBUNTU" ]; then echo 1; else echo 0; fi;);

else
	# Manually determine Distro-type
	IS_ALPINE=$(if [[ $(ls -al /etc | grep -i release | wc -l) -gt 0 ]] && [[ $(cat /etc/*release | grep -i alpine | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi;);
	IS_CENTOS=$(if [[ $(ls -al /etc | grep -i release | wc -l) -gt 0 ]] && [[ $(cat /etc/*release | grep -i centos | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi;);
	IS_DEBIAN=$(if [[ $(ls -al /etc | grep -i release | wc -l) -gt 0 ]] && [[ $(cat /etc/*release | grep -i debian | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi;);
	IS_RASPBIAN=$(if [[ $(ls -al /etc | grep -i release | wc -l) -gt 0 ]] && [[ $(cat /etc/*release | grep -i raspbian | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi;);
	IS_UBUNTU=$(if [[ $(ls -al /etc | grep -i release | wc -l) -gt 0 ]] && [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi;);

fi;

# Get this host's shell-distro
THIS_DISTRO="Unknown";
if [[ ${IS_WINDOWS} -gt 0 ]]; then
	# Windows shell-distro(s)
	if [[ ${IS_CYGWIN} -gt 0 ]]; then
		THIS_DISTRO="Cygwin";
	elif [[ ${IS_MINGW} -gt 0 ]]; then
		THIS_DISTRO="MinGW";
	fi;
elif [[ ${IS_LINUX} -gt 0 ]] || [[ ${IS_WSL} -gt 0 ]]; then
	# Linux shell-distro(s)
	if [[ ${IS_RASPBIAN} -gt 0 ]]; then
		THIS_DISTRO="Raspbian";
	elif [[ ${IS_CENTOS} -gt 0 ]]; then
		THIS_DISTRO="CentOS";
	elif [[ ${IS_UBUNTU} -gt 0 ]]; then
		THIS_DISTRO="Ubuntu";
	elif [[ ${IS_ALPINE} -gt 0 ]]; then
		THIS_DISTRO="Alpine";
	elif [[ ${IS_DEBIAN} -gt 0 ]]; then
		THIS_DISTRO="Debian";
	fi;
fi;

THIS_RELEASE="Unknown";
if [ -n "$(which lsb_release 2>'/dev/null')" ]; then
	if [ -n "$(lsb_release --short --release | tr '[:lower:]' '[:upper:]';)" ]; then
		THIS_RELEASE="$(lsb_release --short --release | tr '[:lower:]' '[:upper:]';)";
	fi;
fi;

if [ "${THIS_DISTRO}" != "Unknown" ]; then
	COMBINED_DISTRO_RELEASE="${THIS_DISTRO}";
	if [ "${THIS_RELEASE}" != "Unknown" ]; then
		COMBINED_DISTRO_RELEASE="${COMBINED_DISTRO_RELEASE} ${THIS_RELEASE}";
	fi;
	RETURNED_OS="${COMBINED_DISTRO_RELEASE} running on ${RETURNED_OS}";
fi;

if [ ${VERBOSE} -eq 1 ]; then
	echo "";
	echo "THIS_OS_TYPE=${THIS_OS_TYPE}";
	echo "THIS_DISTRO=${THIS_DISTRO}";
	echo "THIS_RELEASE=${THIS_RELEASE}";
	echo "";
	echo "IS_WINDOWS=${IS_WINDOWS}";
	echo "IS_LINUX=${IS_LINUX}"; \
	echo "IS_MAC=${IS_MAC}"; \
	echo "IS_WSL=${IS_WSL}"; \
	echo "";
	echo "IS_RASPBIAN=${IS_RASPBIAN}"; \
	echo "IS_CENTOS=${IS_CENTOS}"; \
	echo "IS_UBUNTU=${IS_UBUNTU}"; \
	echo "IS_ALPINE=${IS_ALPINE}"; \
	echo "IS_DEBIAN=${IS_DEBIAN}"; \
	echo "IS_CYGWIN=${IS_CYGWIN}"; \
	echo "IS_MINGW=${IS_MINGW}";
fi;

if [ ${VERBOSE} -eq 1 ]; then
	echo "";
	echo "------------------------------------------------------------";
	echo "";
	echo -n "THIS OS:   ";
fi;

# Return the combined OS value
echo "${RETURNED_OS}";

if [ ${VERBOSE} -eq 1 ]; then
	echo "";
	echo "------------------------------------------------------------";
	echo "";
fi;


#	------------------------------------------------------------
#	Citation(s)
#
#		gnu.org  |  "GNU Coreutils"  |  http://www.gnu.org/software/coreutils/manual/html_node/index.html#toc-Operating-on-characters-1
#
#		stackoverflow.com  |  "How to detect the OS from a Bash script?"  |  https://stackoverflow.com/a/8597411
#
#		unix.stackexchange.com  |  "How can I reliably get the operating system's name?"  |  https://unix.stackexchange.com/a/92218
#
#		unix.stackexchange.com  |  "Which are the standard commands available in every Linux based distribution?"  |  https://unix.stackexchange.com/a/37065
#
#	------------------------------------------------------------