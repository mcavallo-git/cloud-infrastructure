#!/bin/bash
#
# LOCAL_BIN="/usr/local/bin/get_ipv4_wan" && echo "" > "${LOCAL_BIN}" && vi "${LOCAL_BIN}" && chmod 0755 "${LOCAL_BIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -ssL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/get_ipv4_wan?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile

if [ -n "$1" ] && [[ "$1" == *"log"* ]]; then # log this script's output

LOGDIR="${HOME}/get_ipv4_wan_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/get_ipv4_wan"; fi;
mkdir -p "${LOGDIR}"; chown "$(stat -c '%u:%g' "$(dirname "${LOGDIR}";)";)" "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;

fi;

# ------------------------------------------------------------
# Determine WAN IPv4
#

# REGEX_IPV4='(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))';

# External servers to resolve WAN-IP through

# IPv4 Resolvers
RESOLVER_1 = "https://ipv4.icanhazip.com";
RESOLVER_2 = "https://v4.ident.me";
RESOLVER_3 = "https://ipinfo.io/ip";
RESOLVER_4 = "https://ipecho.net/plain";

# IPv6 Resolvers
IPv6_Resolvers="https://ipv6.icanhazip.com";
IPv6_Resolvers="https://v6.ident.me";
IPv6_Resolvers="https://bot.whatismyipaddress.com";
IPv6_Resolvers="https://checkip.amazonaws.com";

THIS_WAN_IPv4="";
RESPONSE_SRVR="";
LENGTH_WAN_IP=0;

# Get current WAN IPv4
for EACH_RESOLVER in "${IP_RESOLVERS[@]}"; do
  if [ -z "${THIS_WAN_IPv4}" ] || [[ ${LENGTH_WAN_IP} -gt 15 ]]; then
    RESPONSE_SRVR="${EACH_RESOLVER}";
    THIS_WAN_IPv4=$(curl -L -s "${EACH_RESOLVER}");
    LENGTH_WAN_IP=$(echo -n "${THIS_WAN_IPv4}" | wc -c);
  fi;
done;

# Output Status: PASS or FAIL
if [ -z "${THIS_WAN_IPv4}" ] || (( ${LENGTH_WAN_IP} > 15 )); then
  # Error: Clear Variables
  RESPONSE_SRVR="";
  THIS_WAN_IPv4="";
  LENGTH_WAN_IP="";
  # Error: Show Message
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Unable to resolve WAN-IP";
  # Error: Throw 'bad' return-code
  exit 1;
else
  # Success
  if [ "${1}" == "verbose" ]; then
  # "Verbose" output
    echo "";
    echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Resolved WAN-IP to \"${THIS_WAN_IPv4}\" via \"${RESPONSE_SRVR}\" ";
    echo "";
  elif [ "$1" == "-q" ] || [ "$1" == "--quiet" ]; then
    # "Quiet" output (NO trailing newline)
    echo -n "${THIS_WAN_IPv4}";
  else
    # "Normal" output (output w/ newline)
    echo "${THIS_WAN_IPv4}";
  fi;
  # Exit w/ 'good' return-code
  exit 0;
fi;

#------------------------------------------------------------
#
# Citation(s)
#
#   domain  |  "title"  |  url
#
#------------------------------------------------------------