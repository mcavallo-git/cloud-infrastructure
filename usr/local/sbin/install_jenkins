#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_jenkins" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
# Sync 1-Liner
#
if [ 0 -eq 1 ]; then

wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_jenkins" -O "/usr/local/sbin/install_jenkins" -q && chmod 0755 "/usr/local/sbin/install_jenkins" && /usr/local/sbin/install_jenkins;

fi;
#
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------
	# Instantiate runtime variables
	
	# Docker-based installs:
	#	"/usr/local/bin/create_docker_jenkins"
	#  |--> docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean
	#  |--> docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins:alpine

	EXIT_CODE=1;

	APT_PKG_JDK="default-jdk-headless";
	APT_PKG_JRE="default-jre-headless";
	APT_PKG_JENKINS="jenkins";

	START_SECONDS_NANOSECONDS=$(date +'%s.%N');
	START_EPOCHSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 1);
	# START_NANOSECONDS=$(echo ${START_SECONDS_NANOSECONDS} | cut --delimiter '.' --fields 2 | cut --characters 1-9);
	# START_MICROSECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-6);
	# START_MILLISECONDS=$(echo ${START_NANOSECONDS} | cut --characters 1-3);
	START_DATETIME="$(date --date=@${START_EPOCHSECONDS} +'%Y-%m-%d %H:%M:%S')";
	START_TIMESTAMP="$(date --date=@${START_EPOCHSECONDS} +'%Y%m%d_%H%M%S')";

	# ------------------------------------------------------------
	# Determine if the Jenkins service already exists locally

	SERVICE_NAME="jenkins";
	SERVICE_MATCHES=$(systemctl list-unit-files --no-legend | awk '{print $1}' | sed -rne 's/^([A-Za-z0-9\.\_\-]+)\.service$/\1/p' | awk "/^${SERVICE_NAME}$/{print \$0}" | sort 2> '/dev/null';);
	if [ -n "${SERVICE_MATCHES}" ]; then

		# ------------------------------------------------------------
		
		if [ $(which apt-get 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then # Debian, Ubuntu, etc.
			PACKAGE_NAME="openjdk-8-jre-headless" && apt-get -y update && apt-get -y install "${PACKAGE_NAME}"; # Install Java SE8
			wget -q -O - "https://pkg.jenkins.io/debian-stable/jenkins.io.key" | sudo apt-key add -; # Import Jenkins' official GPG Key
			deb "https://pkg.jenkins.io/debian-stable" binary/; # Add Jenkins' package repository
			PACKAGE_NAME="jenkins" && apt-get -y update && apt-get -y install "${PACKAGE_NAME}"; # Install Jenkins


		elif [ $(which yum 1>'/dev/null' 2>&1; echo $?;) -eq 0 ]; then # Fedora, Oracle Linux, Red Hat Enterprise Linux, etc.
			PACKAGE_NAME="java-1.8.0-openjdk-headless" && yum -y check-update && yum -y install "${PACKAGE_NAME}"; # Install Java SE8
			wget -O "/etc/yum.repos.d/jenkins.repo" "https://pkg.jenkins.io/redhat-stable/jenkins.repo";  # Add Jenkins' package repository
			rpm --import "https://pkg.jenkins.io/redhat-stable/jenkins.io.key" 2>'/dev/null'; # Import Jenkins' official GPG Key

		fi;

		# Install Jenkins
		if [ $(apt list --installed 2>/dev/null | grep -h "^${APT_PKG_JENKINS}\/" | wc -l) -eq 0 ]; then

			# Download Jenkins' GnuPG Public-Key (to match & verify jenkins' download/repository against)
			JENKINS_GPG_KEY_URL="https://pkg.jenkins.io/debian-stable/jenkins.io.key";
			wget -q -O - "${JENKINS_GPG_KEY_URL}" | apt-key add -;
			# Setup Jenkins' package repository in APT
			JENKINS_APT_SOURCE_FILEPATH="/etc/apt/sources.list.d/jenkins.list";
			JENKINS_APT_SOURCE_CONTENTS="deb https://pkg.jenkins.io/debian-stable binary/";
			if [ ! -f "/etc/apt/sources.list.d/jenkins.list" ] || [ "$(cat ${JENKINS_APT_SOURCE_FILEPATH})" != "${JENKINS_APT_SOURCE_CONTENTS}" ]; then
				echo "${JENKINS_APT_SOURCE_CONTENTS}" > "${JENKINS_APT_SOURCE_FILEPATH}";
			fi;
			# Install the Jenkins package from newly added package-repo
			echo -e "\n""Info: Installing Jenkins";
			echo -e "  |--> Calling  [ apt-get -y update && apt-get -y install \"${APT_PKG_JENKINS}\"; ]  ...""\n";
			apt-get -y update && apt-get -y install "${APT_PKG_JENKINS}";

		fi;

	else
		# Jenkins is already installed
		echo -e "\n""Info:  Skipping Package-Install (Jenkins service already exists locally)";

	fi;

	SERVICE_NAME="jenkins";
	SERVICE_MATCHES=$(systemctl list-unit-files --no-legend | awk '{print $1}' | sed -rne 's/^([A-Za-z0-9\.\_\-]+)\.service$/\1/p' | awk "/^${SERVICE_NAME}$/{print \$0}" | sort 2> '/dev/null';);
	if [ -n "${SERVICE_MATCHES}" ]; then
		# Jenkins Service STILL not detected after install-attempt
		EXIT_CODE=1;
		echo -e "\n""Error:  Jenkins service not detected after install attempt";

	else
		EXIT_CODE=0;
		
		# ------------------------------------------------------------
		# Show the status of the Jenkins-Service
		echo -e "\n""Info: Showing Jenkins' Service-Status";
		echo -e "  |--> Calling  [ systemctl status jenkins --no-pager --full; ]  ...""\n";
		systemctl status jenkins --no-pager --full;

		# ------------------------------------------------------------
		# Show Jenkins' Ports which are in-use
		echo -e "\n""Info: Showing Jenkins' Ports which are in-use";
		echo -e "  |--> Calling  [ ps aux | grep -v 'grep' | grep 'jenkins' | grep -v 'color=auto' | grep 'httpPort'; ]  ...""\n";
		ps aux | grep -v 'grep' | grep 'jenkins' | grep -v 'color=auto' | grep 'httpPort';
		echo "";

	fi;

	# ------------------------------------------------------------
	# Allow user to sync jenkins config-file to cloud-infrastructure repo
	if [ -f "/etc/default/jenkins" ]; then
		READ_TIMEOUT=60;
		read -p "Sync Jenkins config-file \"/etc/default/jenkins\" to \"cloud-infrastructure\" repo, now? (y/n)  " -n 1 -t 60 -r; RETURN_CODE_READ=$?;
		echo "";
		if [ ${RETURN_CODE_READ} -gt 128 ]; then
			echo -e "Response timed out after ${READ_TIMEOUT}s";
		elif [ -z "${REPLY}" ] && [[ $REPLY =~ ^[Yy]$ ]]; then
			echo -e "\n""Info: Confirmed - Downloading Jenkins config from \"cloud-infrastructure\" repository";
			echo -e "  |--> Backing-up existing Jenkins config-file to \"/etc/default/jenkins.${START_TIMESTAMP}.bak\"""\n";
			mv "/etc/default/jenkins" "/etc/default/jenkins.${START_TIMESTAMP}.bak";
			wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/etc/default/jenkins" -O "/etc/default/jenkins" -q;
			chmod 0644 "/etc/default/jenkins";
		else
			echo "Denied - Skipping Jenkins config-file sync";
		fi;
	fi;

	exit ${EXIT_CODE};

fi;

# ------------------------------------------------------------
# Citation(s)
#
#   digitalocean.com  |  "How To Install Jenkins on Ubuntu 16.04"  |  https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04
#
#   hub.docker.com  |  "docker hub - Jenkins Continuous Integration and Delivery server"  |  https://hub.docker.com/r/jenkins/jenkins
#
#   pkg.jenkins.io  |  "Jenkins Debian packages"  |  https://pkg.jenkins.io/debian-stable/
#
#   pkg.jenkins.io  |  "RedHat Linux RPM packages for Jenkins"  |  https://pkg.jenkins.io/redhat-stable/
#
# ------------------------------------------------------------