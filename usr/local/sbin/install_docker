#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_docker" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [[ 0 -eq 1 ]]; then  # RUN THIS SCRIPT

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/install_docker?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/install_docker_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/install_docker"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date --utc +'%Y%m%d';)"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "${OSTYPE}" == "linux-gnu"* || "$(uname -s)" == "Linux" ]] && [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date --utc +'%Y-%m-%dT%H:%M:%S.%NZ';) Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  BIN_DOCKER="/usr/bin/docker";
  BIN_DOCKER_COMPOSE="/usr/local/bin/docker-compose";
  BIN_DOCKER_WINCRED="/usr/local/bin/docker-credential-wincred.exe";
  # Install prerequisite package(s)
  if [ -z "$(command -v jq 2>'/dev/null';)" ]; then
    apt-get -y update; apt-get -y install "jq";
  fi;
  # docker - Get current version info
  DOCKER_CURRENT_PATH="$(command -v docker 2>'/dev/null';)";
  DOCKER_CURRENT_VERSION="$(docker --version 2>'/dev/null' | sed -rne "s/^[^0-9]+([0-9\.]+)[,\s].+$/\1/p" | tr -d 'v';)";
  # docker-compose - Get current/latest version info
  DOCKER_COMPOSE_CURRENT_PATH="$(command -v docker-compose 2>'/dev/null';)";
  DOCKER_COMPOSE_CURRENT_VERSION="$(docker-compose --version --short 2>'/dev/null' | tr -d 'v';)";
  DOCKER_COMPOSE_LATEST_VERSION=$(curl --silent "https://api.github.com/repos/docker/compose/releases/latest" | jq .name -r | tr -d 'v';);
  #
  # Detect Linux vs WSL (Windows Subsystem for Linux) OSes
  #
  if [ -n "$(uname -r 2>&1 | grep -i 'microsoft' 2>&1;)" ]; then # ------------------------------------------------------------
    #
    #   docker  (WSL OS)
    #
    # Determine if docker is already installed
    PACKAGE_ALREADY_INSTALLED=$(echo "$(apt list --installed 2>'/dev/null';)" | grep -h "^docker-ce\/" | wc -l);
    if [[ "${PACKAGE_ALREADY_INSTALLED}" -eq 0 ]] && [ ! -f "${BIN_DOCKER}" ]; then
      # Ensure that no deprecated versions of docker are installed
      apt-get -y remove "docker" "docker-engine" "docker.io" "containerd" "runc";
      # Ensure that docker pre-requisites are installed
      apt-get -y update; apt-get -y install "apt-transport-https" "ca-certificates" "curl" "gnupg" "lsb-release";
      # Add Dockerâ€™s official GPG key
      mkdir -p "/etc/apt/keyrings"; curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | sudo gpg --dearmor -o "/etc/apt/keyrings/docker.gpg";
      # Add the docker apt package repository
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee "/etc/apt/sources.list.d/docker.list" 1> '/dev/null';
      # Install docker ce (community edition)
      echo -e "\nInstalling/Updating docker from source \"download.docker.com/linux/ubuntu\"...\n";
      apt-get -y update; apt-get -y install "docker-ce" "docker-ce-cli" "containerd.io" "docker-compose-plugin";
    fi;
    #
    #   docker-compose  (WSL OS)
    #
    echo "DOCKER_COMPOSE_CURRENT_VERSION=[${DOCKER_COMPOSE_CURRENT_VERSION}]";
    echo "DOCKER_COMPOSE_LATEST_VERSION=[${DOCKER_COMPOSE_LATEST_VERSION}]";
    if [ -z "${DOCKER_COMPOSE_CURRENT_VERSION}" ] || [[ "${DOCKER_COMPOSE_CURRENT_PATH}" == "${BIN_DOCKER_COMPOSE}" && "${DOCKER_COMPOSE_CURRENT_VERSION}" != "${DOCKER_COMPOSE_LATEST_VERSION}" ]]; then
      # Download the latest version of the docker-compose binary
      URL_DOCKER_COMPOSE_LATEST="https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_LATEST_VERSION}/docker-compose-$(uname -s)-$(uname -m)";
      echo -e "\nInstalling/Updating docker-compose from source \"github.com/docker/compose/releases\"...\n";
      curl -fsSL -o "${BIN_DOCKER_COMPOSE}" "${URL_DOCKER_COMPOSE_LATEST}";
      # Set file permission as-intended
      chmod 0755 "${BIN_DOCKER_COMPOSE}";
      #
      # docker-compose-switch  (WSL OS)
      #
      # DOCKER_COMPOSE_SW_LATEST_VERSION=$(curl -fsSL -o /dev/null -w "%{url_effective}" https://github.com/docker/compose-switch/releases/latest | xargs basename;);
      # URL_DOCKER_COMPOSE_SW_LATEST="https://github.com/docker/compose-switch/releases/download/${DOCKER_COMPOSE_SW_LATEST_VERSION}/docker-compose-linux-$(dpkg --print-architecture)";
      #
    fi;
    #
    #   docker-wincred  (WSL OS)
    #
    # Determine if docker-wincred is already installed
    if [ ! -f "${BIN_DOCKER_WINCRED}" ]; then
      # Determine the latest version of docker-credential-wincred.exe
      DOCKER_WINCRED_LATEST_VERSION=$(curl -fsSL -o /dev/null -w "%{url_effective}" "https://github.com/docker/docker-credential-helpers/releases/latest" | xargs basename;);
      # Download and extract docker-credential-wincred.exe via:
      URL_DOCKER_WINCRED_LATEST="https://github.com/docker/docker-credential-helpers/releases/download/${DOCKER_WINCRED_LATEST_VERSION}/docker-credential-wincred-${DOCKER_WINCRED_LATEST_VERSION}-$(dpkg --print-architecture).zip";
      echo -e "\nInstalling/Updating docker-wincred from source \"github.com/docker/docker-credential-helpers/releases\"...\n";
      curl -fsSL "${URL_DOCKER_WINCRED_LATEST}" | zcat | tee "${BIN_DOCKER_WINCRED}" 1>'/dev/null';
      # Assigns execution permission to docker-credential-wincred.exe via
      chmod +x "${BIN_DOCKER_WINCRED}";
      # Ensure that the docker CLI uses the wincred helper for storing credentials by editing the docker config file (using nano) via:
      echo -e "{\n    \"credsStore\": \"wincred.exe\"\n}" > "${HOME}/.docker/config.json";
    fi;
    #
    # WSL 2 Docker Service-Start Hotfix - Apply to '/etc/profile'
    #
    if [[ "$(cat '/etc/profile' 2>'/dev/null' | grep -i 'service docker status' | wc -l;)" -eq 0 ]] && [[ "$(cat '/etc/bash.bashrc' 2>'/dev/null' | grep -i 'service docker status' | wc -l;)" -eq 0 ]] && [[ "$(cat ${HOME}/.profile 2>'/dev/null' | grep -i 'service docker status' | wc -l;)" -eq 0 ]] && [[ "$(cat ${HOME}/.bashrc 2>'/dev/null' | grep -i 'service docker status' | wc -l;)" -eq 0 ]]; then sudo echo -e "\nif [[ \$(/usr/sbin/service docker status 1>'/dev/null' 2>&1; echo \${?};) -ne 0 ]]; then\n  ###\n  ###  WSL 2 Docker Service-Start Hotfix\n  ###   |--> Ensure the docker service is started whenever a WSL terminal is opened \n  ###   |--> Leverages '/etc/profile', a built-in Linux shellscript that will run when you open a new WSL terminal\n  ###  \n  wsl.exe -d "\${WSL_DISTRO_NAME}" -u root -e /usr/sbin/service docker start 1>'/dev/null' 2>&1;\nfi;\n" | sudo tee -a "/etc/profile" 1>'/dev/null' 2>&1; fi;
    #
  else # ------------------------------------------------------------
    #
    #   docker  (Non-WSL OS)
    #
    # Determine if docker is already installed
    PACKAGE_ALREADY_INSTALLED=$(echo "$(apt list --installed 2>'/dev/null';)" | grep -h "^docker-ce\/" | wc -l);
    if [[ "${PACKAGE_ALREADY_INSTALLED}" -eq 0 ]] && [ ! -f "${BIN_DOCKER}" ]; then
      echo -e "\nInstalling/Updating docker from source \"get.docker.com\"...\n";
      curl -sL "https://get.docker.com/" | sh;
    fi;
    if [ -z "$(/usr/sbin/service docker status | grep 'Active: active (running)')" ]; then
      echo "Calling [ /usr/sbin/service \"docker\" start; ]...";
      /usr/sbin/service "docker" start;
    fi;
    #
    #   docker-compose  (Non-WSL OS)
    #
    # Determine if docker-compose is already installed
    if [ ! -f "${BIN_DOCKER_COMPOSE}" ]; then
      if [ -n "$(command -v apk 2>'/dev/null';)" ]; then
        # Alpine Distro(s) --> Install Prerequisite-Packages [ py-pip, python-dev, libffi-dev, openssl-dev, gcc, libc-dev, & make ]
        apk update && apk add py-pip python-dev libffi-dev openssl-dev gcc libc-dev make;
      fi;
      if [ "$(uname -m)" == "x86_64" ]; then
        #
        # docker-compose (x86_64)  -  https://docs.docker.com/compose/install
        #
        echo -e "\nInstalling/Updating docker-compose from source \"github.com/docker/compose/releases\"...\n";
        curl -sL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_LATEST_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o "${BIN_DOCKER_COMPOSE}";
        # Set file permission as-intended
        chmod 0755 "${BIN_DOCKER_COMPOSE}";
      else
        #
        # docker-compose (Non-x86_64)  -  https://github.com/docker/compose/issues/6831#issuecomment-558865087
        #   |--> Namely Raspberry Pis, which have ARM64 ("aarch64" machine hardware name) CPUs
        #
        echo "Calling [ apt-get -y update ]...";
        apt-get -y update;
        echo "Calling [ apt-get -y install python3; ]...";
        apt-get -y install python3;
        echo "Calling [ apt-get -y install python3-pip; ]...";
        apt-get -y install python3-pip;
        echo "Calling [ pip3 install --upgrade pip; ]...";
        pip3 install --upgrade pip;
        echo "Calling [ python3 -m pip install -IU docker-compose; ]...";
        python3 -m pip install -IU docker-compose;
      fi;
    fi;
  fi;
  # Enable docker locally
  if [[ "$(systemctl status 1>'/dev/null' 2>&1; echo ${?};)" -eq 0 ]]; then
    systemctl enable docker --now;
  fi;
  # Show installed versions of docker & docker-compose
  if [ -f "${BIN_DOCKER}" ]; then
    echo "";
    echo "Local package found:   $("${BIN_DOCKER}" --version;)";
  fi;
  if [ -f "${BIN_DOCKER_COMPOSE}" ]; then
    echo "";
    echo "Local package found:   $("${BIN_DOCKER_COMPOSE}" --version;)";
  fi;
  if [ -f "${BIN_DOCKER_WINCRED}" ]; then
    echo "";
    echo "Local package found:   Docker Credential Wincred $("${BIN_DOCKER_WINCRED}" version;)";
  fi;
  echo "";
fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   docs.docker.com  |  "Install Docker Engine on Ubuntu | Docker Documentation"  |  https://docs.docker.com/engine/install/ubuntu/
#
#   docs.docker.com  |  "Install Docker Compose"  |  https://docs.docker.com/compose/install/
#
#   github.com  |  "Release docker/compose image for armv7 / arm64v8 Â· Issue #6831 Â· docker/compose Â· GitHub"  |  https://github.com/docker/compose/issues/6831#issuecomment-558865087
#
#   stackoverflow.com  |  "debian based - How to upgrade docker-compose to latest version - Stack Overflow"  |  https://stackoverflow.com/a/49839172
#
#   stackoverflow.com  |  "Run Docker on Ubuntu on Windows Subsystem for Linux"  |  https://stackoverflow.com/a/48008676
#
# ------------------------------------------------------------