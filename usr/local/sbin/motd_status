#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/motd_status" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# test -v SUDO_USER && motd_status --user $SUDO_USER --allow;
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/motd_status_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/motd_status"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" ); printf -- '-%.0s' {1..10}; printf " Script started at [ $(date +'%Y-%m-%dT%H:%M:%S.%N%z';) ]\n";
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [[ "$(id -un)" != "root" ]]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  # Parse inline arguments (passed to current script)
  ARGS=("$@");
  COUNT_ARGS=${#ARGS[@]};
  
  DISABLE_MOTD=0;
  ENABLE_MOTD=0;

  # Walk through any inline-arguments passed to this function
  for (( i=0;i<$COUNT_ARGS;i++ )); do
    EACH_ARG=${ARGS[${i}]};
    # Check if this is the last inline-argument or if there are more to follow
    if [ $((${i}+1)) -eq ${COUNT_ARGS} ]; then # if this is the last argument
      NEXT_ARG="";
    else
      NEXT_ARG=${ARGS[$((${i}+1))]};
      if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
        NEXT_ARG="";
      fi;
    fi;
    if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument
      # ------------------------------------------------------------

      if [ "${EACH_ARG}" == "--enable" ] || [ "${EACH_ARG}" == "-enable" ] || [ "${EACH_ARG}" == "enable" ]; then
        ENABLE_MOTD=1;
      fi;
      if [ "${EACH_ARG}" == "--disable" ] || [ "${EACH_ARG}" == "-disable" ] || [ "${EACH_ARG}" == "disable" ]; then
        DISABLE_MOTD=1;
      fi;

      # ------------------------------------------------------------
    fi;

  done;

  if [ -z "$(which sed 2>'/dev/null';)" ]; then
    # Missing required package
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Error -> Package not found: \"sed\" - Please install this package, then re-run this script";
    echo -e "${EXAMPLE_VALID_CALL}";
    exit 1;

  else

    if [ ${ENABLE_MOTD} -eq 1 ]; then
      MOTD_ENABLED_VALUE=1;
    elif [ ${DISABLE_MOTD} -eq 1 ]; then
      MOTD_ENABLED_VALUE=0;
    fi;

    if [ ! -v MOTD_ENABLED_VALUE ]; then
      # ERROR - Required argument(s) are empty/undefined
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info -> To disable MOTD (Message of the Day), use the '--disable' directive via: >  motd_status --disable";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info -> To enable MOTD (Message of the Day), use the '--enable' directive via: >  motd_status --enable";
    
    elif [ ${ENABLE_MOTD} -eq 1 ] && [ ${DISABLE_MOTD} -eq 1 ]; then
      # ERROR - Conflicting arguments
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Error -> Please select only enable or disable (and not both) directives";

    elif [ $(find /etc/update-motd.d/*motd-news* 2>'/dev/null' | wc -l) -eq 0 ] && [ $(find /etc/default/*motd-news* 2>'/dev/null' | wc -l) -eq 0 ]; then
        # ERROR - Missing required file(s)
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Error -> No file(s) found which match glob-pattern [ /etc/update-motd.d/*motd-news* ] or [ /etc/default/*motd-news* ]";
        echo -e "${EXAMPLE_VALID_CALL}";
        exit 1;

    else

      # Success - Update each associated config-file
      echo "Replacing lines starting with \"ENABLED=\" to, instead, be \"ENABLED=${MOTD_ENABLED_VALUE}\"";
      for EACH_FILE in /etc/update-motd.d/*motd-news*; do
        echo "Updating \"${EACH_FILE}\"";
        sed --in-place -e "/^ENABLED=/c\ENABLED=${MOTD_ENABLED_VALUE}" "${EACH_FILE}";
      done;
      for EACH_FILE in /etc/default/motd-news; do
        echo "Updating \"${EACH_FILE}\"";
        sed --in-place -e "/^ENABLED=/c\ENABLED=${MOTD_ENABLED_VALUE}" "${EACH_FILE}";
      done;

    fi;

  fi;

fi;

# ------------------------------------------------------------
#
# Citation(s)
#
#   stackoverflow.com  |  "Check Whether a User Exists"  |  https://stackoverflow.com/a/14811915
#
# ------------------------------------------------------------