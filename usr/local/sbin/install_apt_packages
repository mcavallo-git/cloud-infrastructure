#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/install_apt_packages" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/$(basename ${0})_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/$(basename ${0})"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
	echo "";
	echo "$(date +'%Y-%m-%d %H:%M:%S') | Error: Script must run as user \"root\" or via \"sudo\" command";
	exit 1;
else
	# ------------------------------------------------------------

	APT_PACKAGES=();

	APT_PACKAGES+=("apt-rdepends");
	APT_PACKAGES+=("bc");
	APT_PACKAGES+=("certbot");
	APT_PACKAGES+=("default-jdk-headless");
	APT_PACKAGES+=("default-jre-headless");
	APT_PACKAGES+=("dos2unix");
	APT_PACKAGES+=("git");
	APT_PACKAGES+=("ifupdown");
	APT_PACKAGES+=("multitail");
	APT_PACKAGES+=("nginx-full");
	APT_PACKAGES+=("nmap");
	APT_PACKAGES+=("python-certbot-nginx");
	APT_PACKAGES+=("p7zip-full");
	APT_PACKAGES+=("p7zip-rar");
	APT_PACKAGES+=("resolvconf");
	APT_PACKAGES+=("software-properties-common");
	# APT_PACKAGES+=("sslscan");
	APT_PACKAGES+=("ufw");
	APT_PACKAGES+=("vim-common");
	APT_PACKAGES+=("wget");
	APT_PACKAGES+=("yui-compressor");

	UNIQUE_APT_PACKAGES=($(echo "${APT_PACKAGES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '));
	for EACH_PKG in "${UNIQUE_APT_PACKAGES[@]}"; do
		ALREADY_INSTALLED=$(echo "$(apt list --installed 2>/dev/null;)" | grep -h "^${EACH_PKG}\/" | wc -l);
		if [ "${ALREADY_INSTALLED}" != "0" ]; then
      echo "✓ Package \"${EACH_PKG}\" is already installed";
		else
      echo "× Package \"${EACH_PKG}\" not found locally - installing...";
      if [[ "${EACH_PKG}" == "nginx"* ]]; then
        if [ $(apt policy 2>"/dev/null" | grep "http://ppa.launchpad.net/nginx" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:nginx/stable";
        fi;
      elif [ "${EACH_PKG}" == "certbot" ] || [ "${EACH_PKG}" == "python-certbot-nginx" ]; then
        if [ $(apt policy 2>"/dev/null" | grep "http://ppa.launchpad.net/certbot" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:certbot/certbot";
        fi;
      elif [ "${EACH_PKG}" == "git" ]; then
        if [ $(apt policy 2>"/dev/null" | grep "http://ppa.launchpad.net/git" | wc -l;) -eq 0 ]; then
          add-apt-repository --yes --update "ppa:git-core/ppa";
        fi;
      else
        apt-get update --yes;
      fi;
      apt-get install --yes "${EACH_PKG}";
		fi;
	done;

	OPTIONAL_PACKAGES=();

	# Containers
	OPTIONAL_PACKAGES+=("python-pip");
	OPTIONAL_PACKAGES+=("docker");
	OPTIONAL_PACKAGES+=("docker-compose");

	# CD-CD
	OPTIONAL_PACKAGES+=("jenkins");

	# Database
	OPTIONAL_PACKAGES+=("mysql-client");
	OPTIONAL_PACKAGES+=("mysql-server");
	OPTIONAL_PACKAGES+=("mysqldump");

	# SMTP
	OPTIONAL_PACKAGES+=("sendmail");

	# Node
	OPTIONAL_PACKAGES+=("nodejs");
	OPTIONAL_PACKAGES+=("ws"); # Websockets (for NodeJS)
	OPTIONAL_PACKAGES+=("socket.io"); # Websockets Assist (for Node.JS)
	OPTIONAL_PACKAGES+=("npm");

fi;
