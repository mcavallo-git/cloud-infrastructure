# ------------------------------------------------------------
#
#==--  Determine if request will need to be redirected
#
# 
# map "$hostname:$request_uri" $redirect_action {
# 	default 0;
# 	"~*mcavallo.com:meta$" meta;  # ~* [case-insensitive regex]
# }
# 
# 
# ------------------------------------------------------------
#
#==--  mcavallo.com
#==--  *.mcavallo.com
#
server {
	listen 80;
	listen 443 ssl http2;
	listen [::]:80;
	listen [::]:443 ssl http2;
	server_name ~^(?<subdomain>.+\.)?mcavallo\.com$;
	include "/etc/nginx/nginx_error_locations.conf";
	access_log "/var/log/nginx/access_$host.excessive.log" excessive;

	if ($scheme != "https") {
		return 301 https://$host$request_uri; # Force request-upgrade from HTTP(80) to HTTPS(443)
	}

	ssl_certificate "/etc/letsencrypt/live/mcavallo.com/fullchain.pem";
	ssl_certificate_key "/etc/letsencrypt/live/mcavallo.com/privkey.pem";
	ssl_trusted_certificate "/etc/letsencrypt/live/mcavallo.com/chain.pem";


	# ------------------------------------------------------------
	#                    ~ [case-sensitive regex]
	if ($redirect_action ~ "^meta$") {
		return 200 "lt.mcavallo.work\nrz.mcavallo.net\nusg.mcavallo.net\nws.mcavallo.work";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/cashapp$") {
		return 301 "https://cash.me/mcavallo";
	}
	if ($subdomain ~* "^cashapp.$") {
		return 301 "https://cash.me/mcavallo";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/cloud-infrastructure$") {
		return 301 "https://github.com/mcavallo-git/cloud-infrastructure";
	}
	if ($subdomain ~* "^cloud-infrastructure.$") {
		return 301 "https://github.com/mcavallo-git/cloud-infrastructure";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/cv$") {
		return 301 "https://linkedin.mcavallo.com";
	}
	if ($subdomain ~* "^cv.$") {
		return 301 "https://linkedin.mcavallo.com";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/git$") {
		return 301 "https://github.com/mcavallo-git/repositories";
	}
	if ($subdomain ~* "^git.$") {
		return 301 "https://github.com/mcavallo-git/repositories";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/good-credit$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/images/archive/credit-score-factors.jpg";
	}
	if ($subdomain ~* "^good-credit.$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/images/archive/credit-score-factors.jpg";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/linkedin$") {
		return 301 "https://linkedin.com/in/matt-cavallo";
	}
	if ($subdomain ~* "^linkedin.$") {
		return 301 "https://linkedin.com/in/matt-cavallo";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/linux$") {
		return 301 "https://github.com/mcavallo-git/cloud-infrastructure#cloud-infrastructure";
	}
	if ($subdomain ~* "^linux.$") {
		return 301 "https://github.com/mcavallo-git/cloud-infrastructure#cloud-infrastructure";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/paypal$") {
		return 301 "https://www.paypal.me/cavalol"; # Note: Use syntax  [ https://paypal.me/cavalol/25 ] to request $25 (example)
	}
	if ($subdomain ~* "^paypal.$") {
		return 301 "https://www.paypal.me/cavalol"; # Note: Use syntax  [ https://paypal.me/cavalol/25 ] to request $25 (example)
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/pc$") {
		return 301 "https://pcpartpicker.com/user/cavalol/saved/7Q2Mcf";
	}
	if ($subdomain ~* "^pc.$") {
		return 301 "https://pcpartpicker.com/user/cavalol/saved/7Q2Mcf";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/resume$") {
		return 301 "https://cv.mcavallo.com";
	}
	if ($subdomain ~* "^resume.$") {
		return 301 "https://cv.mcavallo.com";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/repos$") {
		return 301 "https://github.com/mcavallo-git/repositories";
		# return 302 https://github.com/login?return_to=%2Fmcavallo-git%2Frepositories; # GitHub + Login
	}
	if ($subdomain ~* "^repos.$") {
		return 301 "https://github.com/mcavallo-git/repositories";
	}


	# ------------------------------------------------------------
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/venmo$") {
		return 301 "https://venmo.com/cavalol";
	}
	if ($subdomain ~* "^venmo.$") {
		return 301 "https://venmo.com/cavalol";
	}


	# ------------------------------------------------------------
	# ### Sync Bash Modules  (Linux/Shellscripts)
	#
	#   curl -ssL https://mcavallo.com | bash -s -- --all;
	#
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/sh$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure?t=$msec";
	}
	if ($subdomain ~* "^sh.$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure?t=$msec";
	}
	if ($request_uri ~* "^/sync$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure?t=$msec";
	}
	if ($subdomain ~* "^sync.$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/sync_cloud_infrastructure?t=$msec";
	}


	# ------------------------------------------------------------
	# ### Sync PowerShell Modules
	#
	#   [System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]'Tls11,Tls12'; Clear-DnsClientCache; Set-ExecutionPolicy "RemoteSigned" -Scope "CurrentUser" -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ps.mcavallo.com'));
	#
	#   [System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]'Tls11,Tls12'; Clear-DnsClientCache; Set-ExecutionPolicy -ExecutionPolicy "Bypass" -Scope "CurrentUser" -Force; $SyncTemp="${Env:TEMP}\sync.$($(Date).Ticks).ps1"; New-Item -Force -ItemType "File" -Path ("${SyncTemp}") -Value (($(New-Object Net.WebClient).DownloadString("https://ps.mcavallo.com/ps?t=$((Date).Ticks)"))) | Out-Null; . "${SyncTemp}"; Remove-Item "${SyncTemp}";
	#
	#                ~* [case-insensitive regex]
	if ($request_uri ~* "^/ps$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/sync.ps1?t=$msec";
	}
	if ($subdomain ~* "^ps.$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/sync.ps1?t=$msec";
	}
	if ($request_uri ~* "^/sync-ps$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/sync.ps1?t=$msec";
	}
	if ($subdomain ~* "^sync-ps.$") {
		return 301 "https://raw.githubusercontent.com/mcavallo-git/Coding/master/sync.ps1?t=$msec";
	}

	if ($request_uri ~* "^/$") {
		return 301 "https://github.com/mcavallo-git/Coding/blob/master/README.md#devops-resource-reference";
	}

	if ($subdomain ~* "^$") {
		return 301 "https://github.com/mcavallo-git/Coding/blob/master/README.md#devops-resource-reference";
	}


	# ------------------------------------------------------------
	#              ~* [case-insensitive regex]
	# if ($subdomain ~* "^cv.$") {
	# 	root /var/www/html/wordpress; # webroot
	# 	index index.php;
	# 	location / {
	# 		try_files $uri $uri/ /index.php?$args;
	# 	}
	#		         ~* [case-insensitive regex]
	# 	location ~* \.php$ { #  *.php requests
	# 		try_files $uri $uri/ /index.php?$args;
	# 		fastcgi_read_timeout 120;
	# 		fastcgi_index   index.php;
	# 		include         fastcgi_params;
	# 		fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
	# 		fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
	# 		fastcgi_pass    unix:/run/php/php7.2-fpm.sock;
	# 	}
	# }

}


# ------------------------------------------------------------
### Enable NGINX Host
#
# DN="mcavallo.com"; NG="/etc/nginx/sites-available/${DN}.nginx"; echo "" > ${NG}; vi ${NG}; ln -sf ${NG} /etc/nginx/sites-enabled/${DN}; reload_nginx;
#
#
# ------------------------------------------------------------
### Create Wildcard LetsEncrypt Certs
#
# DN="mcavallo.com"; DL="${HOME}"; if [ -w "/usr/local/sbin" ]; then DL="/usr/local/sbin"; fi; wget "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/certbot_add_wildcard" -O "${DL}/certbot_add_wildcard" -q; chmod 0755 "${DL}/certbot_add_wildcard"; ${DL}/certbot_add_wildcard "${DN}"; test -x /usr/local/sbin/reload_nginx && /usr/local/sbin/reload_nginx;
#
#
# ------------------------------------------------------------
### Remove Domain(s) & Revoke Certificate(s)
###   |--> Deletes NGINX Files & Symlinks
###   |--> Deletes LetsEncrypt Files
###   |--> Revokes Certificate thru LetsEncrypt (Invalidates the certificate on the Certificate-Authority's end)
#
# FQDN="mcavallo.com"; certbot revoke --cert-path "/etc/letsencrypt/live/${FQDN}/fullchain.pem"; certbot delete --cert-name "${FQDN}"; find "/etc/letsencrypt/" -name "*${FQDN}*"; unlink "/etc/nginx/sites-enabled/${FQDN}"; certbot certificates;
#
#
# ------------------------------------------------------------
# Citation(s)
#
#   nginx.org  |  "Alphabetical index of variables"  |  https://nginx.org/en/docs/varindex.html
#
#   nginx.org  |  "NGINX - Core Module Variables"  |  https://nginx.org/en/docs/http/ngx_http_core_module.html#variables
#
#   serverfault.com  |  "Nginx redirect non-existant files on https to http with try_files"  |  https://serverfault.com/a/411955
#
#   serverfault.com  |  "Reply with 200 from Nginx config without serving a file"  |  https://serverfault.com/a/491817
#
#   serversforhackers.com  |  "Mapping Headers in Nginx"  |  https://serversforhackers.com/c/nginx-mapping-headers
#
#   stackoverflow.com  |  "nginx reverse proxy disable cache"  |  https://stackoverflow.com/a/56257749
#
#   stackoverflow.com  |  "Disable nginx cache for JavaScript files"  |  https://stackoverflow.com/a/45285696
#
#   www.digitalocean.com  |  "conditional within an "if" in Nginx | DigitalOcean"  |  https://www.digitalocean.com/community/questions/conditional-within-an-if-in-nginx?answer=42998
#
# ------------------------------------------------------------