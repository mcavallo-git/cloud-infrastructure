#!/bin/bash
#
#   LOCAL_SBIN="/usr/local/bin/kubectl_get_all_resources" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------
if [[ 0 -eq 1 ]]; then # RUN THIS SCRIPT REMOTELY:

# Option 1: (Default) Get resources for one or all namespaces (determined by terminal input at runtime)
curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

# Option 2: Get resources for all namespaces (if string is a blank value)
export NAMESPACE=""; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

# Option 3: Get resources for one namespace (if string is a NON-blank value)
export NAMESPACE="single-namespace"; curl -H "Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" -sL "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/bin/kubectl_get_all_resources?t=$(date +'%s.%N')" | bash;

fi;
# ------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/kubectl_get_all_resources_logs"; if [[ -w "/var/log/" ]]; then LOGDIR="/var/log/kubectl_get_all_resources"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}" 2>'/dev/null'; chmod 0770 "${LOGDIR}" 2>'/dev/null';
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d')"; touch "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
# ------------------------------------------------------------

if [[ -v NAMESPACE ]]; then
  # Get namespace from environment variable
  if [[ -n "${NAMESPACE}" ]]; then
    echo "";
    echo "Variable \${NAMESPACE} is set to \"${NAMESPACE}\"";
    echo " |--> Getting resource manifests for this namespace...";
  else
    echo "Variable \${NAMESPACE} is set but contains no value";
    echo " |--> Getting resource manifests for all namespaces...";
  fi;
  USE_NAMESPACE="${NAMESPACE}";
else
  # Get namespace from terminal input
  READ_TIMEOUT=60;
  echo "";
  echo -n "Get resource manifests for which namespace?  (enter a blank value to list resources for all namespaces)  ";
  read -p "" -t ${READ_TIMEOUT} USE_NAMESPACE <'/dev/tty';
  echo "";
fi;

# Create log directory
LOGDIR="${HOME}/Desktop/kubectl_get_all_resources_$(date +'%Y%m%d_%H%M%S')/$(kubectl config current-context;)";
mkdir -p "${LOGDIR}";

if [[ -n "${USE_NAMESPACE}" ]]; then
  # Single Namespace
  #  |--> Get all kubernetes resources
  mkdir -p "${LOGDIR}/${USE_NAMESPACE}";
  echo "";
  echo "Outputting resource manifests for namespace \"${USE_NAMESPACE}\" to directory \"${LOGDIR}/${USE_NAMESPACE}\" ...";
  kubectl get namespace "${USE_NAMESPACE}" --output=yaml | tee "${LOGDIR}/${USE_NAMESPACE}/namespace.yaml";
  for EACH_RESOURCE_TYPE in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    EACH_RESOURCE_TYPE_MANIFESTS=$(kubectl get ${EACH_RESOURCE_TYPE} --namespace="${USE_NAMESPACE}" --ignore-not-found --output=yaml 2>/dev/null;);
    if [ -n "${EACH_RESOURCE_TYPE_MANIFESTS}" ]; then
      echo "${EACH_RESOURCE_TYPE_MANIFESTS}" >> "${LOGDIR}/${USE_NAMESPACE}/${EACH_RESOURCE_TYPE}.yaml";
    fi;
  done;
else
  # All Namespaces
  #  |--> Get all kubernetes resources
  for EACH_NAMESPACE in $(kubectl get namespaces | grep -v '^NAME ' | awk '{print $1}' | sort | uniq); do
    mkdir -p "${LOGDIR}/${EACH_NAMESPACE}";
    echo "";
    echo "Outputting resource manifests for namespace \"${EACH_NAMESPACE}\" to directory \"${LOGDIR}/${EACH_NAMESPACE}\" ...";
    kubectl get namespace "${EACH_NAMESPACE}" --output=yaml | tee "${LOGDIR}/${EACH_NAMESPACE}/namespace.yaml";
    for EACH_RESOURCE_TYPE in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
      EACH_RESOURCE_TYPE_MANIFESTS=$(kubectl get ${EACH_RESOURCE_TYPE} --namespace="${EACH_NAMESPACE}" --ignore-not-found --output=yaml 2>/dev/null;);
      if [ -n "${EACH_RESOURCE_TYPE_MANIFESTS}" ]; then
        echo "${EACH_RESOURCE_TYPE_MANIFESTS}" >> "${LOGDIR}/${EACH_NAMESPACE}/${EACH_RESOURCE_TYPE}.yaml";
      fi;
    done;
  done;
fi;

echo "";
echo -e "Listing manifest filenames in output directory \"${LOGDIR}\"...";
find "${LOGDIR}";
if [ -n "$(command -v explorer.exe 2>'/dev/null';)" ]; then
  if [ -n "$(command -v wslpath 2>'/dev/null';)" ]; then
    explorer.exe "$(wslpath -w "${LOGDIR}";)";
  else
    explorer.exe "${LOGDIR}";
  fi;
fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   www.studytonight.com  |  "How to List all Resources in a Kubernetes Namespace - Studytonight"  |  https://www.studytonight.com/post/how-to-list-all-resources-in-a-kubernetes-namespace
#
# ------------------------------------------------------------