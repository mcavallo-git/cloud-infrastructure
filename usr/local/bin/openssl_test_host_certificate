#!/usr/bin/env bash
#
#    Pulls the details of the https-cert (if any) attached to a given hostname
#
if [[ 0 -eq 1 ]]; then # IF RUNNING A ONE-OFF, MANUALLY 


HOST_NAME="example.com"; HOST_PORT="443"; openssl s_client -showcerts -servername "${HOST_NAME}" -connect "${HOST_NAME}:${HOST_PORT}" </dev/null;


fi;
# ------------------------------------------------------------

#
# Target Host (FQDN / IPv4 / etc.)
#
HOST_NAME="";
if [ -n "${1}" ]; then
  HOST_NAME="${1}";
else
  echo "";
  read -p "Enter HTTP Host (set this using first inline argument, e.g. \${1}}):  " -t 60 <'/dev/tty';
  HOST_NAME="${REPLY}";
fi;


#
# Target Port
#
if [ -n "$2" ]; then
  HOST_PORT="$2";
else
  echo "";
  echo "Info:  Defaulting to port 443 (set this using second inline argument, e.g. \${2})";
  echo "";
  HOST_PORT="443";
fi;

#
# Determine if a STARTTLS request is warranted (based on target port)
#
unset STARTTLS_PORT_PROTOS; declare -A STARTTLS_PORT_PROTOS; # [Re-]Instantiate bash array

STARTTLS_PORT_PROTOS+=(["21"]="ftp");

STARTTLS_PORT_PROTOS+=(["143"]="imap");  # 143 is IMAP
STARTTLS_PORT_PROTOS+=(["220"]="imap");  # 220 is IMAP version-3
STARTTLS_PORT_PROTOS+=(["585"]="imap");  # 585 is IMAPS

STARTTLS_PORT_PROTOS+=(["113"]="irc");
STARTTLS_PORT_PROTOS+=(["194"]="irc");

STARTTLS_PORT_PROTOS+=(["389"]="ldap");
STARTTLS_PORT_PROTOS+=(["636"]="ldap");  # 636 is LDAPS

STARTTLS_PORT_PROTOS+=(["7025"]="lmtp");  # 636 is LDAPS

STARTTLS_PORT_PROTOS+=(["3306"]="mysql");

STARTTLS_PORT_PROTOS+=(["119"]="nntp");

STARTTLS_PORT_PROTOS+=(["110"]="pop3");
STARTTLS_PORT_PROTOS+=(["995"]="pop3");  # 995 is POP3S

STARTTLS_PORT_PROTOS+=(["5432"]="postgres");

STARTTLS_PORT_PROTOS+=(["4190"]="sieve");

STARTTLS_PORT_PROTOS+=(["4190"]="sieve");

STARTTLS_PORT_PROTOS+=(["25"]="smtp");
STARTTLS_PORT_PROTOS+=(["465"]="smtp");  # 465 is SMTPS  (implicit TLS)
STARTTLS_PORT_PROTOS+=(["587"]="smtp");  # 587 is STARTTLS  (explicit TLS)
STARTTLS_PORT_PROTOS+=(["3535"]="smtp");  # Alternate SMTP protocol

STARTTLS_PORT_PROTOS+=(["5222"]="xmpp");
STARTTLS_PORT_PROTOS+=(["5223"]="xmpp");  # 5223 is xmpp over SSL
STARTTLS_PORT_PROTOS+=(["5269"]="xmpp-serve");  # 5269 is (xmpp-serve) Extensible Messaging and Presence Protocol
STARTTLS_PORT_PROTOS+=(["5280"]="xmpp-serve");  # 5280 is (xmpp-serve) Extensible Messaging and Presence Protocol
STARTTLS_PORT_PROTOS+=(["5281"]="xmpp-serve");  # 5281 is (xmpp-serve) Extensible Messaging and Presence Protocol
STARTTLS_PORT_PROTOS+=(["5298"]="xmpp-serve");  # 5298 is (xmpp-serve) Extensible Messaging and Presence Protocol

for EACH_PORT in "${!STARTTLS_PORT_PROTOS[@]}"; do
  if [ "${HOST_PORT}" == "${EACH_PORT}" ]; then
    PROTO_STARTTLS="${STARTTLS_PORT_PROTOS[${EACH_PORT}]}";
    break;
  fi;
done;


# ------------------------------------------------------------
# Parse additional arguments (passed to current script)

ARGS=("$@");
ARGS_COUNT=${#ARGS[@]};

ARGS_DEBUG_MODE=0;

# Walk through any inline-arguments passed to this function
for (( i=0;i<$ARGS_COUNT;i++ )); do

  EACH_ARG=${ARGS[${i}]};

  # Check if this is the last inline-argument or if there are more to follow
  if [ $((${i}+1)) -eq ${ARGS_COUNT} ]; then # if this is the last argument
    NEXT_ARG="";
  else
    NEXT_ARG=${ARGS[$((${i}+1))]};
    if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
      NEXT_ARG="";
    fi;
  fi;

  if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

    # Parse cronjob calls
    if [ "${EACH_ARG}" == "-starttls" ] || [ "${EACH_ARG}" == "--starttls" ]; then
      PROTO_OVERRIDE="";
      for EACH_PORT in "${!STARTTLS_PORT_PROTOS[@]}"; do
        EACH_PROTO="${STARTTLS_PORT_PROTOS[${EACH_PORT}]}";
        if [ "${NEXT_ARG}" == "${EACH_PROTO}" ]; then
          PROTO_OVERRIDE="${EACH_PROTO}";
          break;
        fi;
      done;
      if [ -n "${PROTO_OVERRIDE}" ]; then
        PROTO_STARTTLS="${PROTO_OVERRIDE}";
        echo "Protocol-specific (STARTTLS) messaging WILL be used (openssl s_client -starttls \"${PROTO_STARTTLS}\")";
      else
        if [ -n "${PROTO_STARTTLS}" ]; then
          echo "";
          echo "Info:  User passed a blank/undefined value for the \"${EACH_ARG}\" argument";
          echo "";
          read -p "  Do you want to use protocol-specific (STARTTLS) messaging (openssl s_client -starttls \"${PROTO_STARTTLS}\")?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Confirmed";
            echo "Protocol-specific (STARTTLS) messaging WILL be used (openssl s_client -starttls \"${PROTO_STARTTLS}\")";
          else
            echo "Denied";
            echo "Protocol-specific (STARTTLS) messaging will NOT be used (REMOVED: openssl s_client -starttls \"${PROTO_STARTTLS}\")";
            PROTO_STARTTLS="";
          fi;
        else
          echo "";
          echo "Invalid STARTTLS argument passed:  \"${EACH_ARG}\" ${NEXT_ARG}"
          echo "  |--> For an exhaustive list of available starttls protocols, run 'man openssl-sclient' and search for '-starttls' (which will list said protocols)";
          echo "";
          echo "Protocol-specific (STARTTLS) messaging will NOT be used (openssl s_client -starttls \"${PROTO_STARTTLS}\")";
          echo "";
          PROTO_STARTTLS="";
        fi;
      fi;
    fi;

  fi;

done;


# ------------------------------------------------------------
echo "";
echo "SSL/TLS connection test";
echo "";
echo "Target Host:   \"${HOST_NAME}\"";
echo "Target Port:   \"${HOST_PORT}\"";
if [ -n "${PROTO_STARTTLS}" ]; then
echo "Target Proto:  \"${PROTO_STARTTLS}\"";
fi;
if [ -n "${PROTO_STARTTLS}" ]; then
  echo "";
  echo "Calling  [ openssl s_client -servername \"${HOST_NAME}\" -connect \"${HOST_NAME}:${HOST_PORT}\" -starttls ${PROTO_STARTTLS} 2>&1; ] ...";
  CERT_DETAILS="$(echo | openssl s_client -servername "${HOST_NAME}" -connect "${HOST_NAME}:${HOST_PORT}" -starttls ${PROTO_STARTTLS} 2>&1;)";
else
  echo "";
  echo "Calling  [ openssl s_client -servername \"${HOST_NAME}\" -connect \"${HOST_NAME}:${HOST_PORT}\" ] ...";
  CONNECTION_DETAILS=$(echo | openssl s_client -servername "${HOST_NAME}" -connect "${HOST_NAME}:${HOST_PORT}" 2>&1;);
  CERT_DATE_INFO=$(echo | openssl s_client -servername "${HOST_NAME}" -connect "${HOST_NAME}:${HOST_PORT}" 2>'/dev/null' | openssl x509 -noout -dates | sed -rne 's/^\s*[Nn]ot\s*[Aa]fter\s*(:|=)\s*(.+)$/\2/pi' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//';);
  CERTIFICATE_STATUS=$(echo | openssl s_client -servername "${HOST_NAME}" -connect "${HOST_NAME}:${HOST_PORT}" 2>'/dev/null' | openssl x509 -text;);
  CERT_EXP_DATE="$(echo "${CERTIFICATE_STATUS}" | sed -rne 's/^\s*[Nn]ot\s*[Aa]fter\s*(:|=)\s*(.+)$/\2/pi' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//';)";
  CERT_EXP_DATE_SHORTHAND="$(date --date="${CERT_EXP_DATE}" +'%Y-%m-%dT%H:%M:%S%z';)";
  CERT_EXP_DATE_FILENAME="$(date --utc --date="${CERT_EXP_DATE}" +'%Y-%m-%dT%H-%M-%SZ';)";
  CERT_DETAILS="";
  CERT_DETAILS+="-- BEGIN CONNECTION DETAILS  ------------------------------ ------------------------------"$'\n';
  CERT_DETAILS+="${CONNECTION_DETAILS}"$'\n';
  CERT_DETAILS+="-- END CONNECTION DETAILS  ------------------------------ ------------------------------"$'\n';
  CERT_DETAILS+="-- BEGIN CERTIFICATE STATUS  ------------------------------ ------------------------------"$'\n';
  CERT_DETAILS+="${CERTIFICATE_STATUS}"$'\n';
  CERT_DETAILS+="-- END CERTIFICATE STATUS  ------------------------------ ------------------------------"$'\n';
  CERT_DETAILS+="Certificate expiration date:  ${CERT_EXP_DATE_SHORTHAND}";
fi;
echo "";
echo "BEGIN OPENSSL OUTPUT ------------------------------ ------------------------------";
echo "${CERT_DETAILS}";
echo "END OF OPENSSL OUTPUT ------------------------------ ------------------------------";
echo "";


# ------------------------------------------------------------
#
# Citation(s)
#
#   en.wikipedia.org  |  "List of TCP and UDP port ports numbers - Wikipedia"  |  https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
#
#   stackoverflow.com  |  "Using openssl to get the certificate from a server"  |  https://stackoverflow.com/a/7886248
#
# ------------------------------------------------------------