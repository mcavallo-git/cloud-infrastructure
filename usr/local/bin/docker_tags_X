#!/bin/bash

if [ ! -v DOCKER_IMAGE ] || [ -z "${DOCKER_IMAGE}" ]; then
  read -p "Search for Tags on which Docker Image?  " -t 60 <'/dev/tty'; READ_RET_CODE=$?;
  if [ ${READ_RET_CODE} -gt 128 ]; then # From [ read --help ]: "The exit status is greater than 128 if the timeout is exceeded"
    echo -e "Error: Response timed out ";
  elif [ -n "${REPLY}" ]; then
    DOCKER_IMAGE="${REPLY}";
  fi;
fi;


if [ ! -v DOCKER_IMAGE ] || [ -z "${DOCKER_IMAGE}" ]; then
  echo "Error: Empty/unset Docker Image-Name";
  echo "  |--> Please retry using syntax [ env DOCKER_IMAGE=\"YOUR_IMAGE\" ${0} ]";
  exit 1;

else

  REQUIRED_PKG="jq"; if [ -z "$(which ${REQUIRED_PKG} 2>'/dev/null')" ]; then apt-get update -y; apt-get install -y ${REQUIRED_PKG}; fi;

  DOCKER_IMAGE_NAME="${DOCKER_IMAGE}";

  DOCKER_IMAGE_TAGS=$(curl -s -S "https://registry.hub.docker.com/v1/repositories/${DOCKER_IMAGE_NAME}/tags" | jq -r ".[].name" 2>'/dev/null';); ERRORS_TAG_LOOKUP=$?;
  if [ ${ERRORS_TAG_LOOKUP} -ne 0 ]; then
    echo "Error: No docker images found to match \"${DOCKER_IMAGE_NAME}\"";
    exit 1;
  else

    echo "";
    echo "\${#DOCKER_IMAGE_TAGS} = [ ${#DOCKER_IMAGE_TAGS} ]";
    echo "";

    DOCKER_IMAGE_TAGS_SORTED=$(echo "${DOCKER_IMAGE_TAGS}" | sort -r);
    DOCKER_IMAGE_TAGS_SORTED_REV=$(echo "${DOCKER_IMAGE_TAGS}" | sort);

    unset ARR_TAG_OPTIONS; declare -A ARR_TAG_OPTIONS; # [Re-]Instantiate bash array

    EACH_KEY=0;
    # MIN_KEY=$((EACH_KEY+1));
    MIN_KEY=${EACH_KEY};
    for EACH_TAG in ${DOCKER_IMAGE_TAGS_SORTED[@]}; do
      ARR_TAG_OPTIONS+=(["${EACH_KEY}"]="${EACH_TAG}");
      EACH_KEY=$((EACH_KEY+1));
    done;
    MAX_KEY=$((${EACH_KEY}-1));

    # MENU_LENGTH=10;
    # if [ -n "$(which bc 2>'/dev/null')" ] && [ -n "$(which tput 2>'/dev/null')" ]; then
    #   MENU_LENGTH=$(echo "$(tput lines) / 2" | bc);
    # fi;
    # IMAGES_MENU_OPTIONS=$(echo "${DOCKER_IMAGE_TAGS_SORTED}" | tail -n ${MENU_LENGTH});
    # echo "IMAGES_MENU_OPTIONS:";
    # echo "${IMAGES_MENU_OPTIONS}";

    if [ ${CHOICE_KEY} -le 0 ]; then
      echo "Error: No Containers found to be running - Please start a container then rerun \"${0}\"";
    else
      
      ARR_TAG_OPTIONS_NO_DUPES=($(echo "${ARR_TAG_OPTIONS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ';));
      for EACH_KEY in "${!ARR_TAG_OPTIONS_NO_DUPES[@]}"; do
        EACH_TAG="${ARR_TAG_OPTIONS_NO_DUPES[${EACH_KEY}]}";
        echo "   ${EACH_KEY}  |  ${DOCKER_IMAGE_NAME}:${EACH_TAG}";
      done;

      ERROR_SUGGEST_HELP="  |--> Expected user-input to be of type [ integer ], with value between [ ${MIN_KEY} ] and [ ${MAX_KEY} ], inclusive";
      
      # Let the user determine which tag (image-revision) to build-from
      read -p "Select which Tag to build:  " -t 60 <'/dev/tty'; READ_RET_CODE=$?;
      if [ ${READ_RET_CODE} -gt 128 ]; then # From [ read --help ]: "The exit status is greater than 128 if the timeout is exceeded"
        echo -e "Error: Response timed out""\n""${ERROR_SUGGEST_HELP}";

      elif [ -n "${REPLY}" ] && [[ ${REPLY} =~ ^-?[0-9]+$ ]] && [ ${REPLY} -ge ${MIN_KEY} ] && [ ${REPLY} -le ${MAX_KEY} ]; then
        USER_SELECTION_KEY=$((0+${REPLY}));
        if [ -z "${ARR_TAG_OPTIONS_NO_DUPES[${USER_SELECTION_KEY}]}" ]; then
          # Error: User-input key not found as an index within the Docker-Image-Tags array
          echo -e "Error: Invalid selection of \"${REPLY}\"""\n""${ERROR_SUGGEST_HELP}";

        else

          # Success - User selected a valid tag
          E1="LINES=$(tput lines)";
          E2="COLUMNS=$(tput cols)";
          DOCKER_IMAGE_WITH_TAG="${DOCKER_IMAGE_NAME}:${ARR_TAG_OPTIONS_NO_DUPES[${USER_SELECTION_KEY}]}";

          unset DOCKER_RUN_ARR; declare DOCKER_RUN_ARR; # [Re-]instantiate bash array
          if [ -v DOCKER_RUN_ARGS ] && [ -n "${DOCKER_RUN_ARGS}" ]; then
            # Apply predefined docker-run arguments
            DOCKER_RUN_ARR+=("${DOCKER_RUN_ARGS}");
          else
            read -p "Bash into the docker, now?  (press 'y' to confirm)  " -n 1 -t 60 <'/dev/tty'; # Await single keypress
            if [ -n "${REPLY}" ] && [ "$(echo ${REPLY} | tr '[:lower:]' '[:upper:]';)" == "Y" ]; then
              # Create & Bash into the Docker
              DOCKER_RUN_ARR+=("-i -t --rm ${DOCKER_IMAGE_WITH_TAG} /bin/bash");
            else
              # Create the Docker as a Background process
              DOCKER_RUN_ARR+=("-d");
              DOCKER_RUN_ARR+=("${DOCKER_IMAGE_WITH_TAG}");
            fi;
          fi;

          echo -e "\n""Info: Calling [ docker run ${DOCKER_RUN_ARR[@]} ]...""\n";
          # docker run ${DOCKER_RUN_PARAMS};
          docker run ${DOCKER_RUN_ARR[@]};

          # docker run -u root --rm -d -p 8080:8080 -p 50000:50000 -v "jenkins-data:/var/jenkins_home" -v "/var/run/docker.sock:/var/run/docker.sock" --name "${docker_name}" "jenkinsci/blueocean";

        fi;

      else
        # Error: Malformed User-input (didn't meet criteria, above)
        echo -e "Error: Invalid/empty User-input""\n""${ERROR_SUGGEST_HELP}";

      fi;
    fi;

  fi;

fi;



# ------------------------------------------------------------
#
# Citation(s)
# 
#   docs.docker.com  |  "docker search - Search the Docker Hub for images"  |  https://docs.docker.com/engine/reference/commandline/search/
#
# ------------------------------------------------------------