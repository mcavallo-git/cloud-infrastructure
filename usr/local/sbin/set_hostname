#!/bin/bash
#
# LOCAL_SBIN="/usr/local/sbin/set_hostname" && echo "" > "${LOCAL_SBIN}" && vi "${LOCAL_SBIN}" && chmod 0755 "${LOCAL_SBIN}";
#
# ------------------------------------------------------------
if [ 0 -eq 1 ]; then # RUN THIS SCRIPT REMOTELY:

curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/set_hostname?t=$(date +'%s.%N')" | bash;

# Test updating the hostname
clear; curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/set_hostname?t=$(date +'%s.%N')" | bash -s -- --hostname "$(hostname --all-fqdns | cut --delimiter=" " --fields=1;)";

# Actually update the hostname
clear; curl -H 'Cache-Control: no-cache' -s "https://raw.githubusercontent.com/mcavallo-git/cloud-infrastructure/master/usr/local/sbin/set_hostname?t=$(date +'%s.%N')" | bash -s -- --hostname "$(hostname --all-fqdns | cut --delimiter=" " --fields=1;)" --force;

fi;
# ------------------------------------------------------------
#
# Log all shell output & error output to logfile
#
LOGDIR="${HOME}/set_hostname_logs"; if [ -w "/var/log/" ]; then LOGDIR="/var/log/set_hostname"; fi;
mkdir -p "${LOGDIR}"; chown $(stat -c '%u:%g' $(dirname ${LOGDIR})) "${LOGDIR}"; chmod 0770 "${LOGDIR}";
LOGFILE="${LOGDIR}/$(basename ${LOGDIR})_$(date +'%Y%m%d_%H%M%S')"; echo -n "" > "${LOGFILE}"; chmod 0660 "${LOGFILE}";
exec > >(tee -a "${LOGFILE}" );
exec 2>&1;
#
# ------------------------------------------------------------
#
# Script must run as root or via sudo
#
if [ "$(id -un)" != "root" ]; then
  echo "";
  echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Script must run as user \"root\" or via \"sudo\" command";
  exit 1;
else
  # ------------------------------------------------------------
  #
  # This script modifies a Linux instance's host & domain name(s)
  #
  # Instantiate this command-line utility:
  # >   vi "/usr/local/sbin/set_hostname"; chmod 0755 "/usr/local/sbin/set_hostname";
  #
  ### Run using "DRY-RUN" mode:
  # >   set_hostname "localhost.localdomain" --Dry run "1";
  #
  ### Run using "LIVE" mode:
  # >   set_hostname "localhost.localdomain" --Dry run "0";
  #
  #
  # ------------------------------------------------------------
  # Parse inline arguments (passed to current script)
  #

  ARGS=("$@");
  COUNT_ARGS=${#ARGS[@]};
  ARGS_HOSTNAME_DEFINED=0;
  USE_WAN_IPV4=0;
  DRY_RUN=1;
  # Walk through any inline-arguments passed to this function
  for (( i=0;i<$COUNT_ARGS;i++ )); do

    EACH_ARG=${ARGS[${i}]};
    # BASH_ARG_NUMBER=$((${i}+1));  # Bash arg-number is one greater than the ARGS arg-number -> this is due-to bash's ${0} arg, which contains the base-command

    # Check if this is the last inline-argument or if there are more to follow
    if [ $((${i}+1)) -eq ${COUNT_ARGS} ]; then # if this is the last argument
      NEXT_ARG="";
    else
      NEXT_ARG=${ARGS[$((${i}+1))]};
      if [[ "${NEXT_ARG}" == "--"* ]]; then # Do not allow inline-arguments starting with "--..." to use the next bash-argument as an associated value if it, also, starts with "--..."
        NEXT_ARG="";
      fi;
    fi;

    if [ -n "${EACH_ARG}" ]; then # Parse each non-empty inline argument

      # Parse inline hostname
      if [ ${i} -eq 0 ] && [ -n "${EACH_ARG}" ] && [[ "${EACH_ARG}" != "-"* ]]; then # Allow the first argument to be the hostname (without needing --hostname before it)
        NEXT_ARG="${EACH_ARG}";
        EACH_ARG="--hostname";
      fi;

      if [ "${EACH_ARG}" == "--name" ] || [ "${EACH_ARG}" == "--hostname" ]; then
        if [ "${ARGS_HOSTNAME_DEFINED}" == "1" ]; then
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Inline parameters contain more than one value for hostname";
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Please call again using one, single value";
          exit 1;
        else
          ARGS_HOSTNAME_DEFINED=1;
          INPUT_HOSTNAME="${NEXT_ARG}";
        fi;
      fi;

      if [ "${EACH_ARG}" == "--wan" ]; then # --force
        USE_WAN_IPV4=1;
      fi;

      # Parse Dry run / non-Dry run calls
      if [ "${EACH_ARG}" == "--force" ]; then # --force
        DRY_RUN=0;
      elif [ "${EACH_ARG}" == "--Dry run" ] && [ -n "${NEXT_ARG}" ] && [ "${NEXT_ARG}" == "0" ]; then # --Dry run 0
        DRY_RUN=0;
      elif [ "${EACH_ARG}" == "--Dry run" ] && [ -n "${NEXT_ARG}" ] && [ "${NEXT_ARG}" == "false" ]; then # --Dry run false
        DRY_RUN=0;
      fi;

    fi;
  done;

  # ------------------------------------------------------------
  # Get status of hostname/domainname before edits
  #
  CURRENT_HOSTNAME="$(hostname --short;)";
  CURRENT_DOMAIN="$(hostname --domain;)";

  CURRENT_FQDN="$(hostname --domain;)";
  CURRENT_ALL_FQDNS="$(hostname --all-fqdns;)";

  CURRENT_LAN_IPV4="$(hostname --ip-address | awk '{print $1}';)";
  CURRENT_ALL_IPV4S="$(hostname --all-ip-addresses | awk '{print $1}';)";

  # ------------------------------------------------------------
  #
  # If no hostname argument was specified, request that the user enter it into their terminal
  #
  if [ -z "${INPUT_HOSTNAME}" ]; then
    # Script called w/o hostname --> Request value from user input
    READ_TIMEOUT=60;
    HOSTNAME_INPUT_PROMPT="Type a hostname ( or hostname.domainname.tld ) for this device - press 'Enter' once finished:  ";
    echo "";
    read -p "${HOSTNAME_INPUT_PROMPT}" -t ${READ_TIMEOUT} -a INPUT_HOSTNAME <'/dev/tty'; EXIT_CODE=${?};
    if [ ${EXIT_CODE} -gt 128 ]; then
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Response timed out after ${READ_TIMEOUT}s - Exiting...";
      exit 1;
    elif [ ${#USER_RESPONSE} -eq 0 ]; then
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Response's string length is zero (empty) - Exiting...";
      exit 1;
    else
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Response received: \"${USER_RESPONSE}\"";
    fi;
  fi;

  if [ -n "${INPUT_HOSTNAME}" ]; then
    # Trim any whitespace off the beginning & end of the given hostname
    INPUT_HOSTNAME="$(echo "${INPUT_HOSTNAME}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//';)";
  fi;

  # ------------------------------------------------------------
  if [ -z "${INPUT_HOSTNAME}" ]; then
    # Error - Required variable empty: INPUT_HOSTNAME
    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Command \"set_hostname\" called with empty hostname";
    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Please call again using syntax  [ set_hostname --hostname FQDN ]";
    exit 1;

  elif [ "${INPUT_HOSTNAME}" != "$(echo ${INPUT_HOSTNAME} | grep --extended-regexp '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$';)" ]; then
    # Error - Hostname contains one or more invalid characters
    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Command \"set_hostname\" called with invalid hostname:  \"${INPUT_HOSTNAME}\"";
    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Please call again using syntax  [ set_hostname --hostname \"valid-hostname\" ]";
    exit 1;

  else

    if [ "$(echo -n "${INPUT_HOSTNAME//[^.]}" | wc -c;)" -gt 0 ]; then
      # Hostname has at least one period in it --> parse the domain name out from the hostname
      SET_HOSTNAME=$(echo "${INPUT_HOSTNAME}" | cut --delimiter="." --fields=1 --only-delimited;);
      SET_DOMAIN=$(echo "${INPUT_HOSTNAME}" | cut --delimiter="." --fields=1 --complement --only-delimited;);
    else
      # Hostname includes no periods - use it as-is
      SET_HOSTNAME="${INPUT_HOSTNAME}";
      if [ -n "${CURRENT_DOMAIN}" ] && [ "${CURRENT_DOMAIN}" != "(none)" ]; then
        SET_DOMAIN="${CURRENT_DOMAIN}";
      fi;
    fi;

    # Set the FQDN to 'hostname.domainname' (if domain exists), otherwise set it to just 'hostname'
    if [ -n "${SET_DOMAIN}" ]; then
      SET_FQDN="${SET_HOSTNAME}.${SET_DOMAIN}";
    else
      SET_FQDN="${SET_HOSTNAME}";
    fi;

    echo "";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_HOSTNAME:   \"${CURRENT_HOSTNAME}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_DOMAIN:     \"${CURRENT_DOMAIN}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_FQDN:       \"${CURRENT_FQDN}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_ALL_FQDNS:  \"${CURRENT_ALL_FQDNS}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_LAN_IPV4:   \"${CURRENT_LAN_IPV4}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  CURRENT_ALL_IPV4S:  \"${CURRENT_ALL_IPV4S}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  SET_HOSTNAME:   \"${SET_HOSTNAME}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  SET_DOMAIN:   \"${SET_DOMAIN}\"";
    echo "$(date +'%Y-%m-%d %H:%M:%S') | Debug:  SET_FQDN:   \"${SET_FQDN}\"";

    # ------------------------------------------------------------
    # Determine Linux distro
    #

    IS_CENTOS=$(if [[ $(cat /etc/*release | grep -i centos | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
    IS_UBUNTU=$(if [[ $(cat /etc/*release | grep -i ubuntu | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
    IS_ALPINE=$(if [[ $(cat /etc/*release | grep -i alpine | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
    IS_DEBIAN=$(if [[ $(cat /etc/*release | grep -i debian | wc -l) -gt 0 ]]; then echo 1; else echo 0; fi; );
    THIS_LINUX_DISTRO="$(if [[ ${IS_CENTOS} -gt 0 ]]; then echo CENTOS; elif [[ ${IS_UBUNTU} -gt 0 ]]; then echo UBUNTU; elif [[ ${IS_ALPINE} -gt 0 ]]; then echo ALPINE; elif [[ ${IS_DEBIAN} -gt 0 ]]; then echo DEBIAN; else echo UNKNOWN; fi; )";

    # ------------------------------------------------------------
    # External server(s) to resolve WAN-IP through
    #
    RESOLVER_1="https://icanhazip.com";
    RESOLVER_2="https://ipecho.net/plain";
    RESOLVER_3="https://ident.me";
    RESOLVER_4="https://bot.whatismyipaddress.com";

    ### Get WAN-Outgoing IPv4
    if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_1}"); fi; RESOLVER_USED="${RESOLVER_1}";
    if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_2}"); fi; RESOLVER_USED="${RESOLVER_2}";
    if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_3}"); fi; RESOLVER_USED="${RESOLVER_3}";
    if [ -z "${THIS_WAN_IPV4}" ]; then THIS_WAN_IPV4=$(curl -4 -L -s "${RESOLVER_4}"); fi; RESOLVER_USED="${RESOLVER_4}";

    ### Get LAN-Local's Gateway IPv4
    THIS_GATEWAY_IPV4=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\1/p");

    ### Get LAN-Local IPv4(s) - One per NIC
    THIS_LAN_NIC=$(ip route|grep 'default via '|sed -rne "s/^default\s+via\s+([0-9a-fA-F\:\.]+)\s+[a-zA-Z0-9]+\s+([a-zA-Z0-9]+).+$/\2/p");

    ### Get LAN-Local IPv4, as well as LAN-Local IPv6 (if exists)
    THIS_LAN_IPV4=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\.' 2>'/dev/null';);
    if [ -z "${THIS_LAN_IPV4}" ]; then
      THIS_LAN_IPV4=$(hostname -i | awk '{print $1}' 2>'/dev/null';);
    fi;
    THIS_LAN_IPV6=$(ip addr show ${THIS_LAN_NIC} | grep 'inet' | grep 'scope global' | awk '{ print $2; }' | sed 's/\/.*$//' | grep '\:' 2>'/dev/null';);

    if [ ${USE_WAN_IPV4} -ne 0 ]; then
      ### Show Resolved WAN IPv4
      if [ -n "${THIS_WAN_IPV4}" ]; then
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  WAN Outgoing IPv4 resolved to \"${THIS_WAN_IPV4}\"";
      else
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Unable to resolve outgoing WAN IPv4 Address";
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Please call again using syntax  [ env THIS_WAN_IPV4=\"127.0.0.1\" set_hostname ]  (replacing 127.0.0.1 with machine's WAN IPv4)";
        exit 1;
      fi;
    else
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Optional) Resolve hostname requests to WAN IPv4 (instead of LAN) using syntax  [ set_hostname --wan ]";
    fi;

    ### Show Resolved Gateway IPv4
    if [ -n "${THIS_GATEWAY_IPV4}" ]; then
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  LAN Gateway IPv4 resolved to \"${THIS_GATEWAY_IPV4}\"";
    else 
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Warning:  Unable to resolve LAN's Gateway-IPv4.";
    fi;

    ### Show Resolved LAN IPv4
    if [ -n "${THIS_LAN_IPV4}" ]; then
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  LAN Local IPv4 resolved to \"${THIS_LAN_IPV4}\"";
    else 
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Error:  Unable to resolve LAN Local IPv4 Address  - If you want to manually set it, please set \${THIS_LAN_IPV4} to your desired value, then re-run this script";
      exit 1;
    fi;

    ### Show Resolved LAN IPv6
    if [ -n "${THIS_LAN_IPV6}" ]; then
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  LAN Local IPv6 resolved to \"${THIS_LAN_IPV6}\"";
    else 
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Warning:  Unable to resolve LAN Local IPv6 Address";
    fi;

    # ------------------------------------------------------------
    # If Dry run is disabled, require user to confirm changes
    #

    if [[ "${DRY_RUN}" -eq 0 ]]; then
      echo "";
      echo ""; read -p "Update hostname, now?  (press 'y' to confirm)" -n 1 -t 60 <'/dev/tty'; echo "";
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  - Confirmed by user - Proceeding with changes to hostname & domain-name...";
      else
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  - Cancelled by user - Exiting...";
        exit 1;
      fi;
    fi;

    # ------------------------------------------------------------
    # /etc/hostname
    #
    HOSTNAME_FILE="/etc/hostname";
    if [[ -f "${HOSTNAME_FILE}" ]]; then
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ cat \"${HOSTNAME_FILE}\"; ]...  (before edits, $(date +'%Y-%m-%d %H:%M:%S'))";
        echo "------------------------------------------------------------";
        cat "${HOSTNAME_FILE}";
        echo "------------------------------------------------------------";
        if [ "$(cat ${HOSTNAME_FILE})" != "{SET_HOSTNAME}" ]; then # update required for hostname file
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Updating hostname file \"${HOSTNAME_FILE}\" to contain new hostname \"${SET_HOSTNAME}\", instead";
          echo "${SET_HOSTNAME}" > "${HOSTNAME_FILE}";
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ cat \"${HOSTNAME_FILE}\"; ]...  (after edits, $(date +'%Y-%m-%d %H:%M:%S'))";
          echo "------------------------------------------------------------";
          cat "${HOSTNAME_FILE}";
          echo "------------------------------------------------------------";
        else
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Skipping update for hostname file \"${HOSTNAME_FILE}\" (already matches desired hostname)";
        fi;
      fi;
    fi;

    # ------------------------------------------------------------
    # /etc/hosts
    #
    # ------------------------------------------------------------
    # To set the DNS domainname edit /etc/hosts file and ensure that:
    #  |--> 1. There is a line <machine's primary, non-loopback IP address> <hostname>.<domainname> <hostname> there
    #  |--> 2. There are NO other lines with <some IP> <hostname>, and this includes lines with 127.0.0.1 and ::1 (IPv6) addresses.
    # ------------------------------------------------------------
    HOSTS_FILE="/etc/hosts";
    if [[ -f "${HOSTS_FILE}" ]]; then

      if [ ${USE_WAN_IPV4} -ne 0 ]; then
        SET_HOSTS_IPV4="${THIS_WAN_IPV4}";
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Resolving hostname \"${SET_HOSTNAME}\" to WAN IPv4 address \"${THIS_LAN_IPV4}\"";
      else
        # Resolve hostname to LAN IPv4
        SET_HOSTS_IPV4="${THIS_LAN_IPV4}";
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Resolving hostname \"${SET_HOSTNAME}\" to LAN IPv4 address \"${THIS_LAN_IPV4}\"";
        # Alert user the hostname will NOT be resolved to the WAN IPv4 (but how to do so)
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  To resolve hostname to the current WAN IPv4 \"${THIS_WAN_IPV4}\", instead, call using the \"--wan\" argument (intended for cloud-based servers, where a given WAN IPv4 Address is associated with only one, unique instance of linux)";
      fi;

      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ cat \"${HOSTS_FILE}\"; ]...  (before edits, $(date +'%Y-%m-%d %H:%M:%S'))";
      echo "------------------------------------------------------------";
      cat "${HOSTS_FILE}";
      echo "------------------------------------------------------------";

      TEMP_HOSTS="${HOSTS_FILE}.$(date +'%s.%N').tmp";
      cp -f "${HOSTS_FILE}" "${TEMP_HOSTS}";

      sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -i "${TEMP_HOSTS}";  # Trim leading/trailing whitespace off of each line

      sed -e "/^${THIS_LAN_IPV4} .*$/ s/^#*/# /" -i "${TEMP_HOSTS}";  # Comment out LAN IPV4 line(s)
      # sed -e "/^${THIS_LAN_IPV4} /c\\" -i "${TEMP_HOSTS}";  # Remove LAN IPV4 line(s)

      if [ ${USE_WAN_IPV4} -ne 0 ]; then sed -e "/^${THIS_WAN_IPV4} .*$/ s/^#*/# /" -i "${TEMP_HOSTS}"; fi;  # Comment out WAN IPV4 line(s)
      # if [ ${USE_WAN_IPV4} -ne 0 ]; then sed -e "/^${THIS_WAN_IPV4} /c\\" -i "${TEMP_HOSTS}"; fi;  # Remove WAN IPV4 line(s)

      sed -e "/^127\.0\.1\.1 .*$/ s/^#*/# /" -i "${TEMP_HOSTS}";  # Comment out Loopback IPv4 line(s)
      # sed -e "/^127.0.1.1 /c\\" -i "${TEMP_HOSTS}";  # Remove Loopback IPv4 line(s)

      sed -e "/^::1 .*$/ s/^#*/# /" -i "${TEMP_HOSTS}";  # Comment out Loopback IPv6 line(s)
      # sed -e "/^::1 /c\\" -i "${TEMP_HOSTS}";  # Remove Loopback IPv6 line(s)

      # Update hostname resolution
      LOOPBACK_IPV4="127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4";
      LOOPBACK_IPV6="::1 localhost localhost.localdomain localhost6 localhost6.localdomain6";
      if [ -n "${SET_DOMAIN}" ]; then
        # Hostname + FQDN (hostname.domainname)
        sed -i -e "/^127.0.0.1/{" -e "i\\${SET_HOSTS_IPV4} ${SET_FQDN} ${SET_HOSTNAME}" -e "a\\${LOOPBACK_IPV6}" -e "c\\${LOOPBACK_IPV4}" -e "}" "${TEMP_HOSTS}";
      else
        # Hostname only (no FQDN)
        sed -i -e "/^127.0.0.1/{" -e "i\\${SET_HOSTS_IPV4} ${SET_HOSTNAME}" -e "a\\${LOOPBACK_IPV6}" -e "c\\${LOOPBACK_IPV4}" -e "}" "${TEMP_HOSTS}";
      fi;

      sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -i "${TEMP_HOSTS}";  # Trim leading/trailing whitespace off of each line

      sed -i -e "/^\s*$/d" "${TEMP_HOSTS}";  # Remove empty/blank/whitespace-only lines

      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ cat \"${TEMP_HOSTS}\"; ]...  (after edits, $(date +'%Y-%m-%d %H:%M:%S'))";
      echo "------------------------------------------------------------";
      cat "${TEMP_HOSTS}";
      echo "------------------------------------------------------------";


      if [[ "${DRY_RUN}" -eq 0 ]]; then
        # NOT a Dry run -> Overwrite hosts file
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Updating Hosts file - Calling [ cp --force \"${TEMP_HOSTS}\" \"${HOSTS_FILE}\"; ]...";
        cp --force "${TEMP_HOSTS}" "${HOSTS_FILE}";
      fi;
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Removing temporary Hosts file - Calling [ rm --force "${TEMP_HOSTS}"; ]...";
      rm --force "${TEMP_HOSTS}";
      
    fi;

    # ------------------------------------------------------------
    # centos 6
    #
    if [[ -f "/etc/sysconfig/network" ]]; then
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        if [ -n "${SET_DOMAIN}" ]; then
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ sed -i -e \"/^HOSTNAME=/c\HOSTNAME=${SET_FQDN}\" \"/etc/sysconfig/network\"; ]...";
          sed -i -e "/^HOSTNAME=/c\HOSTNAME=${SET_FQDN}" "/etc/sysconfig/network";
        else
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ sed -i -e \"/^HOSTNAME=/c\HOSTNAME=${SET_HOSTNAME}\" \"/etc/sysconfig/network\"; ]...";
          sed -i -e "/^HOSTNAME=/c\HOSTNAME=${SET_HOSTNAME}" "/etc/sysconfig/network";
        fi;
      else # Dry run
        if [ -n "${SET_DOMAIN}" ]; then
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping call [ sed -i -e \"/^HOSTNAME=/c\HOSTNAME=${SET_FQDN}\" \"/etc/sysconfig/network\"; ]";
        else
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping call [ sed -i -e \"/^HOSTNAME=/c\HOSTNAME=${SET_HOSTNAME}\" \"/etc/sysconfig/network\"; ]";
        fi;
      fi;
    fi;

    # ------------------------------------------------------------
    # debian 7 / slackware / ubuntu 14.04
    #
    if [[ -f "/etc/init.d/hostname.sh" ]]; then
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ /etc/init.d/hostname.sh; ]...";
        /etc/init.d/hostname.sh;
      else # Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping call  [ /etc/init.d/hostname.sh; ]";
      fi;
    fi;

    # ------------------------------------------------------------
    # arch / centos 7 / debian 8 / fedora / ubuntu 16.04 and above
    #
    if [[ $(hostnamectl | wc -l) -gt 0 ]]; then
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Calling [ hostnamectl set-hostname \"${SET_HOSTNAME}\"; ]...";
        hostnamectl set-hostname "${SET_HOSTNAME}";
      else # Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping call  [ hostnamectl set-hostname \"${SET_HOSTNAME}\"; ]";
      fi;
    fi;

    if [[ "${DRY_RUN}" -eq 1 ]]; then
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) No changes will be made to existing network settings or stored configurations";
      echo "";
      echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Please call again using syntax  [ set_hostname --Dry run 0; ]  or  [ set_hostname --force; ]";
    fi;

    # ------------------------------------------------------------
    # Apply Changes
    #
    if [[ -f "/etc/init.d/network" ]]; then # CentOS-RHEL distros
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        echo "";
        echo "Network Manager must be restarted to apply changes ( required command  [ /etc/init.d/network restart ]  )";
        read -p "   |--> Restart Network Manager, now?  (press 'y' to confirm)" -n 1 -t 60 <'/dev/tty';  # Await single keypress
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Restarting Network Manager - Calling [ /etc/init.d/network restart; ]...";
          /etc/init.d/network restart;
        else
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') Postponing Network Manager restart";
          exit 1;
        fi;
      else # Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping network manager restart";
      fi;
    else # [other] distros
      if [[ "${DRY_RUN}" -eq 0 ]]; then # NOT a Dry run
        echo "";
        echo "System restart required to apply changes to hostname";
        read -p "   |--> Reboot this workstation/server, now?  (press 'y' to confirm)" -n 1 -t 60 <'/dev/tty';  # Await single keypress
        echo "";
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          echo "";
          echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  Rebooting - Calling [ shutdown --reboot now; ]...";
          shutdown --reboot now;
        else
          echo "";
          echo "System restart postponed";
          exit 1;
        fi;
      else # Dry run
        echo "";
        echo "$(date +'%Y-%m-%d %H:%M:%S') | Info:  (Dry run enabled) Skipping call [ shutdown --reboot now; ]";
      fi;
    fi;
    echo "";

  fi;

fi;

# ------------------------------------------------------------
#
# Citation(s)
#
#   computerhope.com  |  "Linux test command"  |  https://www.computerhope.com/unix/test.htm
#
#   jblevins.org  |  "Linux Hostname Configuration"  |  https://jblevins.org/log/hostname
#
#   linode.com  |  "Getting Started with Linode"  |  https://www.linode.com/docs/getting-started/#setting-the-hostname
#
#   stackoverflow.com  |  "Count occurrences of a char in a string using Bash"  |  https://stackoverflow.com/a/16679640
#
#   support.rackspace.com  |  "Change a server's hostname in CentOS"  |  https://support.rackspace.com/how-to/centos-hostname-change/
#
#   unix.stackexchange.com  |  "How to set the fully qualified hostname on CentOS 7.0?"  |  https://unix.stackexchange.com/a/239950
#
# ------------------------------------------------------------