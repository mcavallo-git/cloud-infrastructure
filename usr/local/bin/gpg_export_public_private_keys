#!/bin/bash
# ------------------------------------------------------------
#
# GPG (GnuPG) - Export target public/private GPG (GnuPG) keys to taget directory
#

if [ "1" == "1" ]; then

# Path to GPG executable (mainly for Windows installs running a Git Bash / WSL terminal which needs to use GPG4Win's gpg.exe)
GPG4WIN_GPG_EXE_LINUX="/c/Program Files (x86)/GnuPG/bin/gpg.exe";
if [ -d "${GPG4WIN_GPG_EXE_LINUX}" ]; then
GPG_CLI="${GPG4WIN_GPG_EXE_LINUX}";
else
GPG_CLI="$(which gpg)";
fi;
echo "\$GPG_CLI=\"${GPG_CLI}\"";

# Directory Path to export keys to
OUTPUT_DIRNAME="${HOME}/Desktop/GnuPG_Keys_$(date +'%Y%m%d_%H%M%S')";
mkdir -p "${OUTPUT_DIRNAME}";

# GPG Key IDs to Export
unset GPG_KEY_IDS_TO_EXPORT; declare -a GPG_KEY_IDS_TO_EXPORT; # [Re-]Instantiate bash array
GPG_KEY_IDS_TO_EXPORT+=("1A2B3C4D5E6F7A8B");
GPG_KEY_IDS_TO_EXPORT+=("1A2B3C4D5E6F7A8B");
GPG_KEY_IDS_TO_EXPORT+=("1A2B3C4D5E6F7A8B");

for GPG_KEY_ID in "${GPG_KEY_IDS_TO_EXPORT[@]}"; do
${GPG_CLI} --armor --export-secret-keys "${GPG_KEY_ID_1}" > "${OUTPUT_DIRNAME}/GnuPG_PrivateKey_${GPG_KEY_ID_1}.pem";
${GPG_CLI} --armor --export "${GPG_KEY_ID_1}" > "${OUTPUT_DIRNAME}/GnuPG_PublicKey_${GPG_KEY_ID_1}.pub";
done;

echo "Files exported to directory `"${OUTPUT_DIRNAME}`"";

fi;


# ------------------------------------------------------------
#
# Citation(s)
#
#   help.github.com  |  "Generating a new GPG key - GitHub Docs"  |  https://help.github.com/en/articles/generating-a-new-gpg-key
#
#   git.gnupg.org  |  "GnuPG Details"  |  https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob_plain;f=doc/DETAILS
#
#   wiki.archlinux.org  |  "GnuPG - ArchWiki"  |  https://wiki.archlinux.org/title/GnuPG
#
#   wiki.debian.org  |  "Subkeys - Debian Wiki"  |  https://wiki.debian.org/Subkeys
#
#   www.gnupg.org  |  "gnupg.pdf"  |  https://www.gnupg.org/documentation/manuals/gnupg.pdf
#
#   www.gnupg.org  |  "Making and verifying signatures"  |  https://www.gnupg.org/gph/en/manual/x135.html
#
# ------------------------------------------------------------
